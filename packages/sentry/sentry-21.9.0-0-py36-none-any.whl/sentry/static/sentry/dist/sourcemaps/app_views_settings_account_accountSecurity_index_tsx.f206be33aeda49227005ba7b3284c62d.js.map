{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.tsx","webpack:///./app/views/settings/account/passwordForm.tsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  index: boolean;\n  activeClassName: string;\n  disabled: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    query?: string;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  };\n\nclass ListLink extends React.Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: 'Current Password',\n        placeholder: '',\n        help: 'Your current password',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'New Password',\n        placeholder: '',\n        help: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'Verify New Password',\n        placeholder: '',\n        help: 'Verify your new password',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, 'Passwords do not match']];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconFlag} from 'app/icons';\nimport {tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport getPendingInvite from 'app/utils/getPendingInvite';\n\nconst TwoFactorRequired = () =>\n  !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" icon={<IconFlag size=\"md\" />}>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication].' +\n          ' Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {PanelAlert, PanelItem} from 'app/components/panels';\nimport accountPasswordFields from 'app/data/forms/accountPassword';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype OnSubmitSuccess = Parameters<NonNullable<Form['props']['onSubmitSuccess']>>;\n\nfunction PasswordForm() {\n  function handleSubmitSuccess(_change: OnSubmitSuccess[0], model: OnSubmitSuccess[1]) {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  }\n\n  function handleSubmitError() {\n    addErrorMessage('Error changing password');\n  }\n\n  const user = ConfigStore.get('user');\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      apiEndpoint=\"/users/me/password/\"\n      initialData={{}}\n      onSubmitSuccess={handleSubmitSuccess}\n      onSubmitError={handleSubmitError}\n      hideFooter\n    >\n      <JsonForm\n        forms={accountPasswordFields}\n        additionalFieldProps={{user}}\n        renderFooter={() => (\n          <Actions>\n            <Button type=\"submit\" priority=\"primary\">\n              {t('Change password')}\n            </Button>\n          </Actions>\n        )}\n        renderHeader={() => (\n          <PanelAlert type=\"info\">\n            {t('Changing your password will invalidate all logged in sessions.')}\n          </PanelAlert>\n        )}\n      />\n    </Form>\n  );\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nexport default PasswordForm;\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {openEmailVerification} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator, OrganizationSummary} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport TwoFactorRequired from 'app/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport PasswordForm from 'app/views/settings/account/passwordForm';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  orgsRequire2fa: OrganizationSummary[];\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  hasVerifiedEmail: boolean;\n  handleRefresh: () => void;\n  onDisable: (auth: Authenticator) => void;\n} & AsyncView['props'] &\n  RouteComponentProps<{}, {}>;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends AsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  handleAdd2FAClicked = () => {\n    const {handleRefresh} = this.props;\n    openEmailVerification({\n      onClose: () => {\n        handleRefresh();\n      },\n      actionMessage: 'enrolling a 2FA device',\n    });\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable, hasVerifiedEmail} =\n      this.props;\n    const isEmpty = !authenticators?.length;\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <Field\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button data-test-id=\"signoutAll\" onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  configureButton,\n                  name,\n                } = auth;\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus enabled={isEnrolled} />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && hasVerifiedEmail && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"small\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n                        {!isBackupInterface && !isEnrolled && !hasVerifiedEmail && (\n                          <Button\n                            onClick={this.handleAdd2FAClicked}\n                            size=\"small\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"small\"\n                            className=\"details-button\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): ${this.formatOrgSlugs()}.`\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"small\"\n                                label={t('delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"names":["ListLink","React","_classNames","className","activeClassName","this","props","isActive","classNames","to","query","index","router","queryData","qs","undefined","target","pathname","render","children","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","getUserIsNotManaged","user","isManaged","route","title","fields","name","type","autoComplete","label","placeholder","help","visible","required","validate","id","form","passwordVerify","passwordNew","getPendingInvite","data","Cookies","queryString","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","AsyncComponent","getTitle","renderComponent","message","t","RemoveConfirm","StyledAlert","Alert","space","icon","size","tct","link","href","PasswordForm","ConfigStore","apiMethod","apiEndpoint","initialData","onSubmitSuccess","_change","model","resetForm","addSuccessMessage","onSubmitError","addErrorMessage","hideFooter","forms","accountPasswordFields","additionalFieldProps","renderFooter","Actions","priority","renderHeader","PanelItem","AccountSecurity","async","api","requestPromise","method","all","window","assign","err","orgsRequire2fa","slugs","slug","length","handleRefresh","openEmailVerification","onClose","actionMessage","getEndpoints","renderBody","authenticators","countEnrolled","deleteDisabled","onDisable","hasVerifiedEmail","isEmpty","tabs","underlined","alignRight","flexibleControlStateSize","onClick","handleSessionClose","auth","authId","description","isBackupInterface","isEnrolled","configureButton","AuthenticatorPanelItem","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","enabled","AuthenticatorName","handleAdd2FAClicked","formatOrgSlugs","onConfirm","Description","CircleIndicator","TextBlock","FormPanel","collapsed","state","setState","access","collapsible","otherProps","sanitizeQuerySelector","Collapse","handleToggleEvents","direction","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","every","renderForm","formPanelProps","features","_location","formGroup","i"],"sourceRoot":""}