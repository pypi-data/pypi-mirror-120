{"version":3,"file":"chunks/app_views_settings_account_accountSubscriptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/switchButton.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSubscriptions.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  forwardRef?: React.Ref<HTMLButtonElement>;\n  className?: string;\n  id?: string;\n  name?: string;\n  size?: 'sm' | 'lg';\n  isActive?: boolean;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  toggle: React.HTMLProps<HTMLButtonElement>['onClick'];\n};\n\nconst Switch = ({\n  forwardRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n}: Props) => (\n  <SwitchButton\n    ref={forwardRef}\n    id={id}\n    name={name}\n    type=\"button\"\n    className={className}\n    onClick={isDisabled ? undefined : toggle}\n    role=\"checkbox\"\n    aria-checked={isActive}\n    isLoading={isLoading}\n    isDisabled={isDisabled}\n    isActive={isActive}\n    size={size}\n    data-test-id=\"switch\"\n  >\n    <Toggle\n      isDisabled={isDisabled}\n      isActive={isActive}\n      forceActiveColor={forceActiveColor}\n      size={size}\n    />\n  </SwitchButton>\n);\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 6 : 10);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 2 : 4);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  transition: 0.15s border ease;\n  cursor: ${p => (p.isLoading || p.isDisabled ? 'not-allowed' : 'pointer')};\n  pointer-events: ${p => (p.isLoading || p.isDisabled ? 'none' : null)};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 2}px;\n  border-radius: ${getSize}px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: ${p => p.theme.border};\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default React.forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardRef={ref} />\n));\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport groupBy from 'lodash/groupBy';\nimport moment from 'moment';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport DateTime from 'app/components/dateTime';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Switch from 'app/components/switchButton';\nimport {IconToggle} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst ENDPOINT = '/users/me/subscriptions/';\n\ntype Subscription = {\n  email: string;\n  listDescription: string;\n  listId: number;\n  listName: string;\n  subscribed: boolean;\n  subscribedDate: string | null;\n  unsubscribedDate: string | null;\n};\n\ntype State = AsyncView['state'] & {\n  subscriptions: Subscription[];\n};\n\nclass AccountSubscriptions extends AsyncView<AsyncView['props'], State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['subscriptions', ENDPOINT]];\n  }\n\n  getTitle() {\n    return 'Subscriptions';\n  }\n\n  handleToggle = (subscription: Subscription, index: number, _e: React.MouseEvent) => {\n    const subscribed = !subscription.subscribed;\n    const oldSubscriptions = this.state.subscriptions;\n\n    this.setState(state => {\n      const newSubscriptions = state.subscriptions.slice();\n      newSubscriptions[index] = {\n        ...subscription,\n        subscribed,\n        subscribedDate: new Date().toString(),\n      };\n      return {\n        ...state,\n        subscriptions: newSubscriptions,\n      };\n    });\n\n    this.api.request(ENDPOINT, {\n      method: 'PUT',\n      data: {\n        listId: subscription.listId,\n        subscribed,\n      },\n      success: () => {\n        addSuccessMessage(\n          `${subscribed ? 'Subscribed' : 'Unsubscribed'} to ${subscription.listName}`\n        );\n      },\n      error: () => {\n        addErrorMessage(\n          `Unable to ${subscribed ? '' : 'un'}subscribe to ${subscription.listName}`\n        );\n        this.setState({subscriptions: oldSubscriptions});\n      },\n    });\n  };\n\n  renderBody() {\n    const subGroups = Object.entries(groupBy(this.state.subscriptions, sub => sub.email));\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"Subscriptions\" />\n        <TextBlock>\n          {t(`Sentry is committed to respecting your inbox. Our goal is to\n              provide useful content and resources that make fixing errors less\n              painful. Enjoyable even.`)}\n        </TextBlock>\n\n        <TextBlock>\n          {t(`As part of our compliance with the EU’s General Data Protection\n              Regulation (GDPR), starting on 25 May 2018, we’ll only email you\n              according to the marketing categories to which you’ve explicitly\n              opted-in.`)}\n        </TextBlock>\n\n        <Panel>\n          {this.state.subscriptions.length ? (\n            <div>\n              <PanelHeader>{t('Subscription')}</PanelHeader>\n              <PanelBody>\n                {subGroups.map(([email, subscriptions]) => (\n                  <React.Fragment key={email}>\n                    {subGroups.length > 1 && (\n                      <Heading>\n                        <IconToggle /> {t('Subscriptions for %s', email)}\n                      </Heading>\n                    )}\n\n                    {subscriptions.map((subscription, index) => (\n                      <PanelItem center key={subscription.listId}>\n                        <SubscriptionDetails>\n                          <SubscriptionName>{subscription.listName}</SubscriptionName>\n                          {subscription.listDescription && (\n                            <Description>{subscription.listDescription}</Description>\n                          )}\n                          {subscription.subscribed ? (\n                            <SubscribedDescription>\n                              <div>\n                                {tct('[email] on [date]', {\n                                  email: subscription.email,\n                                  date: (\n                                    <DateTime\n                                      shortDate\n                                      date={moment(subscription.subscribedDate!)}\n                                    />\n                                  ),\n                                })}\n                              </div>\n                            </SubscribedDescription>\n                          ) : (\n                            <SubscribedDescription>\n                              {t('Not currently subscribed')}\n                            </SubscribedDescription>\n                          )}\n                        </SubscriptionDetails>\n                        <div>\n                          <Switch\n                            isActive={subscription.subscribed}\n                            size=\"lg\"\n                            toggle={this.handleToggle.bind(this, subscription, index)}\n                          />\n                        </div>\n                      </PanelItem>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </PanelBody>\n            </div>\n          ) : (\n            <EmptyMessage>{t(\"There's no subscription backend present.\")}</EmptyMessage>\n          )}\n        </Panel>\n        <TextBlock>\n          {t(`We’re applying GDPR consent and privacy policies to all Sentry\n              contacts, regardless of location. You’ll be able to manage your\n              subscriptions here and from an Unsubscribe link in the footer of\n              all marketing emails.`)}\n        </TextBlock>\n\n        <TextBlock>\n          {tct(\n            'Please contact [email:learn@sentry.io] with any questions or suggestions.',\n            {email: <a href=\"mailto:learn@sentry.io\" />}\n          )}\n        </TextBlock>\n      </div>\n    );\n  }\n}\n\nconst Heading = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(1)};\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1.5)} ${space(2)};\n  background: ${p => p.theme.backgroundSecondary};\n  color: ${p => p.theme.subText};\n`;\n\nconst SubscriptionDetails = styled('div')`\n  width: 50%;\n  padding-right: ${space(2)};\n`;\n\nconst SubscriptionName = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\nconst Description = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-top: ${space(0.75)};\n  color: ${p => p.theme.subText};\n`;\n\nconst SubscribedDescription = styled(Description)`\n  color: ${p => p.theme.gray300};\n`;\n\nexport default AccountSubscriptions;\n"],"names":["Switch","forwardRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","SwitchButton","ref","type","onClick","undefined","role","Toggle","getSize","p","getToggleSize","getToggleTop","getTranslateX","theme","border","active","React","props","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ENDPOINT","AccountSubscriptions","subscription","index","_e","subscribed","oldSubscriptions","state","subscriptions","setState","newSubscriptions","slice","subscribedDate","Date","toString","api","request","method","data","listId","success","addSuccessMessage","listName","error","addErrorMessage","getEndpoints","renderBody","subGroups","Object","entries","groupBy","sub","email","t","length","map","Heading","center","SubscriptionDetails","SubscriptionName","listDescription","Description","SubscribedDescription","tct","date","shortDate","moment","handleToggle","bind","href","PanelItem","space","fontSizeMedium","backgroundSecondary","subText","fontSizeExtraLarge","fontSizeSmall","gray300"],"sourceRoot":""}