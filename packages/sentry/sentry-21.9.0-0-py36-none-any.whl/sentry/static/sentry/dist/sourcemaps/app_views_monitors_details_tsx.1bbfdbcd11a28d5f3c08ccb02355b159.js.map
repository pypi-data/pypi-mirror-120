{"version":3,"file":"chunks/app_views_monitors_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/monitors/checkInIcon.tsx","webpack:///./app/views/monitors/monitorCheckIns.tsx","webpack:///./app/views/monitors/monitorHeaderActions.tsx","webpack:///./app/utils/logging.tsx","webpack:///./app/views/monitors/monitorHeader.tsx","webpack:///./app/components/issueList.tsx","webpack:///./app/views/monitors/monitorIssues.tsx","webpack:///./app/views/monitors/monitorStats.tsx","webpack:///./app/views/monitors/details.tsx","webpack:///./app/views/monitors/monitorIcon.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\ntype Props = {\n  size: number | string;\n  status: 'error' | 'ok';\n  color?: string;\n};\n\nexport default styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.theme.disabled\n        };`};\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport {PanelBody, PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport {Monitor} from 'app/views/monitors/types';\n\nimport CheckInIcon from './checkInIcon';\n\ntype CheckIn = {\n  dateCreated: string;\n  duration: number;\n  id: string;\n  status: 'ok' | 'error';\n};\n\ntype Props = {\n  monitor: Monitor;\n} & AsyncComponent['props'];\n\ntype State = {\n  checkInList: CheckIn[];\n} & AsyncComponent['state'];\n\nexport default class MonitorCheckIns extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {monitor} = this.props;\n    return [\n      ['checkInList', `/monitors/${monitor.id}/checkins/`, {query: {per_page: 10}}],\n    ];\n  }\n\n  renderError() {\n    return <ErrorWrapper>{super.renderError()}</ErrorWrapper>;\n  }\n\n  renderBody() {\n    return (\n      <PanelBody>\n        {this.state.checkInList.map(checkIn => (\n          <PanelItem key={checkIn.id}>\n            <CheckInIconWrapper>\n              <CheckInIcon status={checkIn.status} size={16} />\n            </CheckInIconWrapper>\n            <TimeSinceWrapper>\n              <TimeSince date={checkIn.dateCreated} />\n            </TimeSinceWrapper>\n            <div>{checkIn.duration && <Duration seconds={checkIn.duration / 100} />}</div>\n          </PanelItem>\n        ))}\n      </PanelBody>\n    );\n  }\n}\n\nconst DivMargin = styled('div')`\n  margin-right: ${space(2)};\n`;\n\nconst CheckInIconWrapper = styled(DivMargin)`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled(DivMargin)``;\n\nconst ErrorWrapper = styled('div')`\n  margin: ${space(3)} ${space(3)} 0;\n`;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport Confirm from 'app/components/confirm';\nimport {IconDelete, IconEdit} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {logException} from 'app/utils/logging';\nimport withApi from 'app/utils/withApi';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  api: Client;\n  monitor: Monitor;\n  orgId: string;\n  onUpdate: (data: Monitor) => void;\n};\n\nconst MonitorHeaderActions = ({api, monitor, orgId, onUpdate}: Props) => {\n  const handleDelete = () => {\n    const redirectPath = `/organizations/${orgId}/monitors/`;\n    addLoadingMessage(t('Deleting Monitor...'));\n\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'DELETE',\n      })\n      .then(() => {\n        browserHistory.push(redirectPath);\n      })\n      .catch(() => {\n        addErrorMessage(t('Unable to remove monitor.'));\n      });\n  };\n\n  const updateMonitor = (data: Partial<Monitor>) => {\n    addLoadingMessage();\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'PUT',\n        data,\n      })\n      .then(resp => {\n        clearIndicators();\n        onUpdate?.(resp);\n      })\n      .catch(err => {\n        logException(err);\n        addErrorMessage(t('Unable to update monitor.'));\n      });\n  };\n\n  const toggleStatus = () =>\n    updateMonitor({\n      status: monitor.status === 'disabled' ? 'active' : 'disabled',\n    });\n\n  return (\n    <ButtonContainer>\n      <ButtonBar gap={1}>\n        <Button\n          size=\"small\"\n          icon={<IconEdit size=\"xs\" />}\n          to={`/organizations/${orgId}/monitors/${monitor.id}/edit/`}\n        >\n          &nbsp;\n          {t('Edit')}\n        </Button>\n        <Button size=\"small\" onClick={toggleStatus}>\n          {monitor.status !== 'disabled' ? t('Pause') : t('Enable')}\n        </Button>\n        <Confirm\n          onConfirm={handleDelete}\n          message={t(\n            'Deleting this monitor is permanent. Are you sure you wish to continue?'\n          )}\n        >\n          <Button size=\"small\" icon={<IconDelete size=\"xs\" />}>\n            {t('Delete')}\n          </Button>\n        </Confirm>\n      </ButtonBar>\n    </ButtonContainer>\n  );\n};\n\nconst ButtonContainer = styled('div')`\n  margin-bottom: ${space(3)};\n  display: flex;\n  flex-shrink: 1;\n`;\n\nexport default withApi(MonitorHeaderActions);\n","import * as Sentry from '@sentry/react';\n\nexport function logException(ex: Error, context?: any): void {\n  Sentry.withScope(scope => {\n    if (context) {\n      scope.setExtra('context', context);\n    }\n\n    Sentry.captureException(ex);\n  });\n  /* eslint no-console:0 */\n  window.console && console.error && console.error(ex);\n}\n","import * as React from 'react';\n\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\n\nimport MonitorHeaderActions from './monitorHeaderActions';\nimport MonitorIcon from './monitorIcon';\n\ntype Props = React.ComponentProps<typeof MonitorHeaderActions>;\n\nconst MonitorHeader = ({monitor, orgId, onUpdate}: Props) => (\n  <div className=\"release-details\">\n    <div className=\"row\">\n      <div className=\"col-sm-6 col-xs-10\">\n        <h3>{monitor.name}</h3>\n        <div className=\"release-meta\">{monitor.id}</div>\n      </div>\n      <div className=\"col-sm-2 hidden-xs\">\n        <h6 className=\"nav-header\">{t('Last Check-in')}</h6>\n        {monitor.lastCheckIn && <TimeSince date={monitor.lastCheckIn} />}\n      </div>\n      <div className=\"col-sm-2 hidden-xs\">\n        <h6 className=\"nav-header\">{t('Next Check-in')}</h6>\n        {monitor.nextCheckIn && <TimeSince date={monitor.nextCheckIn} />}\n      </div>\n      <div className=\"col-sm-2\">\n        <h6 className=\"nav-header\">{t('Status')}</h6>\n        <MonitorIcon status={monitor.status} size={16} />\n      </div>\n    </div>\n    <MonitorHeaderActions orgId={orgId} monitor={monitor} onUpdate={onUpdate} />\n  </div>\n);\n\nexport default MonitorHeader;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {IconSearch} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Group} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = WithRouterProps & {\n  api: Client;\n  endpoint: string;\n  emptyText?: string;\n  query?: Record<string, any>;\n  pagination?: boolean;\n  renderEmpty?: () => React.ReactElement;\n  noBorder?: boolean;\n  noMargin?: boolean;\n};\n\ntype State = {\n  issueIds: Array<string>;\n  loading: boolean;\n  error: boolean;\n  pageLinks: string | null;\n  data: Array<Group>;\n};\n\nclass IssueList extends React.Component<Props, State> {\n  state: State = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      issueIds: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      data: [],\n    };\n  }\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const {location} = this.props;\n    const nextLocation = nextProps.location;\n\n    if (!location) {\n      return;\n    }\n\n    if (\n      location.pathname !== nextLocation.pathname ||\n      location.search !== nextLocation.search\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  remountComponent() {\n    this.setState(this.getInitialState(), this.fetchData);\n  }\n\n  fetchData = () => {\n    const {location, api, endpoint, query} = this.props;\n    api.clear();\n    api.request(endpoint, {\n      method: 'GET',\n      query: {\n        cursor: (location && location.query && location.query.cursor) || '',\n        ...query,\n      },\n      success: (data, _, resp) => {\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n          issueIds: data.map(item => item.id),\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({loading: false, error: true});\n      },\n    });\n  };\n\n  renderError() {\n    return (\n      <div style={{margin: `${space(2)} ${space(2)} 0`}}>\n        <LoadingError onRetry={this.fetchData} />\n      </div>\n    );\n  }\n\n  renderLoading() {\n    return (\n      <div style={{margin: '18px 18px 0'}}>\n        <LoadingIndicator />\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    const {emptyText} = this.props;\n    const {noBorder, noMargin} = this.props;\n    const panelStyle: React.CSSProperties = noBorder ? {border: 0, borderRadius: 0} : {};\n    if (noMargin) {\n      panelStyle.marginBottom = 0;\n    }\n\n    return (\n      <Panel style={panelStyle}>\n        <EmptyMessage icon={<IconSearch size=\"xl\" />}>\n          {emptyText ? emptyText : t('Nothing to show here, move along.')}\n        </EmptyMessage>\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {noBorder, noMargin, renderEmpty} = this.props;\n    const {loading, error, issueIds, data} = this.state;\n\n    if (loading) {\n      return this.renderLoading();\n    }\n\n    if (error) {\n      return this.renderError();\n    }\n\n    if (issueIds.length > 0) {\n      const panelStyle: React.CSSProperties = noBorder\n        ? {border: 0, borderRadius: 0}\n        : {};\n      if (noMargin) {\n        panelStyle.marginBottom = 0;\n      }\n\n      return (\n        <Panel style={panelStyle}>\n          <PanelBody className=\"issue-list\">\n            {data.map(issue => (\n              <CompactIssue key={issue.id} id={issue.id} data={issue} />\n            ))}\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    return renderEmpty?.() || this.renderEmpty();\n  }\n\n  render() {\n    const {pageLinks} = this.state;\n    const {pagination} = this.props;\n\n    return (\n      <React.Fragment>\n        {this.renderResults()}\n        {pagination && pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}\n      </React.Fragment>\n    );\n  }\n}\n\nexport {IssueList};\n\nexport default withRouter(withApi(IssueList));\n","import IssueList from 'app/components/issueList';\nimport {t} from 'app/locale';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  orgId: string;\n  monitor: Monitor;\n};\n\nconst MonitorIssues = ({orgId, monitor}: Props) => (\n  <IssueList\n    endpoint={`/organizations/${orgId}/issues/`}\n    query={{\n      query: 'monitor.id:\"' + monitor.id + '\"',\n      project: monitor.project.id,\n      limit: 5,\n    }}\n    pagination={false}\n    emptyText={t('No issues found')}\n    noBorder\n    noMargin\n  />\n);\n\nexport default MonitorIssues;\n","import AsyncComponent from 'app/components/asyncComponent';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport theme from 'app/utils/theme';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {Monitor, MonitorStat} from './types';\n\ntype Props = AsyncComponent['props'] & {\n  monitor: Monitor;\n};\n\ntype State = AsyncComponent['state'] & {\n  stats: MonitorStat[] | null;\n};\n\ntype Stat = {name: string; value: number};\n\nexport default class MonitorStats extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {monitor} = this.props;\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    return [\n      [\n        'stats',\n        `/monitors/${monitor.id}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    let emptyStats = true;\n    const success = {\n      seriesName: t('Successful'),\n      data: [] as Stat[],\n    };\n    const failed = {\n      seriesName: t('Failed'),\n      data: [] as Stat[],\n    };\n    this.state.stats?.forEach(p => {\n      if (p.ok || p.error) {\n        emptyStats = false;\n      }\n      const timestamp = p.ts * 1000;\n      success.data.push({name: timestamp.toString(), value: p.ok});\n      failed.data.push({name: timestamp.toString(), value: p.error});\n    });\n    const colors = [theme.green300, theme.red300];\n\n    return (\n      <Panel>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              stacked\n              colors={colors}\n              height={150}\n              series={[success, failed]}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('All check-ins for this monitor.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorCheckIns from './monitorCheckIns';\nimport MonitorHeader from './monitorHeader';\nimport MonitorIssues from './monitorIssues';\nimport MonitorStats from './monitorStats';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string; monitorId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nclass MonitorDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, location} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`, {query: location.query}]];\n  }\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <MonitorHeader\n          monitor={monitor}\n          orgId={this.props.params.orgId}\n          onUpdate={this.onUpdate}\n        />\n\n        <MonitorStats monitor={monitor} />\n\n        <Panel style={{paddingBottom: 0}}>\n          <PanelHeader>{t('Related Issues')}</PanelHeader>\n\n          <MonitorIssues monitor={monitor} orgId={this.props.params.orgId} />\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Recent Check-ins')}</PanelHeader>\n\n          <MonitorCheckIns monitor={monitor} />\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default MonitorDetails;\n","import styled from '@emotion/styled';\n\nimport {Status} from './types';\n\nexport default styled('div')<{size: number; status: Status}>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.theme.disabled\n        };`};\n`;\n"],"names":["p","size","color","status","theme","error","success","disabled","MonitorCheckIns","AsyncComponent","getEndpoints","monitor","this","props","id","query","per_page","renderError","ErrorWrapper","super","renderBody","state","checkInList","map","checkIn","CheckInIconWrapper","TimeSinceWrapper","date","dateCreated","duration","seconds","DivMargin","space","MonitorHeaderActions","api","orgId","onUpdate","ButtonContainer","gap","icon","to","t","onClick","updateMonitor","data","addLoadingMessage","requestPromise","method","then","resp","clearIndicators","catch","err","ex","Sentry","scope","window","console","addErrorMessage","onConfirm","redirectPath","browserHistory","message","withApi","MonitorHeader","className","name","lastCheckIn","nextCheckIn","IssueList","React","getInitialState","location","endpoint","clear","request","cursor","_","setState","loading","issueIds","item","pageLinks","getResponseHeader","componentWillMount","fetchData","componentWillReceiveProps","nextProps","nextLocation","pathname","search","remountComponent","style","margin","onRetry","renderLoading","renderEmpty","emptyText","noBorder","noMargin","panelStyle","border","borderRadius","marginBottom","renderResults","length","issue","render","pagination","withRouter","MonitorIssues","project","limit","MonitorStats","until","Math","floor","Date","getTime","since","resolution","emptyStats","seriesName","failed","stats","forEach","ok","timestamp","ts","push","toString","value","colors","withPadding","title","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","stacked","height","series","MonitorDetails","AsyncView","params","monitorId","getTitle","Fragment","paddingBottom"],"sourceRoot":""}