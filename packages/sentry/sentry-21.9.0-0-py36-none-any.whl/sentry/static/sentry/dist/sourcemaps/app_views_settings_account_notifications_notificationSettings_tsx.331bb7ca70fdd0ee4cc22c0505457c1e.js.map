{"version":3,"file":"chunks/app_views_settings_account_notifications_notificationSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/views/settings/account/notifications/notificationSettings.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport space from 'app/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: React.ReactNode;\n};\n\ntype DefaultProps = {\n  size: Size;\n  priority: Priority;\n  withoutMarginBottom: boolean;\n  openInNewTab: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & Partial<DefaultProps> & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nfunction AlertLink({\n  size = 'normal',\n  priority = 'warning',\n  icon,\n  children,\n  onClick,\n  withoutMarginBottom = false,\n  openInNewTab = false,\n  to,\n  href,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  return (\n    <StyledLink\n      data-test-id={dataTestId}\n      to={to}\n      href={href}\n      onClick={onClick}\n      size={size}\n      priority={priority}\n      withoutMarginBottom={withoutMarginBottom}\n      openInNewTab={openInNewTab}\n    >\n      {icon && <IconWrapper>{icon}</IconWrapper>}\n      <AlertLinkText>{children}</AlertLinkText>\n      <IconLink>\n        <IconChevron direction=\"right\" />\n      </IconLink>\n    </StyledLink>\n  );\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","import React from 'react';\n\nimport AlertLink from 'app/components/alertLink';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Link from 'app/components/links/link';\nimport {IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {\n  CONFIRMATION_MESSAGE,\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'app/views/settings/account/notifications/constants';\nimport FeedbackAlert from 'app/views/settings/account/notifications/feedbackAlert';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'];\n\ntype State = {\n  notificationSettings: NotificationSettingsObject;\n  legacyData: {[key: string]: string};\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings} = this.state;\n\n    return Object.fromEntries(\n      NOTIFICATION_SETTINGS_TYPES.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationSettings} = this.state;\n\n    const fields: FieldObject[] = [];\n    for (const notificationType of NOTIFICATION_SETTINGS_TYPES) {\n      const field = Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        getData: data => this.getStateToPutForDefault(data, notificationType),\n        help: (\n          <React.Fragment>\n            <p>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link\n                data-test-id=\"fine-tuning\"\n                to={`/settings/account/notifications/${notificationType}`}\n              >\n                Fine tune\n              </Link>\n            </p>\n          </React.Fragment>\n        ),\n      }) as any;\n\n      if (\n        isSufficientlyComplex(notificationType, notificationSettings) &&\n        typeof field !== 'function'\n      ) {\n        field.confirm = {never: CONFIRMATION_MESSAGE};\n      }\n\n      fields.push(field);\n    }\n    return fields;\n  }\n\n  renderBody() {\n    const {legacyData} = this.state;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title=\"Notifications\" />\n        <TextBlock>Personal notifications sent via email or an integration.</TextBlock>\n        <FeedbackAlert />\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <Form\n          initialData={legacyData}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notifications/\"\n        >\n          <JsonForm\n            title={t('My Activity')}\n            fields={SELF_NOTIFICATION_SETTINGS_TYPES.map(\n              type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n            )}\n          />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettings;\n"],"names":["AlertLink","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","IconWrapper","AlertLinkText","IconLink","direction","props","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","NotificationSettings","AsyncComponent","changedData","notificationType","notificationSettings","this","state","updatedNotificationSettings","getStateToPutForDefault","getParentIds","setState","mergeNotificationSettings","getDefaultState","super","legacyData","getEndpoints","getInitialData","Object","fromEntries","NOTIFICATION_SETTINGS_TYPES","decideDefault","getFields","fields","field","assign","NOTIFICATION_SETTING_FIELDS","getData","data","help","isSufficientlyComplex","confirm","never","CONFIRMATION_MESSAGE","push","renderBody","title","saveOnBlur","apiMethod","apiEndpoint","initialData","t","SELF_NOTIFICATION_SETTINGS_TYPES","type"],"sourceRoot":""}