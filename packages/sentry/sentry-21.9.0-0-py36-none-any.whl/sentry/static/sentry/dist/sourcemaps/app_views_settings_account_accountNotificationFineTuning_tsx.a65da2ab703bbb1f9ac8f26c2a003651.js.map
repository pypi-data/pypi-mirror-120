{"version":3,"file":"chunks/app_views_settings_account_accountNotificationFineTuning_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByOrganization.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByProjects.tsx","webpack:///./app/views/settings/account/notifications/unlinkedAlert.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByType.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/components/defaultSearchBar.tsx"],"sourcesContent":["import {t} from 'app/locale';\nimport {Field, JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: t(\n      'Enable this to receive notifications for Alerts sent to your teams. You will always receive alerts configured to be sent directly to you.'\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Alerts'),\n    fields: [fields.subscribeByDefault],\n  },\n\n  {\n    title: t('Workflow Notifications'),\n    fields: [fields.workflowNotifications],\n  },\n\n  {\n    title: t('Email Routing'),\n    fields: [],\n  },\n\n  {\n    title: t('Weekly Reports'),\n    fields: [],\n  },\n\n  {\n    title: t('Deploy Notifications'),\n    fields: [fields.deployNotifications],\n  },\n\n  {\n    title: t('My Activity'),\n    fields: [fields.personalActivityNotifications, fields.selfAssignOnResolve],\n  },\n];\n\nexport default formGroups;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {t} from 'app/locale';\n\nexport type FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n};\n\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t(\n      'Notifications from Alert Rules that your team has setup. You’ll always receive notifications from Alerts configured to be sent directly to you.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['0', t('Always')],\n      ['1', t('Only on issues I subscribe to')],\n      ['2', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['2', t('Always')],\n      ['3', t('Only on deploys with my commits')],\n      ['4', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    choices: [\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {OrganizationSummary} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  notificationType: string;\n  notificationSettings: NotificationSettingsObject;\n  organizations: OrganizationSummary[];\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n};\n\ntype State = {};\n\nclass NotificationSettingsByOrganization extends React.Component<Props, State> {\n  render() {\n    const {notificationType, notificationSettings, onChange, organizations} = this.props;\n\n    return (\n      <Form\n        saveOnBlur\n        apiMethod=\"PUT\"\n        apiEndpoint=\"/users/me/notification-settings/\"\n        initialData={getParentData(notificationType, notificationSettings, organizations)}\n      >\n        <JsonForm\n          title={t('Organizations')}\n          fields={organizations.map(organization =>\n            getParentField(notificationType, notificationSettings, organization, onChange)\n          )}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByOrganization);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport {Project} from 'app/types';\nimport {sortProjects} from 'app/utils';\nimport {\n  MIN_PROJECTS_FOR_PAGINATION,\n  MIN_PROJECTS_FOR_SEARCH,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n  groupByOrganization,\n} from 'app/views/settings/account/notifications/utils';\nimport {\n  RenderSearch,\n  SearchWrapper,\n} from 'app/views/settings/components/defaultSearchBar';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  notificationType: string;\n  notificationSettings: NotificationSettingsObject;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n} & AsyncComponent['props'];\n\ntype State = {\n  projects: Project[];\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByProjects extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      projects: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['projects', '/projects/']];\n  }\n\n  getProjectCount = (): number => {\n    /** Check the notification settings for how many projects there are. */\n    const {notificationType, notificationSettings} = this.props;\n\n    return Object.values(notificationSettings[notificationType]?.project || {}).length;\n  };\n\n  getGroupedProjects = (): {[key: string]: Project[]} => {\n    /**\n     * The UI expects projects to be grouped by organization but can also use\n     * this function to make a single group with all organizations.\n     */\n    const {projects: stateProjects} = this.state;\n\n    return Object.fromEntries(\n      Object.values(groupByOrganization(sortProjects(stateProjects))).map(\n        ({organization, projects}) => [`${organization.name} Projects`, projects]\n      )\n    );\n  };\n\n  renderBody() {\n    const {notificationType, notificationSettings, onChange} = this.props;\n    const {projects, projectsPageLinks} = this.state;\n\n    const canSearch = this.getProjectCount() >= MIN_PROJECTS_FOR_SEARCH;\n    const shouldPaginate = projects.length >= MIN_PROJECTS_FOR_PAGINATION;\n\n    // eslint-disable-next-line react/prop-types\n    const renderSearch: RenderSearch = ({defaultSearchBar}) => (\n      <StyledSearchWrapper>{defaultSearchBar}</StyledSearchWrapper>\n    );\n    return (\n      <React.Fragment>\n        {canSearch &&\n          this.renderSearchInput({\n            stateKey: 'projects',\n            url: '/projects/',\n            placeholder: t('Search Projects'),\n            children: renderSearch,\n          })}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={getParentData(notificationType, notificationSettings, projects)}\n        >\n          {projects.length === 0 ? (\n            <EmptyMessage>{t('No projects found')}</EmptyMessage>\n          ) : (\n            Object.entries(this.getGroupedProjects()).map(([groupTitle, parents]) => (\n              <JsonForm\n                collapsible\n                key={groupTitle}\n                title={groupTitle}\n                fields={parents.map(parent =>\n                  getParentField(notificationType, notificationSettings, parent, onChange)\n                )}\n              />\n            ))\n          )}\n        </Form>\n        {canSearch && shouldPaginate && (\n          <Pagination pageLinks={projectsPageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByProjects;\n\nconst StyledSearchWrapper = styled(SearchWrapper)`\n  * {\n    width: 100%;\n  }\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport {OrganizationSummary} from 'app/types';\n\ntype Props = {\n  organizations: OrganizationSummary[];\n};\n\nclass UnlinkedAlert extends React.Component<Props> {\n  render = () => {\n    const {organizations} = this.props;\n    return (\n      <StyledAlert type=\"warning\" icon={<IconWarning />}>\n        {t(\n          'You\\'ve selected Slack as your delivery method, but do not have a linked account for the following organizations. You\\'ll receive email notifications instead until you type \"/sentry link\" into your Slack workspace to link your account. If slash commands are not working, please re-install the Slack integration.'\n        )}\n        <ul>\n          {organizations.map(organization => (\n            <li key={organization.id}>{organization.slug}</li>\n          ))}\n        </ul>\n      </StyledAlert>\n    );\n  };\n}\nconst StyledAlert = styled(Alert)`\n  margin: 20px 0px;\n`;\n\nexport default UnlinkedAlert;\n","import React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {t} from 'app/locale';\nimport {Organization, OrganizationSummary} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport {\n  CONFIRMATION_MESSAGE,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport FeedbackAlert from 'app/views/settings/account/notifications/feedbackAlert';\nimport {ACCOUNT_NOTIFICATION_FIELDS} from 'app/views/settings/account/notifications/fields';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport NotificationSettingsByOrganization from 'app/views/settings/account/notifications/notificationSettingsByOrganization';\nimport NotificationSettingsByProjects from 'app/views/settings/account/notifications/notificationSettingsByProjects';\nimport {\n  Identity,\n  OrganizationIntegration,\n} from 'app/views/settings/account/notifications/types';\nimport UnlinkedAlert from 'app/views/settings/account/notifications/unlinkedAlert';\nimport {\n  getCurrentDefault,\n  getCurrentProviders,\n  getParentIds,\n  getStateToPutForDefault,\n  getStateToPutForParent,\n  getStateToPutForProvider,\n  isEverythingDisabled,\n  isGroupedByProject,\n  isSufficientlyComplex,\n  mergeNotificationSettings,\n  providerListToString,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  notificationType: string;\n  organizations: Organization[];\n} & AsyncComponent['props'];\n\ntype State = {\n  notificationSettings: NotificationSettingsObject;\n  identities: Identity[];\n  organizationIntegrations: OrganizationIntegration[];\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByType extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      identities: [],\n      organizationIntegrations: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {notificationType} = this.props;\n    return [\n      [\n        'notificationSettings',\n        `/users/me/notification-settings/`,\n        {query: {type: notificationType}},\n      ],\n      ['identities', `/users/me/identities/`, {query: {provider: 'slack'}}],\n      [\n        'organizationIntegrations',\n        `/users/me/organization-integrations/`,\n        {query: {provider: 'slack'}},\n      ],\n    ];\n  }\n\n  /* Methods responsible for updating state and hitting the API. */\n\n  getStateToPutForProvider = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForProvider(\n      notificationType,\n      notificationSettings,\n      changedData\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDefault = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForParent = (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForParent(\n      notificationType,\n      notificationSettings,\n      changedData,\n      parentId\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n    return updatedNotificationSettings;\n  };\n\n  /* Methods responsible for rendering the page. */\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const initialData = {\n      [notificationType]: getCurrentDefault(notificationType, notificationSettings),\n    };\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      initialData.provider = providerListToString(\n        getCurrentProviders(notificationType, notificationSettings)\n      );\n    }\n    return initialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const defaultField = Object.assign(\n      {},\n      NOTIFICATION_SETTING_FIELDS[notificationType],\n      {\n        help: t('This is the default for all projects.'),\n        getData: data => this.getStateToPutForDefault(data),\n      }\n    );\n    if (isSufficientlyComplex(notificationType, notificationSettings)) {\n      defaultField.confirm = {never: CONFIRMATION_MESSAGE};\n    }\n\n    const fields = [defaultField];\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      fields.push(\n        Object.assign(\n          {\n            help: t('Where personal notifications will be sent.'),\n            getData: data => this.getStateToPutForProvider(data),\n          },\n          NOTIFICATION_SETTING_FIELDS.provider\n        )\n      );\n    }\n    return fields as FieldObject[];\n  }\n\n  getUnlinkedOrgs = (): OrganizationSummary[] => {\n    const {organizations} = this.props;\n    const {identities, organizationIntegrations} = this.state;\n    const integrationExternalIDsByOrganizationID = Object.fromEntries(\n      organizationIntegrations.map(organizationIntegration => [\n        organizationIntegration.organizationId,\n        organizationIntegration.externalId,\n      ])\n    );\n\n    const identitiesByExternalId = Object.fromEntries(\n      identities.map(identity => [identity?.identityProvider?.externalId, identity])\n    );\n\n    return organizations.filter(organization => {\n      const externalID = integrationExternalIDsByOrganizationID[organization.id];\n      const identity = identitiesByExternalId[externalID];\n      return identity === undefined || identity === null;\n    });\n  };\n\n  renderBody() {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n    const hasSlack = getCurrentProviders(notificationType, notificationSettings).includes(\n      'slack'\n    );\n    const unlinkedOrgs = this.getUnlinkedOrgs();\n    const {title, description} = ACCOUNT_NOTIFICATION_FIELDS[notificationType];\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n        {hasSlack && unlinkedOrgs.length > 0 && (\n          <UnlinkedAlert organizations={unlinkedOrgs} />\n        )}\n        <FeedbackAlert />\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n        >\n          <JsonForm\n            title={\n              isGroupedByProject(notificationType)\n                ? t('All Projects')\n                : t('All Organizations')\n            }\n            fields={this.getFields()}\n          />\n        </Form>\n        {!isEverythingDisabled(notificationType, notificationSettings) &&\n          (isGroupedByProject(notificationType) ? (\n            <NotificationSettingsByProjects\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n            />\n          ) : (\n            <NotificationSettingsByOrganization\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n            />\n          ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByType);\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'app/views/settings/account/notifications/fields';\nimport NotificationSettingsByType from 'app/views/settings/account/notifications/notificationSettingsByType';\nimport {\n  groupByOrganization,\n  isGroupedByProject,\n} from 'app/views/settings/account/notifications/utils';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{fineTuneType: string}, {}> & {\n    organizations: Organization[];\n  };\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nclass AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {params} = this.props;\n    const {fineTuneType} = params;\n\n    if (['alerts', 'deploy', 'workflow'].includes(fineTuneType)) {\n      return <NotificationSettingsByType notificationType={fineTuneType} />;\n    }\n\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n\nexport default AccountNotificationFineTuning;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport AsyncView from 'app/views/asyncView';\n\nexport type RenderSearch = React.ComponentProps<\n  typeof AsyncView.prototype.renderSearchInput\n>['children'];\n\nexport const SearchWrapper = styled('div')`\n  display: flex;\n  grid-template-columns: 1fr max-content;\n  grid-gap: ${space(1.5)};\n  margin-top: ${space(4)};\n  margin-bottom: ${space(1.5)};\n  position: relative;\n`;\n"],"names":["route","fields","subscribeByDefault","name","type","label","t","help","workflowNotifications","choices","weeklyReports","disabled","deployNotifications","personalActivityNotifications","selfAssignOnResolve","title","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","defaultValue","defaultFieldName","workflow","deploy","reports","email","NotificationSettingsByOrganization","React","notificationType","notificationSettings","onChange","organizations","props","saveOnBlur","apiMethod","apiEndpoint","initialData","getParentData","map","organization","getParentField","withOrganizations","NotificationSettingsByProjects","Object","values","project","length","projects","stateProjects","state","fromEntries","groupByOrganization","sortProjects","getDefaultState","super","getEndpoints","renderBody","projectsPageLinks","canSearch","getProjectCount","MIN_PROJECTS_FOR_SEARCH","shouldPaginate","MIN_PROJECTS_FOR_PAGINATION","renderSearchInput","stateKey","url","placeholder","children","defaultSearchBar","StyledSearchWrapper","entries","getGroupedProjects","groupTitle","parents","collapsible","parent","pageLinks","SearchWrapper","UnlinkedAlert","StyledAlert","icon","slug","id","Alert","NotificationSettingsByType","changedData","updatedNotificationSettings","getStateToPutForProvider","setState","mergeNotificationSettings","getStateToPutForDefault","getParentIds","parentId","getStateToPutForParent","identities","organizationIntegrations","integrationExternalIDsByOrganizationID","organizationIntegration","organizationId","externalId","identitiesByExternalId","identity","identityProvider","filter","externalID","query","provider","getInitialData","getCurrentDefault","isEverythingDisabled","providerListToString","getCurrentProviders","getFields","defaultField","assign","NOTIFICATION_SETTING_FIELDS","getData","data","isSufficientlyComplex","confirm","never","CONFIRMATION_MESSAGE","push","hasSlack","includes","unlinkedOrgs","getUnlinkedOrgs","isGroupedByProject","PanelBodyLineItem","PanelBody","p","theme","innerBorder","AccountNotificationsByProject","field","projectsByOrg","fieldConfig","org","Fragment","projectFields","f","AccountNotificationsByOrganization","AccountNotificationsByOrganizationContainer","AccountNotificationFineTuning","fineTuneType","params","endpoints","emails","isVerified","sort","a","b","isPrimary","notifications","fineTuneData","isProject","hasProjects","emailChoices","hasButtons","Heading","space"],"sourceRoot":""}