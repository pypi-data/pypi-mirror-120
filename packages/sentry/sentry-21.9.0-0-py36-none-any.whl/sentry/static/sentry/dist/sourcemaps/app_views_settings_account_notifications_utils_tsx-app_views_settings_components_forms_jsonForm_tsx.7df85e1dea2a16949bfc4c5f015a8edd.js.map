{"version":3,"file":"chunks/app_views_settings_account_notifications_utils_tsx-app_views_settings_components_forms_jsonForm_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/notifications/constants.tsx","webpack:///./app/views/settings/account/notifications/fields2.tsx","webpack:///./app/views/settings/account/notifications/parentLabel.tsx","webpack:///./app/views/settings/account/notifications/utils.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"sourcesContent":["import {t} from 'app/locale';\n\nexport const ALL_PROVIDERS = {\n  email: 'default',\n  slack: 'never',\n};\n\n/** These values are stolen from the DB. */\nexport const VALUE_MAPPING = {\n  default: 0,\n  never: 10,\n  always: 20,\n  subscribe_only: 30,\n  committed_only: 40,\n};\n\nexport const MIN_PROJECTS_FOR_CONFIRMATION = 3;\nexport const MIN_PROJECTS_FOR_SEARCH = 3;\nexport const MIN_PROJECTS_FOR_PAGINATION = 100;\n\nexport type NotificationSettingsByProviderObject = {[key: string]: string};\nexport type NotificationSettingsObject = {\n  [key: string]: {[key: string]: {[key: string]: NotificationSettingsByProviderObject}};\n};\n\nexport const NOTIFICATION_SETTINGS_TYPES = [\n  'alerts',\n  'workflow',\n  'deploy',\n  'reports',\n  'email',\n];\n\nexport const SELF_NOTIFICATION_SETTINGS_TYPES = [\n  'personalActivityNotifications',\n  'selfAssignOnResolve',\n];\n\nexport const CONFIRMATION_MESSAGE = (\n  <div>\n    <p style={{marginBottom: '20px'}}>\n      <strong>Are you sure you want to disable these notifications?</strong>\n    </p>\n    <p>\n      {t(\n        'Turning this off will irreversibly overwrite all of your fine-tuning settings to \"off\".'\n      )}\n    </p>\n  </div>\n);\n","import * as React from 'react';\n\nimport {t} from 'app/locale';\n\nexport type NotificationSettingField = {\n  name: string;\n  type: 'select' | 'blank' | 'boolean';\n  label: string;\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n  help?: string;\n  confirm?: {[key: string]: React.ReactNode | string};\n};\n\nexport const NOTIFICATION_SETTING_FIELDS: Record<string, NotificationSettingField> = {\n  alerts: {\n    name: 'alerts',\n    type: 'select',\n    label: t('Issue Alerts'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications sent from Alert rules that your team has set up.'),\n  },\n  workflow: {\n    name: 'workflow',\n    type: 'select',\n    label: t('Issue Workflow'),\n    choices: [\n      ['always', t('On')],\n      ['subscribe_only', t('Only Subscribed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Changes in issue assignment, resolution status, and comments.'),\n  },\n  deploy: {\n    name: 'deploy',\n    type: 'select',\n    label: t('Deploys'),\n    choices: [\n      ['always', t('On')],\n      ['committed_only', t('Only Committed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Release, environment, and commit overviews.'),\n  },\n  provider: {\n    name: 'provider',\n    type: 'select',\n    label: t('Delivery Method'),\n    choices: [\n      ['email', t('Send to Email')],\n      ['slack', t('Send to Slack')],\n      ['email+slack', t('Send to Email and Slack')],\n    ],\n  },\n  reports: {\n    name: 'weekly reports',\n    type: 'blank',\n    label: t('Weekly Reports'),\n    help: t('A summary of the past week for an organization.'),\n  },\n  email: {\n    name: 'email routing',\n    type: 'blank',\n    label: t('Email Routing'),\n    help: t('Change the email address that receives notifications.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('My Own Activity'),\n    help: t('Notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t('Claim Unassigned Issues I’ve Resolved'),\n    help: t('You’ll receive notifications about any changes that happen afterwards.'),\n  },\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Avatar from 'app/components/avatar';\nimport space from 'app/styles/space';\nimport {OrganizationSummary, Project} from 'app/types';\nimport {getParentKey} from 'app/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationType: string;\n  parent: OrganizationSummary | Project;\n};\n\n/** TODO(mgaeta): Infer parentKey from parent. */\nclass ParentLabel extends React.Component<Props> {\n  render = () => {\n    const {notificationType, parent} = this.props;\n\n    return (\n      <FieldLabel>\n        <Avatar\n          {...{\n            [getParentKey(notificationType)]: parent,\n          }}\n        />\n        <span>{parent.slug}</span>\n      </FieldLabel>\n    );\n  };\n}\n\nconst FieldLabel = styled('div')`\n  display: flex;\n  gap: ${space(0.5)};\n  line-height: 16px;\n`;\n\nexport default ParentLabel;\n","import set from 'lodash/set';\n\nimport {t} from 'app/locale';\nimport {OrganizationSummary, Project} from 'app/types';\nimport {\n  ALL_PROVIDERS,\n  MIN_PROJECTS_FOR_CONFIRMATION,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n  VALUE_MAPPING,\n} from 'app/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport ParentLabel from 'app/views/settings/account/notifications/parentLabel';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\n\n// Which fine-tuning parts are grouped by project\nexport const isGroupedByProject = (notificationType: string): boolean =>\n  ['alerts', 'email', 'workflow'].includes(notificationType);\n\nexport const getParentKey = (notificationType: string): string => {\n  return isGroupedByProject(notificationType) ? 'project' : 'organization';\n};\n\nexport const groupByOrganization = (\n  projects: Project[]\n): Record<string, {organization: OrganizationSummary; projects: Project[]}> => {\n  return projects.reduce<\n    Record<string, {organization: OrganizationSummary; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getFallBackValue = (notificationType: string): string => {\n  switch (notificationType) {\n    case 'alerts':\n      return 'always';\n    case 'deploy':\n      return 'committed_only';\n    case 'workflow':\n      return 'subscribe_only';\n    default:\n      return '';\n  }\n};\n\nexport const providerListToString = (providers: string[]): string => {\n  return providers.sort().join('+');\n};\n\nexport const getChoiceString = (choices: string[][], key: string): string => {\n  if (!choices) {\n    return 'default';\n  }\n  const found = choices.find(row => row[0] === key);\n  if (!found) {\n    throw new Error(`Could not find ${key}`);\n  }\n\n  return found[1];\n};\n\nexport const backfillMissingProvidersWithFallback = (\n  data: {[key: string]: string},\n  providerList: string[],\n  fallbackValue: string,\n  scopeType: string\n): NotificationSettingsByProviderObject => {\n  /**\n   * Transform `data`, a mapping of providers to values, so that all providers\n   * in `providerList` are \"on\" in the resulting object. The \"on\" value is\n   * determined by checking `data` for non-\"never\" values and falling back to\n   * the value `fallbackValue`. The \"off\" value is either \"default\" or \"never\"\n   * depending on whether `scopeType` is \"parent\" or \"user\" respectively.\n   */\n\n  // First pass: determine the fallback value.\n  const fallback = Object.values(data).reduce(\n    (previousValue, currentValue) =>\n      currentValue === 'never' ? previousValue : currentValue,\n    fallbackValue\n  );\n  // Second pass: fill in values for every provider.\n  return Object.fromEntries(\n    Object.keys(ALL_PROVIDERS).map(provider => [\n      provider,\n      providerList.includes(provider)\n        ? fallback\n        : scopeType === 'user'\n        ? 'never'\n        : 'default',\n    ])\n  );\n};\n\nexport const mergeNotificationSettings = (\n  ...objects: NotificationSettingsObject[]\n): NotificationSettingsObject => {\n  /** Deeply merge N notification settings objects (usually just 2). */\n  const output = {};\n  objects.map(settingsByType =>\n    Object.entries(settingsByType).map(([type, settingsByScopeType]) =>\n      Object.entries(settingsByScopeType).map(([scopeType, settingsByScopeId]) =>\n        Object.entries(settingsByScopeId).map(([scopeId, settingsByProvider]) => {\n          set(output, [type, scopeType, scopeId].join('.'), settingsByProvider);\n        })\n      )\n    )\n  );\n\n  return output;\n};\n\nexport const getUserDefaultValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): NotificationSettingsByProviderObject => {\n  /**\n   * Get the mapping of providers to values that describe a user's parent-\n   * independent notification preferences. The data from the API uses the user\n   * ID rather than \"me\" so we assume the first ID is the user's.\n   */\n  return (\n    Object.values(notificationSettings[notificationType]?.user || {}).pop() ||\n    Object.fromEntries(\n      Object.entries(ALL_PROVIDERS).map(([provider, value]) => [\n        provider,\n        value === 'default' ? getFallBackValue(notificationType) : value,\n      ])\n    )\n  );\n};\n\nexport const getCurrentProviders = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] => {\n  /** Get the list of providers currently active on this page. Note: this can be empty. */\n  const userData = getUserDefaultValues(notificationType, notificationSettings);\n\n  return Object.entries(userData)\n    .filter(([_, value]) => !['never'].includes(value))\n    .map(([provider, _]) => provider);\n};\n\nexport const getCurrentDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  /** Calculate the currently selected provider. */\n\n  const providersList = getCurrentProviders(notificationType, notificationSettings);\n  return providersList.length\n    ? getUserDefaultValues(notificationType, notificationSettings)[providersList[0]]\n    : 'never';\n};\n\nexport const decideDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  /**\n   * For a given notificationType, are the parent-independent setting \"never\"\n   * for all providers and are the parent-specific settings \"default\" or\n   * \"never\". If so, the API is telling us that the user has opted out of\n   * all notifications.\n   */\n  const compare = (a: string, b: string): number => VALUE_MAPPING[a] - VALUE_MAPPING[b];\n\n  const parentIndependentSetting =\n    Object.values(getUserDefaultValues(notificationType, notificationSettings))\n      .sort(compare)\n      .pop() || 'never';\n\n  if (parentIndependentSetting !== 'never') {\n    return parentIndependentSetting;\n  }\n\n  const parentSpecificSetting =\n    Object.values(\n      notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n    )\n      .flatMap(settingsByProvider => Object.values(settingsByProvider))\n      .sort(compare)\n      .pop() || 'default';\n\n  return parentSpecificSetting === 'default' ? 'never' : parentSpecificSetting;\n};\n\nexport const isEverythingDisabled = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean => {\n  /**\n   * For a given notificationType, are the parent-independent setting \"never\"\n   * for all providers and are the parent-specific settings \"default\" or\n   * \"never\"? If so, the API is telling us that the user has opted out of\n   * all notifications.\n   */\n  return ['never', 'default'].includes(\n    decideDefault(notificationType, notificationSettings)\n  );\n};\n\nexport const getParentIds = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] => {\n  /**\n   * Extract either the list of project or organization IDs from the\n   * notification settings in state. This assumes that the notification settings\n   * object is fully backfilled with settings for every parent.\n   */\n  return Object.keys(\n    notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n  );\n};\n\nexport const getParentValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parentId: string\n): NotificationSettingsByProviderObject => {\n  return (\n    notificationSettings[notificationType]?.[getParentKey(notificationType)]?.[\n      parentId\n    ] || {\n      email: 'default',\n    }\n  );\n};\n\nexport const getParentData = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parents: OrganizationSummary[] | Project[]\n): NotificationSettingsByProviderObject => {\n  /** Get a mapping of all parent IDs to the notification setting for the current providers. */\n  const provider = getCurrentProviders(notificationType, notificationSettings)[0];\n\n  return Object.fromEntries(\n    parents.map(parent => [\n      parent.id,\n      getParentValues(notificationType, notificationSettings, parent.id)[provider],\n    ])\n  );\n};\n\nexport const isSufficientlyComplex = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean => {\n  /** Are there are more than N project or organization settings? */\n  return (\n    getParentIds(notificationType, notificationSettings).length >\n    MIN_PROJECTS_FOR_CONFIRMATION\n  );\n};\n\nexport const getStateToPutForProvider = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject\n): NotificationSettingsObject => {\n  /**\n   * I don't need to update the provider for EVERY once of the user's projects\n   * and organizations, just the user and parents that have explicit settings.\n   */\n  const providerList: string[] = changedData.provider.split('+');\n  const fallbackValue = getFallBackValue(notificationType);\n\n  let updatedNotificationSettings;\n  if (Object.keys(notificationSettings).length) {\n    updatedNotificationSettings = {\n      [notificationType]: Object.fromEntries(\n        Object.entries(notificationSettings[notificationType]).map(\n          ([scopeType, scopeTypeData]) => [\n            scopeType,\n            Object.fromEntries(\n              Object.entries(scopeTypeData).map(([scopeId, scopeIdData]) => [\n                scopeId,\n                backfillMissingProvidersWithFallback(\n                  scopeIdData,\n                  providerList,\n                  fallbackValue,\n                  scopeType\n                ),\n              ])\n            ),\n          ]\n        )\n      ),\n    };\n  } else {\n    // If the user has no settings, we need to create them.\n    updatedNotificationSettings = {\n      [notificationType]: {\n        user: {\n          me: Object.fromEntries(providerList.map(provider => [provider, fallbackValue])),\n        },\n      },\n    };\n  }\n\n  return updatedNotificationSettings;\n};\n\nexport const getStateToPutForDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentIds: string[]\n): NotificationSettingsObject => {\n  /**\n   * Update the current providers' parent-independent notification settings\n   * with the new value. If the new value is \"never\", then also update all\n   * parent-specific notification settings to \"default\". If the previous value\n   * was \"never\", then assume providerList should be \"email\" only.\n   */\n\n  const newValue = Object.values(changedData)[0];\n  let providerList = getCurrentProviders(notificationType, notificationSettings);\n  if (!providerList.length) {\n    providerList = ['email'];\n  }\n\n  const updatedNotificationSettings = {\n    [notificationType]: {\n      user: {\n        me: Object.fromEntries(providerList.map(provider => [provider, newValue])),\n      },\n    },\n  };\n\n  if (newValue === 'never') {\n    updatedNotificationSettings[notificationType][getParentKey(notificationType)] =\n      Object.fromEntries(\n        parentIds.map(parentId => [\n          parentId,\n          Object.fromEntries(providerList.map(provider => [provider, 'default'])),\n        ])\n      );\n  }\n\n  return updatedNotificationSettings;\n};\n\nexport const getStateToPutForParent = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentId: string\n): NotificationSettingsObject => {\n  /** Get the diff of the Notification Settings for this parent ID. */\n\n  const providerList = getCurrentProviders(notificationType, notificationSettings);\n  const newValue = Object.values(changedData)[0];\n\n  return {\n    [notificationType]: {\n      [getParentKey(notificationType)]: {\n        [parentId]: Object.fromEntries(\n          providerList.map(provider => [provider, newValue])\n        ),\n      },\n    },\n  };\n};\n\nexport const getParentField = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parent: OrganizationSummary | Project,\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject\n): FieldObject => {\n  /** Render each parent and add a default option to the the field choices. */\n\n  const defaultFields = NOTIFICATION_SETTING_FIELDS[notificationType];\n\n  return Object.assign({}, defaultFields, {\n    label: <ParentLabel parent={parent} notificationType={notificationType} />,\n    getData: data => onChange(data, parent.id),\n    name: parent.id,\n    choices: defaultFields.choices?.concat([\n      [\n        'default',\n        `${t('Default')} (${getChoiceString(\n          defaultFields.choices,\n          getCurrentDefault(notificationType, notificationSettings)\n        )})`,\n      ],\n    ]),\n    defaultValue: 'default',\n    help: undefined,\n  }) as any;\n};\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"names":["ALL_PROVIDERS","email","slack","VALUE_MAPPING","default","never","always","subscribe_only","committed_only","MIN_PROJECTS_FOR_CONFIRMATION","MIN_PROJECTS_FOR_SEARCH","MIN_PROJECTS_FOR_PAGINATION","NOTIFICATION_SETTINGS_TYPES","SELF_NOTIFICATION_SETTINGS_TYPES","CONFIRMATION_MESSAGE","style","marginBottom","t","NOTIFICATION_SETTING_FIELDS","alerts","name","type","label","choices","help","workflow","deploy","provider","reports","personalActivityNotifications","selfAssignOnResolve","ParentLabel","React","notificationType","parent","this","props","FieldLabel","getParentKey","slug","space","isGroupedByProject","includes","groupByOrganization","projects","reduce","acc","project","orgSlug","organization","hasOwnProperty","push","getFallBackValue","providerListToString","providers","sort","join","getChoiceString","key","found","find","row","Error","backfillMissingProvidersWithFallback","data","providerList","fallbackValue","scopeType","fallback","Object","values","previousValue","currentValue","fromEntries","keys","map","mergeNotificationSettings","objects","output","settingsByType","entries","settingsByScopeType","settingsByScopeId","scopeId","settingsByProvider","set","getUserDefaultValues","notificationSettings","user","pop","value","getCurrentProviders","userData","filter","_","getCurrentDefault","providersList","length","decideDefault","compare","a","b","parentIndependentSetting","parentSpecificSetting","flatMap","isEverythingDisabled","getParentIds","getParentValues","parentId","getParentData","parents","id","isSufficientlyComplex","getStateToPutForProvider","changedData","split","updatedNotificationSettings","scopeTypeData","scopeIdData","me","getStateToPutForDefault","parentIds","newValue","getStateToPutForParent","getParentField","onChange","defaultFields","assign","getData","concat","defaultValue","undefined","FormPanel","collapsed","state","setState","render","title","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","collapsible","otherProps","sanitizeQuerySelector","Collapse","onClick","handleToggleEvents","direction","size","field","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","defined","visible","every","renderForm","formPanelProps","forms","features","_location","formGroup","i","withRouter"],"sourceRoot":""}