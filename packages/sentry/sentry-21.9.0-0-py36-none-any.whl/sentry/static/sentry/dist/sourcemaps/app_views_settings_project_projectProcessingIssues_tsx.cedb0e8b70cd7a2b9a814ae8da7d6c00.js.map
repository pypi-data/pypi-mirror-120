{"version":3,"file":"chunks/app_views_settings_project_projectProcessingIssues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertLink.tsx","webpack:///./app/data/forms/processingIssues.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/project/projectProcessingIssues.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport space from 'app/styles/space';\n\ntype Size = 'small' | 'normal';\ntype Priority = 'info' | 'warning' | 'success' | 'error' | 'muted';\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\n\ntype OtherProps = {\n  ['data-test-id']?: string;\n  icon?: string | React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: React.ReactNode;\n};\n\ntype DefaultProps = {\n  size: Size;\n  priority: Priority;\n  withoutMarginBottom: boolean;\n  openInNewTab: boolean;\n  href?: string;\n};\n\ntype Props = OtherProps & Partial<DefaultProps> & Partial<Pick<LinkProps, 'to'>>;\n\ntype StyledLinkProps = DefaultProps &\n  Partial<Pick<LinkProps, 'to'>> &\n  Omit<LinkProps, 'to' | 'size'>;\n\nfunction AlertLink({\n  size = 'normal',\n  priority = 'warning',\n  icon,\n  children,\n  onClick,\n  withoutMarginBottom = false,\n  openInNewTab = false,\n  to,\n  href,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  return (\n    <StyledLink\n      data-test-id={dataTestId}\n      to={to}\n      href={href}\n      onClick={onClick}\n      size={size}\n      priority={priority}\n      withoutMarginBottom={withoutMarginBottom}\n      openInNewTab={openInNewTab}\n    >\n      {icon && <IconWrapper>{icon}</IconWrapper>}\n      <AlertLinkText>{children}</AlertLinkText>\n      <IconLink>\n        <IconChevron direction=\"right\" />\n      </IconLink>\n    </StyledLink>\n  );\n}\n\nexport default AlertLink;\n\nconst StyledLink = styled(({openInNewTab, to, href, ...props}: StyledLinkProps) => {\n  const linkProps = omit(props, ['withoutMarginBottom', 'priority', 'size']);\n  if (href) {\n    return <ExternalLink {...linkProps} href={href} openInNewTab={openInNewTab} />;\n  }\n\n  return <Link {...linkProps} to={to || ''} />;\n})`\n  display: flex;\n  background-color: ${p => p.theme.alert[p.priority].backgroundLight};\n  color: ${p => p.theme.textColor};\n  border: 1px dashed ${p => p.theme.alert[p.priority].border};\n  padding: ${p => (p.size === 'small' ? `${space(1)} ${space(1.5)}` : space(2))};\n  margin-bottom: ${p => (p.withoutMarginBottom ? 0 : space(3))};\n  border-radius: 0.25em;\n  transition: 0.2s border-color;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.alert[p.priority].border}7f 0 0 0 2px;\n  }\n`;\n\nconst IconWrapper = styled('span')`\n  display: flex;\n  margin: ${space(0.5)} ${space(1.5)} ${space(0.5)} 0;\n`;\n\nconst IconLink = styled(IconWrapper)`\n  margin: ${space(0.5)} 0;\n`;\n\nconst AlertLinkText = styled('div')`\n  line-height: 1.5;\n  flex-grow: 1;\n`;\n","// Export route to make these forms searchable by label/help\nimport {t} from 'app/locale';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nexport const route = '/settings/:orgId/projects/:projectId/processing-issues/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'sentry:reprocessing_active',\n        type: 'boolean',\n        label: t('Reprocessing active'),\n        disabled: ({access}) => !access.has('project:write'),\n        disabledReason: t('Only admins may change reprocessing settings'),\n        help: t(`If reprocessing is enabled, Events with fixable issues will be\n                held back until you resolve them. Processing issues will then\n                show up in the list above with hints how to fix them.\n                If reprocessing is disabled, Events with unresolved issues will\n                also show up in the stream.\n                `),\n        saveOnBlur: false,\n        saveMessage: ({value}) =>\n          value\n            ? t('Reprocessing applies to future events only.')\n            : t(`All events with errors will be flushed into your issues stream.\n                Beware that this process may take some time and cannot be undone.`),\n        getData: form => ({options: form}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport AlertLink from 'app/components/alertLink';\nimport AutoSelectText from 'app/components/autoSelectText';\nimport Button from 'app/components/button';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelTable,\n} from 'app/components/panels';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport TimeSince from 'app/components/timeSince';\nimport formGroups from 'app/data/forms/processingIssues';\nimport {IconQuestion, IconSettings} from 'app/icons';\nimport {t, tn} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport {Organization, ProcessingIssue, ProcessingIssueItem} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nexport const projectProcessingIssuesMessages = {\n  native_no_crashed_thread: t('No crashed thread found in crash report'),\n  native_internal_failure: t('Internal failure when attempting to symbolicate: {error}'),\n  native_bad_dsym: t('The debug information file used was broken.'),\n  native_missing_optionally_bundled_dsym: t(\n    'An optional debug information file was missing.'\n  ),\n  native_missing_dsym: t('A required debug information file was missing.'),\n  native_missing_system_dsym: t('A system debug information file was missing.'),\n  native_missing_symbol: t(\n    'Could not resolve one or more frames in debug information file.'\n  ),\n  native_simulator_frame: t('Encountered an unprocessable simulator frame.'),\n  native_unknown_image: t('A binary image is referenced that is unknown.'),\n  proguard_missing_mapping: t('A proguard mapping file was missing.'),\n  proguard_missing_lineno: t('A proguard mapping file does not contain line info.'),\n};\n\nconst HELP_LINKS = {\n  native_missing_dsym: 'https://docs.sentry.io/platforms/apple/dsym/',\n  native_bad_dsym: 'https://docs.sentry.io/platforms/apple/dsym/',\n  native_missing_system_dsym: 'https://develop.sentry.dev/self-hosted/',\n  native_missing_symbol: 'https://develop.sentry.dev/self-hosted/',\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  formData: object;\n  loading: boolean;\n  reprocessing: boolean;\n  expected: number;\n  error: boolean;\n  processingIssues: null | ProcessingIssue;\n  pageLinks: null | string;\n};\n\nclass ProjectProcessingIssues extends React.Component<Props, State> {\n  state: State = {\n    formData: {},\n    loading: true,\n    reprocessing: false,\n    expected: 0,\n    error: false,\n    processingIssues: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    const {orgId, projectId} = this.props.params;\n    this.setState({\n      expected: this.state.expected + 2,\n    });\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: data => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          loading: expected > 0,\n          formData: data.options,\n        });\n      },\n      error: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: true,\n          loading: expected > 0,\n        });\n      },\n    });\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/processingissues/?detailed=1`,\n      {\n        success: (data, _, resp) => {\n          const expected = this.state.expected - 1;\n          this.setState({\n            expected,\n            error: false,\n            loading: expected > 0,\n            processingIssues: data,\n            pageLinks: resp?.getResponseHeader('Link') ?? null,\n          });\n        },\n        error: () => {\n          const expected = this.state.expected - 1;\n          this.setState({\n            expected,\n            error: true,\n            loading: expected > 0,\n          });\n        },\n      }\n    );\n  };\n\n  sendReprocessing = (e: React.MouseEvent<Element>) => {\n    e.preventDefault();\n\n    this.setState({\n      loading: true,\n      reprocessing: true,\n    });\n\n    addLoadingMessage(t('Started reprocessing\\u2026'));\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {\n      method: 'POST',\n      success: () => {\n        this.fetchData();\n        this.setState({\n          reprocessing: false,\n        });\n      },\n      error: () => {\n        this.setState({\n          reprocessing: false,\n        });\n      },\n      complete: () => {\n        clearIndicators();\n      },\n    });\n  };\n\n  discardEvents = () => {\n    const {orgId, projectId} = this.props.params;\n    this.setState({\n      expected: this.state.expected + 1,\n    });\n    this.props.api.request(`/projects/${orgId}/${projectId}/processingissues/discard/`, {\n      method: 'DELETE',\n      success: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: false,\n          loading: expected > 0,\n        });\n        // TODO (billyvg): Need to fix this\n        // we reload to get rid of the badge in the sidebar\n        window.location.reload();\n      },\n      error: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: true,\n          loading: expected > 0,\n        });\n      },\n    });\n  };\n\n  deleteProcessingIssues = () => {\n    const {orgId, projectId} = this.props.params;\n    this.setState({\n      expected: this.state.expected + 1,\n    });\n    this.props.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {\n      method: 'DELETE',\n      success: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: false,\n          loading: expected > 0,\n        });\n        // TODO (billyvg): Need to fix this\n        // we reload to get rid of the badge in the sidebar\n        window.location.reload();\n      },\n      error: () => {\n        const expected = this.state.expected - 1;\n        this.setState({\n          expected,\n          error: true,\n          loading: expected > 0,\n        });\n      },\n    });\n  };\n\n  renderDebugTable() {\n    let body: React.ReactNode;\n    const {loading, error, processingIssues} = this.state;\n    if (loading) {\n      body = this.renderLoading();\n    } else if (error) {\n      body = <LoadingError onRetry={this.fetchData} />;\n    } else if (\n      processingIssues?.hasIssues ||\n      processingIssues?.resolveableIssues ||\n      processingIssues?.issuesProcessing\n    ) {\n      body = this.renderResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  renderLoading() {\n    return (\n      <Panel>\n        <LoadingIndicator />\n      </Panel>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t('Good news! There are no processing issues.')}</p>\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  getProblemDescription(item: ProcessingIssueItem) {\n    const msg = projectProcessingIssuesMessages[item.type];\n    return msg || t('Unknown Error');\n  }\n\n  getImageName(path: string) {\n    const pathSegments = path.split(/^([a-z]:\\\\|\\\\\\\\)/i.test(path) ? '\\\\' : '/');\n    return pathSegments[pathSegments.length - 1];\n  }\n\n  renderProblem(item: ProcessingIssueItem) {\n    const description = this.getProblemDescription(item);\n    const helpLink = HELP_LINKS[item.type];\n\n    return (\n      <div>\n        <span>{description}</span>{' '}\n        {helpLink && (\n          <ExternalLink href={helpLink}>\n            <IconQuestion size=\"xs\" />\n          </ExternalLink>\n        )}\n      </div>\n    );\n  }\n\n  renderDetails(item: ProcessingIssueItem) {\n    let dsymUUID: React.ReactNode = null;\n    let dsymName: React.ReactNode = null;\n    let dsymArch: React.ReactNode = null;\n\n    if (item.data._scope === 'native') {\n      if (item.data.image_uuid) {\n        dsymUUID = <code className=\"uuid\">{item.data.image_uuid}</code>;\n      }\n      if (item.data.image_path) {\n        dsymName = <em>{this.getImageName(item.data.image_path)}</em>;\n      }\n      if (item.data.image_arch) {\n        dsymArch = item.data.image_arch;\n      }\n    }\n\n    return (\n      <span>\n        {dsymUUID && <span> {dsymUUID}</span>}\n        {dsymArch && <span> {dsymArch}</span>}\n        {dsymName && <span> (for {dsymName})</span>}\n      </span>\n    );\n  }\n\n  renderResolveButton() {\n    const issues = this.state.processingIssues;\n\n    if (issues === null || this.state.reprocessing) {\n      return null;\n    }\n    if (issues.resolveableIssues <= 0) {\n      return null;\n    }\n\n    const fixButton = tn(\n      'Click here to trigger processing for %s pending event',\n      'Click here to trigger processing for %s pending events',\n      issues.resolveableIssues\n    );\n\n    return (\n      <AlertLink priority=\"info\" onClick={this.sendReprocessing}>\n        {t('Pro Tip')}: {fixButton}\n      </AlertLink>\n    );\n  }\n\n  renderResults() {\n    const {processingIssues} = this.state;\n    const fixLink = processingIssues ? processingIssues.signedLink : false;\n\n    let fixLinkBlock: React.ReactNode = null;\n\n    if (fixLink) {\n      fixLinkBlock = (\n        <Panel>\n          <PanelHeader>\n            {t('Having trouble uploading debug informations? We can help!')}\n          </PanelHeader>\n          <PanelBody withPadding>\n            <label>\n              {t(\n                \"Paste this command into your shell and we'll attempt to upload the missing symbols from your machine:\"\n              )}\n            </label>\n            <AutoSelectTextInput readOnly>\n              curl -sL \"{fixLink}\" | bash\n            </AutoSelectTextInput>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    let processingRow: React.ReactNode = null;\n    if (processingIssues && processingIssues.issuesProcessing > 0) {\n      processingRow = (\n        <StyledPanelAlert type=\"info\" icon={<IconSettings size=\"sm\" />}>\n          {tn(\n            'Reprocessing %s event …',\n            'Reprocessing %s events …',\n            processingIssues.issuesProcessing\n          )}\n        </StyledPanelAlert>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {fixLinkBlock}\n        <h3>\n          {t('Pending Issues')}\n          <Access access={['project:write']}>\n            {({hasAccess}) => (\n              <Button\n                size=\"small\"\n                className=\"pull-right\"\n                disabled={!hasAccess}\n                onClick={() => this.discardEvents()}\n              >\n                {t('Discard all')}\n              </Button>\n            )}\n          </Access>\n        </h3>\n        <PanelTable headers={[t('Problem'), t('Details'), t('Events'), t('Last seen')]}>\n          {processingRow}\n          {processingIssues?.issues?.map((item, idx) => (\n            <React.Fragment key={idx}>\n              <div>{this.renderProblem(item)}</div>\n              <div>{this.renderDetails(item)}</div>\n              <div>{item.numEvents + ''}</div>\n              <div>\n                <TimeSince date={item.lastSeen} />\n              </div>\n            </React.Fragment>\n          ))}\n        </PanelTable>\n      </React.Fragment>\n    );\n  }\n\n  renderReprocessingSettings() {\n    const access = new Set(this.props.organization.access);\n    if (this.state.loading) {\n      return this.renderLoading();\n    }\n\n    const {formData} = this.state;\n    const {orgId, projectId} = this.props.params;\n    return (\n      <Form\n        saveOnBlur\n        onSubmitSuccess={this.deleteProcessingIssues}\n        apiEndpoint={`/projects/${orgId}/${projectId}/`}\n        apiMethod=\"PUT\"\n        initialData={formData}\n      >\n        <JsonForm\n          access={access}\n          forms={formGroups}\n          renderHeader={() => (\n            <PanelAlert type=\"warning\">\n              <TextBlock noMargin>\n                {t(`Reprocessing does not apply to Minidumps. Even when enabled,\n                    Minidump events with processing issues will show up in the\n                    issues stream immediately and cannot be reprocessed.`)}\n              </TextBlock>\n            </PanelAlert>\n          )}\n        />\n      </Form>\n    );\n  }\n\n  render() {\n    const {projectId} = this.props.params;\n    const title = t('Processing Issues');\n    return (\n      <div>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n        <SettingsPageHeader title={title} />\n        <TextBlock>\n          {t(\n            `For some platforms the event processing requires configuration or\n          manual action.  If a misconfiguration happens or some necessary\n          steps are skipped, issues can occur during processing. (The most common\n          reason for this is missing debug symbols.) In these cases you can see\n          all the problems here with guides of how to correct them.`\n          )}\n        </TextBlock>\n        {this.renderDebugTable()}\n        {this.renderResolveButton()}\n        {this.renderReprocessingSettings()}\n      </div>\n    );\n  }\n}\n\nconst StyledPanelAlert = styled(PanelAlert)`\n  grid-column: 1/5;\n`;\n\nconst AutoSelectTextInput = styled(AutoSelectText)<{readOnly: boolean}>`\n  font-family: ${p => p.theme.text.familyMono};\n  ${p => inputStyles(p)};\n`;\n\nexport {ProjectProcessingIssues};\n\nexport default withApi(withOrganization(ProjectProcessingIssues));\n"],"names":["AlertLink","size","priority","icon","children","onClick","withoutMarginBottom","openInNewTab","to","href","dataTestId","StyledLink","IconWrapper","AlertLinkText","IconLink","direction","props","linkProps","omit","p","theme","alert","backgroundLight","textColor","border","space","route","title","fields","name","type","label","t","disabled","access","has","disabledReason","help","saveOnBlur","saveMessage","value","getData","form","options","FormPanel","React","collapsed","this","state","setState","render","additionalFieldProps","renderFooter","renderHeader","collapsible","otherProps","id","sanitizeQuerySelector","undefined","Collapse","handleToggleEvents","map","field","defaultValue","_","fieldWithoutDefaultValue","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","forms","features","_location","formGroup","i","withRouter","projectProcessingIssuesMessages","native_no_crashed_thread","native_internal_failure","native_bad_dsym","native_missing_optionally_bundled_dsym","native_missing_dsym","native_missing_system_dsym","native_missing_symbol","native_simulator_frame","native_unknown_image","proguard_missing_mapping","proguard_missing_lineno","HELP_LINKS","ProjectProcessingIssues","formData","loading","reprocessing","expected","error","processingIssues","pageLinks","orgId","projectId","params","api","request","success","data","resp","getResponseHeader","e","preventDefault","addLoadingMessage","method","fetchData","complete","clearIndicators","window","reload","renderDebugTable","body","renderLoading","onRetry","hasIssues","resolveableIssues","issuesProcessing","renderResults","renderEmpty","getProblemDescription","item","getImageName","path","pathSegments","split","test","renderProblem","description","helpLink","renderDetails","dsymUUID","dsymName","dsymArch","_scope","image_uuid","className","image_path","image_arch","renderResolveButton","issues","fixButton","tn","sendReprocessing","fixLink","signedLink","fixLinkBlock","withPadding","AutoSelectTextInput","readOnly","processingRow","StyledPanelAlert","hasAccess","discardEvents","headers","idx","numEvents","date","lastSeen","renderReprocessingSettings","Set","organization","onSubmitSuccess","deleteProcessingIssues","apiEndpoint","apiMethod","initialData","formGroups","noMargin","projectSlug","PanelAlert","AutoSelectText","text","familyMono","inputStyles","withApi","withOrganization"],"sourceRoot":""}