{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupActivity_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/pullRequestLink.tsx","webpack:///./app/components/reprocessedBox.tsx","webpack:///./app/views/organizationGroupDetails/groupActivityItem.tsx","webpack:///./app/views/organizationGroupDetails/groupActivity.tsx","webpack:///./app/views/organizationGroupDetails/utils.tsx","webpack:///../node_modules/lodash/orderBy.js"],"sourcesContent":["import * as React from 'react';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Repository} from 'app/types';\nimport {getShortCommitHash} from 'app/utils';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (opts: CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import ExternalLink from 'app/components/links/externalLink';\nimport {IconBitbucket, IconGithub, IconGitlab} from 'app/icons';\nimport {PullRequest, Repository} from 'app/types';\n\nfunction renderIcon(repo: Repository) {\n  if (!repo.provider) {\n    return null;\n  }\n\n  const {id} = repo.provider;\n  const providerId = id.includes(':') ? id.split(':').pop() : id;\n\n  switch (providerId) {\n    case 'github':\n      return <IconGithub size=\"xs\" />;\n    case 'gitlab':\n      return <IconGitlab size=\"xs\" />;\n    case 'bitbucket':\n      return <IconBitbucket size=\"xs\" />;\n    default:\n      return null;\n  }\n}\n\ntype Props = {\n  pullRequest: PullRequest;\n  repository: Repository;\n  inline?: boolean;\n};\n\nconst PullRequestLink = ({pullRequest, repository, inline}: Props) => {\n  const displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;\n\n  return pullRequest.externalUrl ? (\n    <ExternalLink\n      className={inline ? 'inline-commit' : 'btn btn-default btn-sm'}\n      href={pullRequest.externalUrl}\n    >\n      {renderIcon(repository)}\n      {inline ? '' : ' '}\n      {displayId}\n    </ExternalLink>\n  ) : (\n    <span>{displayId}</span>\n  );\n};\n\nexport default PullRequestLink;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {BannerContainer, BannerSummary} from 'app/components/events/styles';\nimport Link from 'app/components/links/link';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport {t, tct, tn} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GroupActivityReprocess, Organization} from 'app/types';\nimport localStorage from 'app/utils/localStorage';\n\ntype Props = {\n  reprocessActivity: GroupActivityReprocess;\n  groupCount: number;\n  groupId: string;\n  orgSlug: Organization['slug'];\n  className?: string;\n};\n\ntype State = {\n  isBannerHidden: boolean;\n};\n\nclass ReprocessedBox extends Component<Props, State> {\n  state: State = {\n    isBannerHidden: localStorage.getItem(this.getBannerUniqueId()) === 'true',\n  };\n\n  getBannerUniqueId() {\n    const {reprocessActivity} = this.props;\n    const {id} = reprocessActivity;\n\n    return `reprocessed-activity-${id}-banner-dismissed`;\n  }\n\n  handleBannerDismiss = () => {\n    localStorage.setItem(this.getBannerUniqueId(), 'true');\n    this.setState({isBannerHidden: true});\n  };\n\n  renderMessage() {\n    const {orgSlug, reprocessActivity, groupCount, groupId} = this.props;\n    const {data} = reprocessActivity;\n    const {eventCount, oldGroupId, newGroupId} = data;\n\n    const reprocessedEventsRoute = `/organizations/${orgSlug}/issues/?query=reprocessing.original_issue_id:${oldGroupId}`;\n\n    if (groupCount === 0) {\n      return tct('All events in this issue were moved during reprocessing. [link]', {\n        link: (\n          <Link to={reprocessedEventsRoute}>\n            {tn('See %s new event', 'See %s new events', eventCount)}\n          </Link>\n        ),\n      });\n    }\n\n    return tct('Events in this issue were successfully reprocessed. [link]', {\n      link: (\n        <Link to={reprocessedEventsRoute}>\n          {newGroupId === Number(groupId)\n            ? tn('See %s reprocessed event', 'See %s reprocessed events', eventCount)\n            : tn('See %s new event', 'See %s new events', eventCount)}\n        </Link>\n      ),\n    });\n  }\n\n  render() {\n    const {isBannerHidden} = this.state;\n\n    if (isBannerHidden) {\n      return null;\n    }\n\n    const {className} = this.props;\n\n    return (\n      <BannerContainer priority=\"success\" className={className}>\n        <StyledBannerSummary>\n          <IconCheckmark color=\"green300\" isCircled />\n          <span>{this.renderMessage()}</span>\n          <StyledIconClose\n            color=\"green300\"\n            aria-label={t('Dismiss')}\n            isCircled\n            onClick={this.handleBannerDismiss}\n          />\n        </StyledBannerSummary>\n      </BannerContainer>\n    );\n  }\n}\n\nexport default ReprocessedBox;\n\nconst StyledBannerSummary = styled(BannerSummary)`\n  & > svg:last-child {\n    margin-right: 0;\n    margin-left: ${space(1)};\n  }\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  cursor: pointer;\n`;\n","import * as React from 'react';\n\nimport CommitLink from 'app/components/commitLink';\nimport Duration from 'app/components/duration';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport PullRequestLink from 'app/components/pullRequestLink';\nimport Version from 'app/components/version';\nimport {t, tct, tn} from 'app/locale';\nimport MemberListStore from 'app/stores/memberListStore';\nimport TeamStore from 'app/stores/teamStore';\nimport {\n  GroupActivity,\n  GroupActivityAssigned,\n  GroupActivitySetIgnored,\n  GroupActivityType,\n  Organization,\n  Project,\n  User,\n} from 'app/types';\n\ntype Props = {\n  author: React.ReactNode;\n  activity: GroupActivity;\n  orgSlug: Organization['slug'];\n  projectId: Project['id'];\n};\n\nfunction GroupActivityItem({activity, orgSlug, projectId, author}: Props) {\n  const issuesLink = `/organizations/${orgSlug}/issues/`;\n\n  function getIgnoredMessage(data: GroupActivitySetIgnored['data']) {\n    if (data.ignoreDuration) {\n      return tct('[author] ignored this issue for [duration]', {\n        author,\n        duration: <Duration seconds={data.ignoreDuration * 60} />,\n      });\n    }\n\n    if (data.ignoreCount && data.ignoreWindow) {\n      return tct(\n        '[author] ignored this issue until it happens [count] time(s) in [duration]',\n        {\n          author,\n          count: data.ignoreCount,\n          duration: <Duration seconds={data.ignoreWindow * 60} />,\n        }\n      );\n    }\n\n    if (data.ignoreCount) {\n      return tct('[author] ignored this issue until it happens [count] time(s)', {\n        author,\n        count: data.ignoreCount,\n      });\n    }\n\n    if (data.ignoreUserCount && data.ignoreUserWindow) {\n      return tct(\n        '[author] ignored this issue until it affects [count] user(s) in [duration]',\n        {\n          author,\n          count: data.ignoreUserCount,\n          duration: <Duration seconds={data.ignoreUserWindow * 60} />,\n        }\n      );\n    }\n\n    if (data.ignoreUserCount) {\n      return tct('[author] ignored this issue until it affects [count] user(s)', {\n        author,\n        count: data.ignoreUserCount,\n      });\n    }\n\n    return tct('[author] ignored this issue', {author});\n  }\n\n  function getAssignedMessage(data: GroupActivityAssigned['data']) {\n    let assignee: string | User | undefined = undefined;\n\n    if (data.assigneeType === 'team') {\n      const team = TeamStore.getById(data.assignee);\n      assignee = team ? team.slug : '<unknown-team>';\n\n      return tct('[author] assigned this issue to #[assignee]', {\n        author,\n        assignee,\n      });\n    }\n\n    if (activity.user && activity.assignee === activity.user.id) {\n      return tct('[author] assigned this issue to themselves', {author});\n    }\n\n    assignee = MemberListStore.getById(data.assignee);\n\n    if (typeof assignee === 'object' && assignee?.email) {\n      return tct('[author] assigned this issue to [assignee]', {\n        author,\n        assignee: assignee.email,\n      });\n    }\n\n    return tct('[author] assigned this issue to an unknown user', {author});\n  }\n\n  function renderContent() {\n    switch (activity.type) {\n      case GroupActivityType.NOTE:\n        return tct('[author] left a comment', {author});\n      case GroupActivityType.SET_RESOLVED:\n        return tct('[author] marked this issue as resolved', {author});\n      case GroupActivityType.SET_RESOLVED_BY_AGE:\n        return tct('[author] marked this issue as resolved due to inactivity', {\n          author,\n        });\n      case GroupActivityType.SET_RESOLVED_IN_RELEASE:\n        const {current_release_version, version} = activity.data;\n        if (current_release_version) {\n          return tct(\n            '[author] marked this issue as resolved in releases greater than [version]',\n            {\n              author,\n              version: (\n                <Version\n                  version={current_release_version}\n                  projectId={projectId}\n                  tooltipRawVersion\n                />\n              ),\n            }\n          );\n        }\n        return version\n          ? tct('[author] marked this issue as resolved in [version]', {\n              author,\n              version: (\n                <Version version={version} projectId={projectId} tooltipRawVersion />\n              ),\n            })\n          : tct('[author] marked this issue as resolved in the upcoming release', {\n              author,\n            });\n      case GroupActivityType.SET_RESOLVED_IN_COMMIT:\n        return tct('[author] marked this issue as resolved in [version]', {\n          author,\n          version: (\n            <CommitLink\n              inline\n              commitId={activity.data.commit.id}\n              repository={activity.data.commit.repository}\n            />\n          ),\n        });\n      case GroupActivityType.SET_RESOLVED_IN_PULL_REQUEST: {\n        const {data} = activity;\n        const {pullRequest} = data;\n        return tct('[author] marked this issue as resolved in [version]', {\n          author,\n          version: (\n            <PullRequestLink\n              inline\n              pullRequest={pullRequest}\n              repository={pullRequest.repository}\n            />\n          ),\n        });\n      }\n      case GroupActivityType.SET_UNRESOLVED:\n        return tct('[author] marked this issue as unresolved', {author});\n      case GroupActivityType.SET_IGNORED: {\n        const {data} = activity;\n        return getIgnoredMessage(data);\n      }\n      case GroupActivityType.SET_PUBLIC:\n        return tct('[author] made this issue public', {author});\n      case GroupActivityType.SET_PRIVATE:\n        return tct('[author] made this issue private', {author});\n      case GroupActivityType.SET_REGRESSION: {\n        const {data} = activity;\n        return data.version\n          ? tct('[author] marked this issue as a regression in [version]', {\n              author,\n              version: (\n                <Version version={data.version} projectId={projectId} tooltipRawVersion />\n              ),\n            })\n          : tct('[author] marked this issue as a regression', {author});\n      }\n      case GroupActivityType.CREATE_ISSUE: {\n        const {data} = activity;\n        return tct('[author] created an issue on [provider] titled [title]', {\n          author,\n          provider: data.provider,\n          title: <ExternalLink href={data.location}>{data.title}</ExternalLink>,\n        });\n      }\n      case GroupActivityType.UNMERGE_SOURCE: {\n        const {data} = activity;\n        const {destination, fingerprints} = data;\n        return tn(\n          '%2$s migrated %1$s fingerprint to %3$s',\n          '%2$s migrated %1$s fingerprints to %3$s',\n          fingerprints.length,\n          author,\n          destination ? (\n            <Link to={`${issuesLink}${destination.id}`}>{destination.shortId}</Link>\n          ) : (\n            t('a group')\n          )\n        );\n      }\n      case GroupActivityType.UNMERGE_DESTINATION: {\n        const {data} = activity;\n        const {source, fingerprints} = data;\n        return tn(\n          '%2$s migrated %1$s fingerprint from %3$s',\n          '%2$s migrated %1$s fingerprints from %3$s',\n          fingerprints.length,\n          author,\n          source ? (\n            <Link to={`${issuesLink}${source.id}`}>{source.shortId}</Link>\n          ) : (\n            t('a group')\n          )\n        );\n      }\n      case GroupActivityType.FIRST_SEEN:\n        return tct('[author] first saw this issue', {author});\n      case GroupActivityType.ASSIGNED: {\n        const {data} = activity;\n        return getAssignedMessage(data);\n      }\n      case GroupActivityType.UNASSIGNED:\n        return tct('[author] unassigned this issue', {author});\n      case GroupActivityType.MERGE:\n        return tn(\n          '%2$s merged %1$s issue into this issue',\n          '%2$s merged %1$s issues into this issue',\n          activity.data.issues.length,\n          author\n        );\n      case GroupActivityType.REPROCESS: {\n        const {data} = activity;\n        const {oldGroupId, eventCount} = data;\n\n        return tct('[author] reprocessed the events in this issue. [new-events]', {\n          author,\n          ['new-events']: (\n            <Link\n              to={`/organizations/${orgSlug}/issues/?query=reprocessing.original_issue_id:${oldGroupId}`}\n            >\n              {tn('See %s new event', 'See %s new events', eventCount)}\n            </Link>\n          ),\n        });\n      }\n      case GroupActivityType.MARK_REVIEWED: {\n        return tct('[author] marked this issue as reviewed', {\n          author,\n        });\n      }\n      default:\n        return ''; // should never hit (?)\n    }\n  }\n\n  return <React.Fragment>{renderContent()}</React.Fragment>;\n}\n\nexport default GroupActivityItem;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {createNote, deleteNote, updateNote} from 'app/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport ActivityAuthor from 'app/components/activity/author';\nimport ActivityItem from 'app/components/activity/item';\nimport Note from 'app/components/activity/note';\nimport NoteInputWithStorage from 'app/components/activity/note/inputWithStorage';\nimport {CreateError} from 'app/components/activity/note/types';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport ReprocessedBox from 'app/components/reprocessedBox';\nimport {DEFAULT_ERROR_JSON} from 'app/constants';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport {\n  Group,\n  GroupActivityReprocess,\n  GroupActivityType,\n  Organization,\n  User,\n} from 'app/types';\nimport {uniqueId} from 'app/utils/guid';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupActivityItem from './groupActivityItem';\nimport {\n  getGroupMostRecentActivity,\n  getGroupReprocessingStatus,\n  ReprocessingStatus,\n} from './utils';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  group: Group;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = {\n  createBusy: boolean;\n  error: boolean;\n  errorJSON: CreateError | null;\n  inputId: string;\n};\n\nclass GroupActivity extends Component<Props, State> {\n  // TODO(dcramer): only re-render on group/activity change\n  state: State = {\n    createBusy: false,\n    error: false,\n    errorJSON: null,\n    inputId: uniqueId(),\n  };\n\n  handleNoteDelete = async ({modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Removing comment...'));\n\n    try {\n      await deleteNote(api, group, modelId, oldText);\n      clearIndicators();\n    } catch (_err) {\n      addErrorMessage(t('Failed to delete comment'));\n    }\n  };\n\n  /**\n   * Note: This is nearly the same logic as `app/views/alerts/details/activity`\n   * This can be abstracted a bit if we create more objects that can have activities\n   */\n  handleNoteCreate = async note => {\n    const {api, group} = this.props;\n\n    this.setState({\n      createBusy: true,\n    });\n\n    addLoadingMessage(t('Posting comment...'));\n\n    try {\n      await createNote(api, group, note);\n\n      this.setState({\n        createBusy: false,\n\n        // This is used as a `key` to Note Input so that after successful post\n        // we reset the value of the input\n        inputId: uniqueId(),\n      });\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        createBusy: false,\n        error: true,\n        errorJSON: error.responseJSON || DEFAULT_ERROR_JSON,\n      });\n      addErrorMessage(t('Unable to post comment'));\n    }\n  };\n\n  handleNoteUpdate = async (note, {modelId, text: oldText}) => {\n    const {api, group} = this.props;\n\n    addLoadingMessage(t('Updating comment...'));\n\n    try {\n      await updateNote(api, group, note, modelId, oldText);\n      clearIndicators();\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorJSON: error.responseJSON || DEFAULT_ERROR_JSON,\n      });\n      addErrorMessage(t('Unable to update comment'));\n    }\n  };\n\n  render() {\n    const {group, organization} = this.props;\n    const {activity: activities, count, id: groupId} = group;\n    const groupCount = Number(count);\n    const mostRecentActivity = getGroupMostRecentActivity(activities);\n    const reprocessingStatus = getGroupReprocessingStatus(group, mostRecentActivity);\n\n    const me = ConfigStore.get('user');\n    const projectSlugs = group && group.project ? [group.project.slug] : [];\n    const noteProps = {\n      minHeight: 140,\n      group,\n      projectSlugs,\n      placeholder: t(\n        'Add details or updates to this event. \\nTag users with @, or teams with #'\n      ),\n    };\n\n    return (\n      <Fragment>\n        {(reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT ||\n          reprocessingStatus === ReprocessingStatus.REPROCESSED_AND_HAS_EVENT) && (\n          <StyledReprocessedBox\n            reprocessActivity={mostRecentActivity as GroupActivityReprocess}\n            groupCount={groupCount}\n            orgSlug={organization.slug}\n            groupId={groupId}\n          />\n        )}\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <div>\n              <ActivityItem author={{type: 'user', user: me}}>\n                {() => (\n                  <NoteInputWithStorage\n                    key={this.state.inputId}\n                    storageKey=\"groupinput:latest\"\n                    itemKey={group.id}\n                    onCreate={this.handleNoteCreate}\n                    busy={this.state.createBusy}\n                    error={this.state.error}\n                    errorJSON={this.state.errorJSON}\n                    {...noteProps}\n                  />\n                )}\n              </ActivityItem>\n\n              {group.activity.map(item => {\n                const authorName = item.user ? item.user.name : 'Sentry';\n\n                if (item.type === GroupActivityType.NOTE) {\n                  return (\n                    <ErrorBoundary mini key={`note-${item.id}`}>\n                      <Note\n                        showTime={false}\n                        text={item.data.text}\n                        modelId={item.id}\n                        user={item.user as User}\n                        dateCreated={item.dateCreated}\n                        authorName={authorName}\n                        onDelete={this.handleNoteDelete}\n                        onUpdate={this.handleNoteUpdate}\n                        {...noteProps}\n                      />\n                    </ErrorBoundary>\n                  );\n                }\n\n                return (\n                  <ErrorBoundary mini key={`item-${item.id}`}>\n                    <ActivityItem\n                      author={{\n                        type: item.user ? 'user' : 'system',\n                        user: item.user ?? undefined,\n                      }}\n                      date={item.dateCreated}\n                      header={\n                        <GroupActivityItem\n                          author={<ActivityAuthor>{authorName}</ActivityAuthor>}\n                          activity={item}\n                          orgSlug={this.props.params.orgId}\n                          projectId={group.project.id}\n                        />\n                      }\n                    />\n                  </ErrorBoundary>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport {GroupActivity};\nexport default withApi(withOrganization(GroupActivity));\n\nconst StyledReprocessedBox = styled(ReprocessedBox)`\n  margin: -${space(3)} -${space(4)} ${space(4)} -${space(4)};\n  z-index: 1;\n`;\n","import orderBy from 'lodash/orderBy';\n\nimport {bulkUpdate} from 'app/actionCreators/group';\nimport {Client} from 'app/api';\nimport {t, tct} from 'app/locale';\nimport {Group, GroupActivity} from 'app/types';\nimport {Event} from 'app/types/event';\n\n/**\n * Fetches group data and mark as seen\n *\n * @param orgId organization slug\n * @param groupId groupId\n * @param eventId eventId or \"latest\" or \"oldest\"\n * @param envNames\n * @param projectId project slug required for eventId that is not latest or oldest\n */\nexport async function fetchGroupEvent(\n  api: Client,\n  orgId: string,\n  groupId: string,\n  eventId: string,\n  envNames: string[],\n  projectId?: string\n): Promise<Event> {\n  const url =\n    eventId === 'latest' || eventId === 'oldest'\n      ? `/issues/${groupId}/events/${eventId}/`\n      : `/projects/${orgId}/${projectId}/events/${eventId}/`;\n\n  const query: {environment?: string[]} = {};\n  if (envNames.length !== 0) {\n    query.environment = envNames;\n  }\n\n  const data = await api.requestPromise(url, {query});\n  return data;\n}\n\nexport function markEventSeen(\n  api: Client,\n  orgId: string,\n  projectId: string,\n  groupId: string\n) {\n  bulkUpdate(\n    api,\n    {\n      orgId,\n      projectId,\n      itemIds: [groupId],\n      failSilently: true,\n      data: {hasSeen: true},\n    },\n    {}\n  );\n}\n\nexport function fetchGroupUserReports(groupId: string, query: Record<string, string>) {\n  const api = new Client();\n\n  return api.requestPromise(`/issues/${groupId}/user-reports/`, {\n    includeAllArgs: true,\n    query,\n  });\n}\n\n/**\n * Returns the environment name for an event or null\n *\n * @param event\n */\nexport function getEventEnvironment(event: Event) {\n  const tag = event.tags.find(({key}) => key === 'environment');\n\n  return tag ? tag.value : null;\n}\n\nconst SUBSCRIPTION_REASONS = {\n  commented: t(\n    \"You're receiving workflow notifications because you have commented on this issue.\"\n  ),\n  assigned: t(\n    \"You're receiving workflow notifications because you were assigned to this issue.\"\n  ),\n  bookmarked: t(\n    \"You're receiving workflow notifications because you have bookmarked this issue.\"\n  ),\n  changed_status: t(\n    \"You're receiving workflow notifications because you have changed the status of this issue.\"\n  ),\n  mentioned: t(\n    \"You're receiving workflow notifications because you have been mentioned in this issue.\"\n  ),\n};\n\n/**\n * @param group\n * @param removeLinks add/remove links to subscription reasons text (default: false)\n * @returns Reason for subscription\n */\nexport function getSubscriptionReason(group: Group, removeLinks = false) {\n  if (group.subscriptionDetails && group.subscriptionDetails.disabled) {\n    return tct('You have [link:disabled workflow notifications] for this project.', {\n      link: removeLinks ? <span /> : <a href=\"/account/settings/notifications/\" />,\n    });\n  }\n\n  if (!group.isSubscribed) {\n    return t('Subscribe to workflow notifications for this issue');\n  }\n\n  if (group.subscriptionDetails) {\n    const {reason} = group.subscriptionDetails;\n    if (reason === 'unknown') {\n      return t(\n        \"You're receiving workflow notifications because you are subscribed to this issue.\"\n      );\n    }\n\n    if (reason && SUBSCRIPTION_REASONS.hasOwnProperty(reason)) {\n      return SUBSCRIPTION_REASONS[reason];\n    }\n  }\n\n  return tct(\n    \"You're receiving updates because you are [link:subscribed to workflow notifications] for this project.\",\n    {\n      link: removeLinks ? <span /> : <a href=\"/account/settings/notifications/\" />,\n    }\n  );\n}\n\nexport function getGroupMostRecentActivity(activities: GroupActivity[]) {\n  // Most recent activity\n  return orderBy([...activities], ({dateCreated}) => new Date(dateCreated), ['desc'])[0];\n}\n\nexport enum ReprocessingStatus {\n  REPROCESSED_AND_HASNT_EVENT = 'reprocessed_and_hasnt_event',\n  REPROCESSED_AND_HAS_EVENT = 'reprocessed_and_has_event',\n  REPROCESSING = 'reprocessing',\n  NO_STATUS = 'no_status',\n}\n\n// Reprocessing Checks\nexport function getGroupReprocessingStatus(\n  group: Group,\n  mostRecentActivity?: GroupActivity\n) {\n  const {status, count, activity: activities} = group;\n  const groupCount = Number(count);\n\n  switch (status) {\n    case 'reprocessing':\n      return ReprocessingStatus.REPROCESSING;\n    case 'unresolved': {\n      const groupMostRecentActivity =\n        mostRecentActivity ?? getGroupMostRecentActivity(activities);\n      if (groupMostRecentActivity?.type === 'reprocess') {\n        if (groupCount === 0) {\n          return ReprocessingStatus.REPROCESSED_AND_HASNT_EVENT;\n        }\n        return ReprocessingStatus.REPROCESSED_AND_HAS_EVENT;\n      }\n      return ReprocessingStatus.NO_STATUS;\n    }\n    default:\n      return ReprocessingStatus.NO_STATUS;\n  }\n}\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","renderIcon","repo","split","pop","pullRequest","displayId","name","title","externalUrl","ReprocessedBox","Component","isBannerHidden","localStorage","this","getBannerUniqueId","setState","reprocessActivity","props","renderMessage","orgSlug","groupCount","groupId","data","eventCount","oldGroupId","newGroupId","reprocessedEventsRoute","tct","link","to","tn","Number","render","state","priority","StyledBannerSummary","color","isCircled","StyledIconClose","onClick","handleBannerDismiss","BannerSummary","space","IconClose","GroupActivityItem","activity","projectId","author","issuesLink","type","GroupActivityType","current_release_version","version","tooltipRawVersion","commit","ignoreDuration","duration","seconds","ignoreCount","ignoreWindow","count","ignoreUserCount","ignoreUserWindow","getIgnoredMessage","location","destination","fingerprints","length","source","assignee","assigneeType","team","TeamStore","slug","user","MemberListStore","email","getAssignedMessage","issues","renderContent","GroupActivity","createBusy","error","errorJSON","inputId","uniqueId","async","modelId","text","oldText","api","group","addLoadingMessage","deleteNote","clearIndicators","_err","addErrorMessage","createNote","note","responseJSON","DEFAULT_ERROR_JSON","updateNote","organization","activities","mostRecentActivity","getGroupMostRecentActivity","reprocessingStatus","getGroupReprocessingStatus","me","ConfigStore","projectSlugs","project","noteProps","minHeight","placeholder","Fragment","ReprocessingStatus","StyledReprocessedBox","storageKey","itemKey","onCreate","handleNoteCreate","busy","map","item","authorName","mini","showTime","dateCreated","onDelete","handleNoteDelete","onUpdate","handleNoteUpdate","date","header","params","orgId","withApi","withOrganization","fetchGroupEvent","eventId","envNames","query","environment","requestPromise","markEventSeen","bulkUpdate","itemIds","failSilently","hasSeen","fetchGroupUserReports","Client","includeAllArgs","getEventEnvironment","event","tag","tags","key","value","SUBSCRIPTION_REASONS","commented","assigned","bookmarked","changed_status","mentioned","getSubscriptionReason","removeLinks","subscriptionDetails","disabled","isSubscribed","reason","hasOwnProperty","orderBy","Date","status","REPROCESSING","groupMostRecentActivity","REPROCESSED_AND_HASNT_EVENT","REPROCESSED_AND_HAS_EVENT","NO_STATUS","baseOrderBy","isArray","module","exports","collection","iteratees","orders","guard"],"sourceRoot":""}