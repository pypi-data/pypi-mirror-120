{"version":3,"file":"chunks/app_views_settings_account_accountEmails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/accountEmails.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {RequestOptions} from 'app/api';\nimport AlertLink from 'app/components/alertLink';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tag from 'app/components/tag';\nimport accountEmailsFields from 'app/data/forms/accountEmails';\nimport {IconDelete, IconStack} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {UserEmail} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nconst ENDPOINT = '/users/me/emails/';\n\ntype Props = AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[];\n};\n\nclass AccountEmails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Emails');\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess: Form['props']['onSubmitSuccess'] = (_change, model, id) => {\n    if (id === undefined) {\n      return;\n    }\n    model.setValue(id, '');\n    this.remountComponent();\n  };\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Email Addresses')} />\n        <EmailAddresses />\n        <Form\n          apiMethod=\"POST\"\n          apiEndpoint={ENDPOINT}\n          saveOnBlur\n          allowUndo={false}\n          onSubmitSuccess={this.handleSubmitSuccess}\n        >\n          <JsonForm forms={accountEmailsFields} />\n        </Form>\n\n        <AlertLink to=\"/settings/account/notifications\" icon={<IconStack />}>\n          {t('Want to change how many emails you get? Use the notifications panel.')}\n        </AlertLink>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AccountEmails;\n\nexport class EmailAddresses extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['emails', ENDPOINT]];\n  }\n  doApiCall(endpoint: string, requestParams: RequestOptions) {\n    this.setState({loading: true, emails: []}, () =>\n      this.api\n        .requestPromise(endpoint, requestParams)\n        .then(() => this.remountComponent())\n        .catch(err => {\n          this.remountComponent();\n\n          if (err?.responseJSON?.email) {\n            addErrorMessage(err.responseJSON.email);\n          }\n        })\n    );\n  }\n  handleSetPrimary = (email: string) =>\n    this.doApiCall(ENDPOINT, {\n      method: 'PUT',\n      data: {email},\n    });\n\n  handleRemove = (email: string) =>\n    this.doApiCall(ENDPOINT, {\n      method: 'DELETE',\n      data: {email},\n    });\n\n  handleVerify = (email: string) =>\n    this.doApiCall(`${ENDPOINT}confirm/`, {\n      method: 'POST',\n      data: {email},\n    });\n\n  render() {\n    const {emails, loading} = this.state;\n    const primary = emails?.find(({isPrimary}) => isPrimary);\n    const secondary = emails?.filter(({isPrimary}) => !isPrimary);\n\n    if (loading) {\n      return (\n        <Panel>\n          <PanelHeader>{t('Email Addresses')}</PanelHeader>\n          <PanelBody>\n            <LoadingIndicator />\n          </PanelBody>\n        </Panel>\n      );\n    }\n    return (\n      <Panel>\n        <PanelHeader>{t('Email Addresses')}</PanelHeader>\n        <PanelBody>\n          {primary && (\n            <EmailRow\n              onRemove={this.handleRemove}\n              onVerify={this.handleVerify}\n              {...primary}\n            />\n          )}\n\n          {secondary?.map(emailObj => (\n            <EmailRow\n              key={emailObj.email}\n              onSetPrimary={this.handleSetPrimary}\n              onRemove={this.handleRemove}\n              onVerify={this.handleVerify}\n              {...emailObj}\n            />\n          ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype EmailRowProps = {\n  email: string;\n  onRemove: (email: string, e: React.MouseEvent) => void;\n  onVerify: (email: string, e: React.MouseEvent) => void;\n  onSetPrimary?: (email: string, e: React.MouseEvent) => void;\n  isVerified?: boolean;\n  isPrimary?: boolean;\n  hideRemove?: boolean;\n};\n\nconst EmailRow = ({\n  email,\n  onRemove,\n  onVerify,\n  onSetPrimary,\n  isVerified,\n  isPrimary,\n  hideRemove,\n}: EmailRowProps) => (\n  <EmailItem>\n    <EmailTags>\n      {email}\n      {!isVerified && <Tag type=\"warning\">{t('Unverified')}</Tag>}\n      {isPrimary && <Tag type=\"success\">{t('Primary')}</Tag>}\n    </EmailTags>\n    <ButtonBar gap={1}>\n      {!isPrimary && isVerified && (\n        <Button size=\"small\" onClick={e => onSetPrimary?.(email, e)}>\n          {t('Set as primary')}\n        </Button>\n      )}\n      {!isVerified && (\n        <Button size=\"small\" onClick={e => onVerify(email, e)}>\n          {t('Resend verification')}\n        </Button>\n      )}\n      {!hideRemove && !isPrimary && (\n        <Button\n          label={t('Remove email')}\n          data-test-id=\"remove\"\n          priority=\"danger\"\n          size=\"small\"\n          icon={<IconDelete />}\n          onClick={e => onRemove(email, e)}\n        />\n      )}\n    </ButtonBar>\n  </EmailItem>\n);\n\nconst EmailTags = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst EmailItem = styled(PanelItem)`\n  justify-content: space-between;\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"names":["ENDPOINT","AccountEmails","AsyncView","_change","model","id","undefined","setValue","this","remountComponent","getTitle","t","getEndpoints","renderBody","title","EmailAddresses","apiMethod","apiEndpoint","saveOnBlur","allowUndo","onSubmitSuccess","handleSubmitSuccess","forms","accountEmailsFields","to","icon","AsyncComponent","email","doApiCall","method","data","endpoint","requestParams","setState","loading","emails","api","requestPromise","then","catch","err","responseJSON","addErrorMessage","render","state","primary","find","isPrimary","secondary","filter","EmailRow","onRemove","handleRemove","onVerify","handleVerify","map","emailObj","onSetPrimary","handleSetPrimary","isVerified","hideRemove","EmailItem","EmailTags","type","gap","size","onClick","e","label","priority","space","PanelItem","FormPanel","React","collapsed","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","collapsible","otherProps","props","sanitizeQuerySelector","Collapse","handleToggleEvents","direction","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","name","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","Sentry","shouldDisplayForm","fieldsWithVisibleProp","defined","visible","length","every","renderForm","formPanelProps","features","_location","formGroup","i","withRouter"],"sourceRoot":""}