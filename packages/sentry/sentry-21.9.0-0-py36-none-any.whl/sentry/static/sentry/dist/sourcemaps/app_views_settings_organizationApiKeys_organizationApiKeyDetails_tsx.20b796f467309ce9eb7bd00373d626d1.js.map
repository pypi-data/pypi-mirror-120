{"version":3,"file":"chunks/app_views_settings_organizationApiKeys_organizationApiKeyDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/apiForm.tsx","webpack:///./app/views/settings/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/settings/components/forms/controls/textarea.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/components/forms/textareaField.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\n\ntype Props = Form['props'] & {\n  onSubmit?: (data: Record<string, any>) => void;\n  apiMethod: string;\n  apiEndpoint: string;\n};\n\nexport default class ApiForm extends Component<Props> {\n  componentWillUnmount() {\n    this.api.clear();\n  }\n\n  api: Client = new Client();\n\n  onSubmit = (\n    data: Record<string, any>,\n    onSuccess: (response: Record<string, any>) => void,\n    onError: (error: any) => void\n  ) => {\n    this.props.onSubmit && this.props.onSubmit(data);\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(this.props.apiEndpoint, {\n      method: this.props.apiMethod,\n      data,\n      success: response => {\n        clearIndicators();\n        onSuccess(response);\n      },\n      error: error => {\n        clearIndicators();\n        onError(error);\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSubmit: _onSubmit,\n      apiMethod: _apiMethod,\n      apiEndpoint: _apiEndpoint,\n      ...otherProps\n    } = this.props;\n\n    return <Form onSubmit={this.onSubmit} {...otherProps} />;\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'app/types';\nimport {defined} from 'app/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  value: (string | number)[];\n  choices: Choices;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n};\n\nclass MultipleCheckbox extends React.Component<Props> {\n  onChange = (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value, onChange} = this.props;\n    let newValue: SelectedValue = [];\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <LabelContainer key={choiceValue}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </LabelContainer>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 25%;\n  }\n`;\n","import * as React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\n\ntype InputProps = Omit<Parameters<typeof inputStyles>[0], 'theme'>;\ntype Props = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'css'> &\n  InputProps & {\n    /**\n     * Enable autosizing of the textarea.\n     */\n    autosize?: boolean;\n    /**\n     * Number of rows to default to.\n     */\n    rows?: number;\n    /**\n     * Max number of rows to default to.\n     */\n    maxRows?: number;\n  };\n\nconst TextAreaControl = React.forwardRef(function TextAreaControl(\n  {autosize, rows, maxRows, ...p}: Props,\n  ref: React.Ref<HTMLTextAreaElement>\n) {\n  return autosize ? (\n    <TextareaAutosize {...p} async ref={ref} rows={rows ? rows : 2} maxRows={maxRows} />\n  ) : (\n    <textarea ref={ref} {...p} />\n  );\n});\n\nTextAreaControl.displayName = 'TextAreaControl';\n\nconst propFilter = (p: string) =>\n  ['autosize', 'rows', 'maxRows'].includes(p) || isPropValid(p);\n\nconst TextArea = styled(TextAreaControl, {shouldForwardProp: propFilter})`\n  ${inputStyles};\n  min-height: 40px;\n  padding: calc(${space(1)} - 1px) ${space(1)};\n  line-height: 1.5em;\n  ${p =>\n    p.autosize &&\n    `\n      height: auto;\n      padding: calc(${space(1)} - 2px) ${space(1)};\n      line-height: 1.6em;\n    `}\n`;\n\nexport default TextArea;\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport Textarea from 'app/views/settings/components/forms/controls/textarea';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = Omit<InputField['props'], 'field'> &\n  Pick<\n    React.ComponentProps<typeof Textarea>,\n    'monospace' | 'autosize' | 'rows' | 'maxRows'\n  >;\n\nexport default function TextareaField({monospace, rows, autosize, ...props}: Props) {\n  return (\n    <InputField\n      {...props}\n      field={fieldProps => (\n        <Textarea\n          {...{monospace, rows, autosize}}\n          {...omit(fieldProps, ['onKeyDown', 'children'])}\n        />\n      )}\n    />\n  );\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {API_ACCESS_SCOPES} from 'app/constants';\nimport {t} from 'app/locale';\nimport {Choices, Organization} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport ApiForm from 'app/views/settings/components/forms/apiForm';\nimport MultipleCheckbox from 'app/views/settings/components/forms/controls/multipleCheckbox';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport TextareaField from 'app/views/settings/components/forms/textareaField';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport {DeprecatedApiKey} from './types';\n\nconst API_CHOICES: Choices = API_ACCESS_SCOPES.map(s => [s, s]);\n\ntype RouteParams = {\n  orgId: string;\n  apiKey: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype State = AsyncView['state'] & {\n  apiKey: DeprecatedApiKey;\n};\n\nclass OrganizationApiKeyDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      [\n        'apiKey',\n        `/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    return routeTitleGen(t('Edit API Key'), this.props.organization.slug, false);\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title={t('Edit API Key')} />\n\n        <Panel>\n          <PanelHeader>{t('API Key')}</PanelHeader>\n          <ApiForm\n            apiMethod=\"PUT\"\n            apiEndpoint={`/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`}\n            initialData={this.state.apiKey}\n            onSubmitSuccess={this.handleSubmitSuccess}\n            onSubmitError={this.handleSubmitError}\n            onCancel={() =>\n              browserHistory.push(\n                recreateRoute('', {\n                  stepBack: -1,\n                  routes: this.props.routes,\n                  params: this.props.params,\n                })\n              )\n            }\n          >\n            <PanelBody>\n              <TextField label={t('Label')} name=\"label\" />\n              <TextField label={t('API Key')} name=\"key\" disabled />\n\n              <FormField name=\"scope_list\" label={t('Scopes')} inline={false} required>\n                {({value, onChange}) => (\n                  <MultipleCheckbox\n                    value={value}\n                    onChange={onChange}\n                    choices={API_CHOICES}\n                  />\n                )}\n              </FormField>\n\n              <TextareaField\n                label={t('Allowed Domains')}\n                name=\"allowed_origins\"\n                placeholder=\"e.g. example.com or https://example.com\"\n                help=\"Separate multiple entries with a newline\"\n              />\n            </PanelBody>\n          </ApiForm>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationApiKeyDetails);\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ApiForm","Component","Client","data","onSuccess","onError","props","onSubmit","addLoadingMessage","t","api","request","apiEndpoint","method","apiMethod","success","response","clearIndicators","error","componentWillUnmount","clear","_onSubmit","_apiMethod","_apiEndpoint","otherProps","MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","React","selectedValue","e","value","onChange","newValue","target","checked","filter","v","disabled","choices","choiceValue","choiceLabel","LabelContainer","type","bind","defined","p","theme","breakpoints","TextAreaControl","autosize","rows","maxRows","ref","async","displayName","shouldForwardProp","includes","isPropValid","inputStyles","space","TextField","TextareaField","monospace","field","fieldProps","omit","API_CHOICES","API_ACCESS_SCOPES","s","OrganizationApiKeyDetails","addSuccessMessage","browserHistory","addErrorMessage","getEndpoints","orgId","apiKey","routeTitleGen","organization","slug","renderBody","initialData","state","onSubmitSuccess","handleSubmitSuccess","onSubmitError","handleSubmitError","onCancel","label","name","inline","required","placeholder","help","withOrganization"],"sourceRoot":""}