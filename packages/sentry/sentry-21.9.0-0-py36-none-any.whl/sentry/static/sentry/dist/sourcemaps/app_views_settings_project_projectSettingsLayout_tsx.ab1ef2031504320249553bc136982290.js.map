{"version":3,"file":"chunks/app_views_settings_project_projectSettingsLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/projects/appStoreConnectContext/index.tsx","webpack:///./app/components/projects/appStoreConnectContext/utils.tsx","webpack:///./app/views/projects/projectContext.tsx","webpack:///./app/views/settings/project/projectSettingsNavigation.tsx","webpack:///./app/views/settings/project/projectSettingsLayout.tsx"],"sourcesContent":["import {createContext, useEffect, useState} from 'react';\n\nimport {Client} from 'app/api';\nimport {Organization, Project} from 'app/types';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\nimport withApi from 'app/utils/withApi';\n\nexport type AppStoreConnectContextProps = AppStoreConnectValidationData | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\nimport {getAppConnectStoreUpdateAlertMessage} from './utils';\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  api: Client;\n  project?: Project;\n};\n\nconst Provider = withApi(({api, children, project, organization}: ProviderProps) => {\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectValidationData, setAppStoreConnectValidationData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const orgSlug = organization.slug;\n  const hasAppConnectStoreFeatureFlag =\n    !!organization.features?.includes('app-store-connect');\n\n  useEffect(() => {\n    fetchProjectDetails();\n  }, [project]);\n\n  useEffect(() => {\n    fetchAppStoreConnectValidationData();\n  }, [projectDetails]);\n\n  async function fetchProjectDetails() {\n    if (!hasAppConnectStoreFeatureFlag || !project || projectDetails) {\n      return;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return;\n    }\n\n    try {\n      const response = await api.requestPromise(`/projects/${orgSlug}/${project.slug}/`);\n      setProjectDetails(response);\n    } catch {\n      // do nothing\n    }\n  }\n\n  function getAppStoreConnectSymbolSourceId(symbolSources?: string) {\n    return (symbolSources ? JSON.parse(symbolSources) : []).find(\n      symbolSource => symbolSource.type.toLowerCase() === 'appstoreconnect'\n    )?.id;\n  }\n\n  async function fetchAppStoreConnectValidationData() {\n    if (!projectDetails) {\n      return;\n    }\n\n    const appStoreConnectSymbolSourceId = getAppStoreConnectSymbolSourceId(\n      projectDetails.symbolSources\n    );\n\n    if (!appStoreConnectSymbolSourceId) {\n      return;\n    }\n\n    try {\n      const response = await api.requestPromise(\n        `/projects/${orgSlug}/${projectDetails.slug}/appstoreconnect/validate/${appStoreConnectSymbolSourceId}/`\n      );\n      setAppStoreConnectValidationData({\n        id: appStoreConnectSymbolSourceId,\n        ...response,\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectValidationData\n          ? {\n              ...appStoreConnectValidationData,\n              updateAlertMessage: getAppConnectStoreUpdateAlertMessage(\n                appStoreConnectValidationData\n              ),\n            }\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n});\n\nconst Consumer = AppStoreConnectContext.Consumer;\n\nexport {Provider, Consumer};\n\nexport default AppStoreConnectContext;\n","import {t} from 'app/locale';\nimport {AppStoreConnectValidationData} from 'app/types/debugFiles';\n\nexport const appStoreConnectAlertMessage = {\n  iTunesSessionInvalid: t(\n    'The iTunes session of your configured App Store Connect needs to be refreshed.'\n  ),\n  appStoreCredentialsInvalid: t(\n    'The credentials of your configured App Store Connect are invalid.'\n  ),\n};\n\nexport function getAppConnectStoreUpdateAlertMessage(\n  appConnectValidationData: AppStoreConnectValidationData\n) {\n  if (appConnectValidationData.promptItunesSession) {\n    return appStoreConnectAlertMessage.iTunesSessionInvalid;\n  }\n  if (appConnectValidationData.appstoreCredentialsValid === false) {\n    return appStoreConnectAlertMessage.appStoreCredentialsInvalid;\n  }\n  return undefined;\n}\n","import {Component, createRef} from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {setActiveProject} from 'app/actionCreators/projects';\nimport {Client} from 'app/api';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MissingProjectMembership from 'app/components/projects/missingProjectMembership';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport MemberListStore from 'app/stores/memberListStore';\nimport ProjectsStore from 'app/stores/projectsStore';\nimport space from 'app/styles/space';\nimport {Organization, Project, User} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProjects from 'app/utils/withProjects';\n\nenum ErrorTypes {\n  MISSING_MEMBERSHIP = 'MISSING_MEMBERSHIP',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype ChildFuncProps = {\n  project: Project;\n};\n\ntype Props = {\n  api: Client;\n  /**\n   * If true, this will not change `state.loading` during `fetchData` phase\n   */\n  skipReload?: boolean;\n  organization: Organization;\n  projects: Project[];\n  projectId: string;\n  orgId: string;\n  children: ((props: ChildFuncProps) => React.ReactNode) | React.ReactNode;\n};\n\ntype State = {\n  memberList: User[];\n  project: Project | null;\n  loading: boolean;\n  error: boolean;\n  errorType: ErrorTypes | null;\n};\n\n/**\n * Higher-order component that sets `project` as a child context\n * value to be accessed by child elements.\n *\n * Additionally delays rendering of children until project XHR has finished\n * and context is populated.\n */\nclass ProjectContext extends Component<Props, State> {\n  static childContextTypes = {\n    project: SentryTypes.Project,\n  };\n\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      loading: true,\n      error: false,\n      errorType: null,\n      memberList: [],\n      project: null,\n    };\n  }\n\n  getChildContext() {\n    return {\n      project: this.state.project,\n    };\n  }\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.projectId === this.props.projectId) {\n      return;\n    }\n\n    if (!nextProps.skipReload) {\n      this.remountComponent();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.projectId !== this.props.projectId) {\n      this.fetchData();\n    }\n\n    // Project list has changed. Likely indicating that a new project has been\n    // added. Re-fetch project details in case that the new project is the active\n    // project.\n    //\n    // For now, only compare lengths. It is possible that project slugs within\n    // the list could change, but it doesn't seem to be broken anywhere else at\n    // the moment that would require deeper checks.\n    if (prevProps.projects.length !== this.props.projects.length) {\n      this.fetchData();\n    }\n\n    // Call forceUpdate() on <DocumentTitle/> if either project or organization\n    // state has changed. This is because <DocumentTitle/>'s shouldComponentUpdate()\n    // returns false unless props differ; meaning context changes for project/org\n    // do NOT trigger renders for <DocumentTitle/> OR any subchildren. The end result\n    // being that child elements that listen for context changes on project/org will\n    // NOT update (without this hack).\n    // See: https://github.com/gaearon/react-document-title/issues/35\n\n    // intentionally shallow comparing references\n    if (prevState.project !== this.state.project) {\n      const docTitle = this.docTitleRef.current;\n      if (!docTitle) {\n        return;\n      }\n      docTitle.forceUpdate();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeMembers();\n    this.unsubscribeProjects();\n  }\n\n  docTitleRef = createRef<DocumentTitle>();\n\n  unsubscribeProjects = ProjectsStore.listen(\n    (projectIds: Set<string>) => this.onProjectChange(projectIds),\n    undefined\n  );\n\n  unsubscribeMembers = MemberListStore.listen(\n    (memberList: typeof MemberListStore['state']) => this.setState({memberList}),\n    undefined\n  );\n\n  remountComponent() {\n    this.setState(this.getInitialState());\n  }\n\n  getTitle() {\n    return this.state.project?.slug ?? 'Sentry';\n  }\n\n  onProjectChange(projectIds: Set<string>) {\n    if (!this.state.project) {\n      return;\n    }\n    if (!projectIds.has(this.state.project.id)) {\n      return;\n    }\n    this.setState({\n      project: {...ProjectsStore.getById(this.state.project.id)} as Project,\n    });\n  }\n\n  identifyProject() {\n    const {projects, projectId} = this.props;\n    const projectSlug = projectId;\n    return projects.find(({slug}) => slug === projectSlug) || null;\n  }\n\n  async fetchData() {\n    const {orgId, projectId, skipReload} = this.props;\n    // we fetch core access/information from the global organization data\n    const activeProject = this.identifyProject();\n    const hasAccess = activeProject && activeProject.hasAccess;\n\n    this.setState((state: State) => ({\n      // if `skipReload` is true, then don't change loading state\n      loading: skipReload ? state.loading : true,\n      // we bind project initially, but it'll rebind\n      project: activeProject,\n    }));\n\n    if (activeProject && hasAccess) {\n      setActiveProject(null);\n      const projectRequest = this.props.api.requestPromise(\n        `/projects/${orgId}/${projectId}/`\n      );\n\n      try {\n        const project = await projectRequest;\n        this.setState({\n          loading: false,\n          project,\n          error: false,\n          errorType: null,\n        });\n\n        // assuming here that this means the project is considered the active project\n        setActiveProject(project);\n      } catch (error) {\n        this.setState({\n          loading: false,\n          error: false,\n          errorType: ErrorTypes.UNKNOWN,\n        });\n      }\n\n      fetchOrgMembers(this.props.api, orgId, [activeProject.id]);\n\n      return;\n    }\n\n    // User is not a memberof the active project\n    if (activeProject && !activeProject.isMember) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.MISSING_MEMBERSHIP,\n      });\n\n      return;\n    }\n\n    // There is no active project. This likely indicates either the project\n    // *does not exist* or the project has not yet been added to the store.\n    // Either way, make a request to check for existence of the project.\n    try {\n      await this.props.api.requestPromise(`/projects/${orgId}/${projectId}/`);\n    } catch (error) {\n      this.setState({\n        loading: false,\n        error: true,\n        errorType: ErrorTypes.PROJECT_NOT_FOUND,\n      });\n    }\n  }\n\n  renderBody() {\n    const {error, errorType, loading, project} = this.state;\n    if (loading) {\n      return (\n        <div className=\"loading-full-layout\">\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    if (!error && project) {\n      const {children} = this.props;\n\n      return typeof children === 'function' ? children({project}) : children;\n    }\n\n    switch (errorType) {\n      case ErrorTypes.PROJECT_NOT_FOUND:\n        // TODO(chrissy): use scale for margin values\n        return (\n          <div className=\"container\">\n            <div className=\"alert alert-block\" style={{margin: '30px 0 10px'}}>\n              {t('The project you were looking for was not found.')}\n            </div>\n          </div>\n        );\n      case ErrorTypes.MISSING_MEMBERSHIP:\n        // TODO(dcramer): add various controls to improve this flow and break it\n        // out into a reusable missing access error component\n        return (\n          <ErrorWrapper>\n            <MissingProjectMembership\n              organization={this.props.organization}\n              projectSlug={project?.slug}\n            />\n          </ErrorWrapper>\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  render() {\n    return (\n      <DocumentTitle ref={this.docTitleRef} title={this.getTitle()}>\n        {this.renderBody()}\n      </DocumentTitle>\n    );\n  }\n}\n\nexport {ProjectContext};\n\nexport default withApi(withOrganization(withProjects(ProjectContext)));\n\nconst ErrorWrapper = styled('div')`\n  width: 100%;\n  margin: ${space(2)} ${space(4)};\n`;\n","import {useContext} from 'react';\n\nimport AppStoreConnectContext from 'app/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'app/types';\nimport withProject from 'app/utils/withProject';\nimport SettingsNavigation from 'app/views/settings/components/settingsNavigation';\nimport getConfiguration from 'app/views/settings/project/navigationConfiguration';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nconst ProjectSettingsNavigation = ({organization, project}: Props) => {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  const debugFilesNeedsReview = !!appStoreConnectContext?.updateAlertMessage;\n\n  return (\n    <SettingsNavigation\n      navigationObjects={getConfiguration({project, organization, debugFilesNeedsReview})}\n      access={new Set(organization.access)}\n      features={new Set(organization.features)}\n      organization={organization}\n      project={project}\n    />\n  );\n};\n\nexport default withProject(ProjectSettingsNavigation);\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as AppStoreConnectContext from 'app/components/projects/appStoreConnectContext';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport ProjectContext from 'app/views/projects/projectContext';\nimport SettingsLayout from 'app/views/settings/components/settingsLayout';\nimport ProjectSettingsNavigation from 'app/views/settings/project/projectSettingsNavigation';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nfunction ProjectSettingsLayout({\n  params,\n  organization,\n  children,\n  routes,\n  ...props\n}: Props) {\n  const {orgId, projectId} = params;\n\n  return (\n    <ProjectContext orgId={orgId} projectId={projectId}>\n      {({project}) => (\n        <AppStoreConnectContext.Provider project={project} organization={organization}>\n          <SettingsLayout\n            params={params}\n            routes={routes}\n            {...props}\n            renderNavigation={() => (\n              <ProjectSettingsNavigation organization={organization} />\n            )}\n          >\n            {children && React.isValidElement(children)\n              ? React.cloneElement(children, {\n                  organization,\n                })\n              : children}\n          </SettingsLayout>\n        </AppStoreConnectContext.Provider>\n      )}\n    </ProjectContext>\n  );\n}\n\nexport default withOrganization(ProjectSettingsLayout);\n"],"names":["AppStoreConnectContext","createContext","undefined","Provider","withApi","api","children","project","organization","projectDetails","setProjectDetails","useState","appStoreConnectValidationData","setAppStoreConnectValidationData","orgSlug","slug","hasAppConnectStoreFeatureFlag","features","includes","useEffect","async","symbolSources","response","requestPromise","fetchProjectDetails","appStoreConnectSymbolSourceId","JSON","parse","find","symbolSource","type","toLowerCase","id","fetchAppStoreConnectValidationData","value","updateAlertMessage","getAppConnectStoreUpdateAlertMessage","Consumer","appStoreConnectAlertMessage","iTunesSessionInvalid","t","appStoreCredentialsInvalid","appConnectValidationData","promptItunesSession","appstoreCredentialsValid","ErrorTypes","ProjectContext","Component","this","getInitialState","createRef","ProjectsStore","projectIds","onProjectChange","MemberListStore","memberList","setState","loading","error","errorType","getChildContext","state","componentWillMount","fetchData","componentWillReceiveProps","nextProps","projectId","props","skipReload","remountComponent","componentDidUpdate","prevProps","prevState","projects","length","docTitle","docTitleRef","current","forceUpdate","componentWillUnmount","unsubscribeMembers","unsubscribeProjects","getTitle","has","identifyProject","projectSlug","orgId","activeProject","hasAccess","setActiveProject","projectRequest","UNKNOWN","fetchOrgMembers","isMember","PROJECT_NOT_FOUND","MISSING_MEMBERSHIP","renderBody","className","style","margin","ErrorWrapper","onRetry","render","ref","title","SentryTypes","withOrganization","withProjects","space","ProjectSettingsNavigation","appStoreConnectContext","useContext","debugFilesNeedsReview","navigationObjects","getConfiguration","access","Set","withProject","ProjectSettingsLayout","params","routes","renderNavigation","React"],"sourceRoot":""}