{"version":3,"file":"chunks/app_views_admin_adminUserEdit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"2jCAiBA,MAAMA,EAA+B,CACnCC,MAAO,eACPC,OAAQ,CACN,CACEC,KAAM,OACNC,KAAM,SACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,SAEX,CACEJ,KAAM,WACNC,KAAM,SACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,YACTC,MAAMD,EAAAA,EAAAA,GAAE,4DAEV,CACEJ,KAAM,QACNC,KAAM,SACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,SACTC,MAAMD,EAAAA,EAAAA,GAAE,oCAEV,CACEJ,KAAM,WACNC,KAAM,UACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,UACTC,MAAMD,EAAAA,EAAAA,GACJ,0GAGJ,CACEJ,KAAM,UACNC,KAAM,UACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,SACTC,MAAMD,EAAAA,EAAAA,GAAE,uEAEV,CACEJ,KAAM,cACNC,KAAM,UACNC,UAAU,EACVC,OAAOC,EAAAA,EAAAA,GAAE,aACTC,MAAMD,EAAAA,EAAAA,GACJ,0FAMFE,EAAsB,CAC1BC,SAASH,EAAAA,EAAAA,GAAE,gBACXI,QAAQJ,EAAAA,EAAAA,GAAE,4BAcZ,MAAMK,UAAwBC,EAAAA,UAA8C,mDAChD,CACxBC,WAAY,aAF4D,wBAK/D,KACTC,KAAKC,MAAMC,SAASF,KAAKG,MAAMJ,YAC/BC,KAAKC,MAAMG,gBAGbC,SACE,MAAM,KAACC,GAAQN,KAAKC,OACd,WAACF,GAAcC,KAAKG,MAE1B,OACE,QAAC,EAAAI,SAAD,YACE,QAAC,IAAD,CACEC,MAAOT,EACPR,OAAOC,EAAAA,EAAAA,GAAE,iBAAkBc,EAAKG,OAChCC,SAAUrB,GAAQW,KAAKW,SAAS,CAACZ,WAAYV,IAC7CuB,QAAS,CACP,CAAC,WAAWpB,EAAAA,EAAAA,GAAE,yBACd,CAAC,UAAUA,EAAAA,EAAAA,GAAE,oDAGjB,QAACqB,EAAD,YACE,QAAC,KAAD,CAAQC,SAAS,SAASC,QAASf,KAAKE,SAAxC,SACGR,EAAoBK,MAEvB,QAAC,KAAD,CAAQgB,QAASf,KAAKC,MAAMG,WAA5B,UAAyCZ,EAAAA,EAAAA,GAAE,mBA7B/CK,EAAAA,YAAAA,kBA0CN,MAAMmB,UAAsBC,EAAAA,EAAwB,yDA+BpCC,GACI,WAAhBA,EAA2BlB,KAAKmB,aAAenB,KAAKoB,oBAhCJ,wBAkCtC,IAAIC,EAAAA,GAjCA,mBACd,MAAM,OAACC,GAAUtB,KAAKC,MACtB,uBAAiBqB,EAAOC,GAAxB,KAGFC,eACE,MAAO,CAAC,CAAC,OAAQxB,KAAKyB,eAGR,mBAAG,YACXzB,KAAK0B,IAAIC,eAAe3B,KAAKyB,aAAc,CAC/CG,OAAQ,SACRC,KAAM,CAACC,YAAY,EAAMC,cAAe,OAG1CC,EAAAA,EAAAA,KAAkBxC,EAAAA,EAAAA,GAAE,iCAAD,UAAmCQ,KAAKG,MAAMG,YAA9C,aAAmC,EAAiBG,QACvEwB,EAAAA,eAAAA,QAAuB,kBAGL,uBAClB,MAAMC,QAAiBlC,KAAK0B,IAAIC,eAAe3B,KAAKyB,aAAc,CAChEG,OAAQ,MACRC,KAAM,CAACM,UAAU,KAGnBnC,KAAKW,SAAS,CAACL,KAAM4B,IACrBlC,KAAKoC,UAAUC,eAAeH,IAC9BF,EAAAA,EAAAA,KAAkBxC,EAAAA,EAAAA,GAAE,qCAAsC0C,EAASzB,QAQrE6B,aACE,MAAM,KAAChC,GAAQN,KAAKG,MAEpB,OAAa,OAATG,EACK,MASP,QAAC,EAAAC,SAAD,YACE,wBAAKf,EAAAA,EAAAA,GAAE,YACP,uBAAIA,EAAAA,EAAAA,GAAE,mBAAoBc,EAAKG,UAC/B,QAAC,IAAD,CACE8B,MAAOvC,KAAKoC,UACZI,YAAalC,EACbmC,UAAU,MACVC,YAAa1C,KAAKyB,aAClBkB,gBAAc,EACdC,cAAeC,EAAAA,GACfC,gBAAiBjB,IACf7B,KAAKW,SAAS,CAACL,KAAMuB,KACrBG,EAAAA,EAAAA,IAAkB,0BAEpBe,aACE,QAAC,KAAD,CACE1D,KAAK,SACL0B,QAvBc,KACtBiC,EAAAA,EAAAA,YAAUC,IACR,QAACpD,EAAD,CAAiBS,KAAMA,EAAMJ,SAAUF,KAAKkD,cAAgBD,MAsBtDE,MAAO,CAACC,YAAYC,EAAAA,EAAAA,GAAM,IAC1BvC,SAAS,SAJX,UAMGtB,EAAAA,EAAAA,GAAE,iBAlBT,UAsBE,QAAC,IAAD,CAAU8D,MAAO,CAACrE,WAO5B,MAAM4B,GAAc,OAAO,MAAP,qBAAH,gDAGHwC,EAAAA,EAAAA,GAAM,GAHH,wFAOSE,GAAKA,EAAEC,MAAMC,QAPtB,KAUjB,K,wSCjNe,MAAMxC,UAGXyC,EAAAA,EACRC,WACE,MAAO,GAGTtD,SACE,MAAMnB,EAAQc,KAAK2D,WACnB,OACE,QAAC,IAAD,CAAezE,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,UAApB,SACGc,KAAK4D,qBAZO3C,EAAAA,YAAAA,a,8mBCiDN,MAAM4C,UAAkBC,EAAAA,UAA8B,mDAKpD,CACbC,WAAW,KANsD,kCAS9C,KACnB,MAAM,UAACA,GAAa/D,KAAKG,MAEzBH,KAAKW,SAAS,CAACoD,WAAYA,OAG7B1D,SACE,MAAM,MACJnB,EADI,OAEJC,EAFI,OAGJ6E,EAHI,SAIJC,EAJI,qBAKJC,EALI,aAMJC,EANI,aAOJC,EAPI,YAQJC,KACGC,GACDtE,KAAKC,OACH,UAAC8D,GAAa/D,KAAKG,MAEzB,OACE,QAAC,KAAD,CAAOoB,GAAqB,iBAAVrC,GAAqBqF,EAAAA,EAAAA,GAAsBrF,QAASsF,EAAtE,UACGtF,IACC,QAAC,KAAD,WACGA,EACAmF,IACC,QAACI,EAAD,CAAU1D,QAASf,KAAK0E,mBAAxB,UACE,QAAC,KAAD,CAAaC,UAAWZ,EAAY,OAAS,KAAMa,KAAK,aAK9Db,IACA,QAAC,IAAD,WAC2B,mBAAjBK,GAA+BA,EAAa,CAAClF,MAAAA,EAAOC,OAAAA,IAE3DA,EAAO0F,KAAIC,IACV,GAAqB,mBAAVA,EACT,OAAOA,IAGT,MAAOC,aAAcC,KAAMC,GAA4BH,EASvD,OALiB,IAAbb,IACFgB,EAAyBhB,UAAW,EACpCgB,EAAyBC,oBAAiBV,IAI1C,QAAC,IAAD,CACER,OAAQA,EACRC,SAAUA,KAENK,KACAJ,EACJY,MAAOG,EACPE,YAAanF,KAAKC,MAAMkF,cAAX,WAA+BL,EAAM1F,OAJ7C0F,EAAM1F,SAQQ,mBAAjB+E,GAA+BA,EAAa,CAACjF,MAAAA,EAAOC,OAAAA,WAvEnD0E,EAAAA,YAAAA,a,OAAAA,EAAAA,eACiB,CAClCK,qBAAsB,KA6E1B,MAAMO,GAAW,OAAO,OAAP,qBAAH,0C,moBCrGd,MAAMW,UAAiBtB,EAAAA,UAA8B,yDACpC,CAEbqB,YAAW,UAAEnF,KAAKC,MAAMoF,gBAAb,aAAE,EAAqBC,OAGpCC,oBACEvF,KAAKwF,eAGPC,iCAAiCC,GAC/B,GAAI1F,KAAKC,MAAMoF,SAASC,OAASI,EAAUL,SAASC,KAAM,CACxD,MAAMA,EAAOI,EAAUL,SAASC,KAChCtF,KAAKwF,aAAaF,GAClBtF,KAAKW,SAAS,CAACwE,YAAaG,KAIhCE,aAAaG,GAAuB,MAElC,MAAML,EAAOK,IAAM,UAAI3F,KAAKC,MAAMoF,gBAAf,aAAI,EAAqBC,MAE5C,GAAKA,EAOL,IACEM,GAAAA,EAAgBrB,EAAAA,EAAAA,GAAsBsB,mBAAmBP,IAAQ,CAC/DQ,MAAO,SACPC,QAAS,MAEX,MAAOC,GACPC,EAAAA,GAAwBD,IAI5BE,kBAAkB/G,GAChB,MAAMgH,EAAwBhH,EAAOiH,QACnCtB,GAA0B,mBAAVA,IAAwBuB,EAAAA,EAAAA,IAAQvB,MAAAA,OAAD,EAACA,EAAOwB,WAGzD,GAAInH,EAAOoH,SAAWJ,EAAsBI,OAAQ,CAClD,MAAM,qBAACrC,KAAyBjE,GAASD,KAAKC,MAS9C,OAP2BkG,EAAsBK,OAAM1B,GACxB,mBAAlBA,EAAMwB,SACPxB,EAAMwB,QAAQ,IAAIrG,KAAUiE,KAE9BY,EAAMwB,UAMlB,OAAO,EAGTG,YAAW,OACTtH,EADS,eAETuH,EAFS,MAGTxH,IAiBA,OAF0Bc,KAAKkG,kBAAkB/G,IAI9CuH,MAAAA,GAAAA,EAAgBvC,cAChBuC,MAAAA,GAAAA,EAAgBtC,cAKZ,QAAC,IAAD,CAAWlF,MAAOA,EAAOC,OAAQA,KAAYuH,IAH3C,KAMXrG,SACE,MAAM,OACJ2D,EADI,YAEJK,EAFI,OAGJlF,EAHI,MAIJD,EAJI,MAKJoE,EALI,SAMJW,EANI,SAOJ0C,EAPI,qBAQJzC,EARI,aASJC,EATI,aAUJC,EACAiB,SAAUuB,KACPtC,GACDtE,KAAKC,MAEHyG,EAAiB,CACrB1C,OAAAA,EACAC,SAAAA,EACA0C,SAAAA,EACAzC,qBAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAe,YAAanF,KAAKG,MAAMgF,YACxBd,YAAAA,GAGF,OACE,kBAASC,EAAT,eACoB,IAAVhB,GACNA,EAAMuB,KAAI,CAACgC,EAAWC,KACpB,QAAC,WAAD,UACG9G,KAAKyG,WAAW,CAACC,eAAAA,KAAmBG,KADlBC,UAIP,IAAVxD,QACY,IAAXnE,GACPa,KAAKyG,WAAW,CAACtH,OAAAA,EAAQuH,eAAAA,EAAgBxH,MAAAA,QAhI7CkG,EAAAA,YAAAA,WAsIN,SAAe2B,EAAAA,EAAAA,YAAW3B","sources":["webpack:///./app/views/admin/adminUserEdit.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps, openModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {User} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst userEditForm: JsonFormObject = {\n  title: 'User details',\n  fields: [\n    {\n      name: 'name',\n      type: 'string',\n      required: true,\n      label: t('Name'),\n    },\n    {\n      name: 'username',\n      type: 'string',\n      required: true,\n      label: t('Username'),\n      help: t('The username is the unique id of the user in the system'),\n    },\n    {\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: t('Email'),\n      help: t('The users primary email address'),\n    },\n    {\n      name: 'isActive',\n      type: 'boolean',\n      required: true,\n      label: t('Active'),\n      help: t(\n        'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'\n      ),\n    },\n    {\n      name: 'isStaff',\n      type: 'boolean',\n      required: true,\n      label: t('Admin'),\n      help: t('Designates whether this user can perform administrative functions.'),\n    },\n    {\n      name: 'isSuperuser',\n      type: 'boolean',\n      required: true,\n      label: t('Superuser'),\n      help: t(\n        'Designates whether this user has all permissions without explicitly assigning them.'\n      ),\n    },\n  ],\n};\n\nconst REMOVE_BUTTON_LABEL = {\n  disable: t('Disable User'),\n  delete: t('Permanently Delete User'),\n};\n\ntype DeleteType = 'disable' | 'delete';\n\ntype RemoveModalProps = ModalRenderProps & {\n  user: User;\n  onRemove: (type: DeleteType) => void;\n};\n\ntype RemoveModalState = {\n  deleteType: DeleteType;\n};\n\nclass RemoveUserModal extends Component<RemoveModalProps, RemoveModalState> {\n  state: RemoveModalState = {\n    deleteType: 'disable',\n  };\n\n  onRemove = () => {\n    this.props.onRemove(this.state.deleteType);\n    this.props.closeModal();\n  };\n\n  render() {\n    const {user} = this.props;\n    const {deleteType} = this.state;\n\n    return (\n      <Fragment>\n        <RadioGroup\n          value={deleteType}\n          label={t('Remove user %s', user.email)}\n          onChange={type => this.setState({deleteType: type})}\n          choices={[\n            ['disable', t('Disable the account.')],\n            ['delete', t('Permanently remove the user and their data.')],\n          ]}\n        />\n        <ModalFooter>\n          <Button priority=\"danger\" onClick={this.onRemove}>\n            {REMOVE_BUTTON_LABEL[deleteType]}\n          </Button>\n          <Button onClick={this.props.closeModal}>{t('Cancel')}</Button>\n        </ModalFooter>\n      </Fragment>\n    );\n  }\n}\n\ntype Props = AsyncView['props'] & RouteComponentProps<{id: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  user: User | null;\n};\n\nclass AdminUserEdit extends AsyncView<Props, State> {\n  get userEndpoint() {\n    const {params} = this.props;\n    return `/users/${params.id}/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['user', this.userEndpoint]];\n  }\n\n  async deleteUser() {\n    await this.api.requestPromise(this.userEndpoint, {\n      method: 'DELETE',\n      data: {hardDelete: true, organizations: []},\n    });\n\n    addSuccessMessage(t(\"%s's account has been deleted.\", this.state.user?.email));\n    browserHistory.replace('/manage/users/');\n  }\n\n  async deactivateUser() {\n    const response = await this.api.requestPromise(this.userEndpoint, {\n      method: 'PUT',\n      data: {isActive: false},\n    });\n\n    this.setState({user: response});\n    this.formModel.setInitialData(response);\n    addSuccessMessage(t(\"%s's account has been deactivated.\", response.email));\n  }\n\n  removeUser = (actionTypes: DeleteType) =>\n    actionTypes === 'delete' ? this.deleteUser() : this.deactivateUser();\n\n  formModel = new FormModel();\n\n  renderBody() {\n    const {user} = this.state;\n\n    if (user === null) {\n      return null;\n    }\n\n    const openDeleteModal = () =>\n      openModal(opts => (\n        <RemoveUserModal user={user} onRemove={this.removeUser} {...opts} />\n      ));\n\n    return (\n      <Fragment>\n        <h3>{t('Users')}</h3>\n        <p>{t('Editing user: %s', user.email)}</p>\n        <Form\n          model={this.formModel}\n          initialData={user}\n          apiMethod=\"PUT\"\n          apiEndpoint={this.userEndpoint}\n          requireChanges\n          onSubmitError={addErrorMessage}\n          onSubmitSuccess={data => {\n            this.setState({user: data});\n            addSuccessMessage('User account updated.');\n          }}\n          extraButton={\n            <Button\n              type=\"button\"\n              onClick={openDeleteModal}\n              style={{marginLeft: space(1)}}\n              priority=\"danger\"\n            >\n              {t('Remove User')}\n            </Button>\n          }\n        >\n          <JsonForm forms={[userEditForm]} />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nconst ModalFooter = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  justify-content: end;\n  padding: 20px 30px;\n  margin: 20px -30px -30px;\n  border-top: 1px solid ${p => p.theme.border};\n`;\n\nexport default AdminUserEdit;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"names":["userEditForm","title","fields","name","type","required","label","t","help","REMOVE_BUTTON_LABEL","disable","delete","RemoveUserModal","Component","deleteType","this","props","onRemove","state","closeModal","render","user","Fragment","value","email","onChange","setState","choices","ModalFooter","priority","onClick","AdminUserEdit","AsyncView","actionTypes","deleteUser","deactivateUser","FormModel","params","id","getEndpoints","userEndpoint","api","requestPromise","method","data","hardDelete","organizations","addSuccessMessage","browserHistory","response","isActive","formModel","setInitialData","renderBody","model","initialData","apiMethod","apiEndpoint","requireChanges","onSubmitError","addErrorMessage","onSubmitSuccess","extraButton","openModal","opts","removeUser","style","marginLeft","space","forms","p","theme","border","AsyncComponent","getTitle","renderComponent","FormPanel","React","collapsed","access","disabled","additionalFieldProps","renderFooter","renderHeader","collapsible","otherProps","sanitizeQuerySelector","undefined","Collapse","handleToggleEvents","direction","size","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","features","_location","formGroup","i","withRouter"],"sourceRoot":""}