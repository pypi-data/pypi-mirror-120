{"version":3,"file":"chunks/app_views_organizationIntegrations_pluginDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yZAmBA,MAAMA,EAAS,EACbC,WAAAA,EACAC,KAAAA,EAAO,KACPC,SAAAA,EACAC,iBAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,OAAAA,EACAC,GAAAA,EACAC,KAAAA,EACAC,UAAAA,MAEA,QAACC,EAAD,CACEC,IAAKX,EACLO,GAAIA,EACJC,KAAMA,EACNI,KAAK,SACLH,UAAWA,EACXI,QAASR,OAAaS,EAAYR,EAClCS,KAAK,WACL,eAAcb,EACdE,UAAWA,EACXC,WAAYA,EACZH,SAAUA,EACVD,KAAMA,EACN,eAAa,SAbf,UAeE,QAACe,EAAD,CACEX,WAAYA,EACZH,SAAUA,EACVC,iBAAkBA,EAClBF,KAAMA,MA/BNF,EAAAA,YAAAA,SAsCN,MAAMkB,EAAWC,GAA8B,OAAXA,EAAEjB,KAAgB,GAAK,GACrDkB,EAAiBD,GAAkBD,EAAQC,IAAiB,OAAXA,EAAEjB,KAAgB,EAAI,IACvEmB,EAAgBF,GAA8B,OAAXA,EAAEjB,KAAgB,EAAI,EACzDoB,EAAiBH,GACrBA,EAAEhB,SAAWkB,EAAaF,GAAKD,EAAQC,GAAKE,EAAaF,GAErDR,GAAe,OAAO,SAAP,qBAAH,oEAIIQ,GAAKA,EAAEI,MAAMC,QAJjB,0GAQNL,GAAMA,EAAEd,WAAac,EAAEb,WAAa,cAAgB,WAR9C,oBASEa,GAAMA,EAAEd,WAAac,EAAEb,WAAa,OAAS,MAT/C,WAUNY,EAVM,aAWPC,GAAkB,EAAbD,EAAQC,IAXN,oBAYCD,EAZD,iDAiBEC,GAAKA,EAAEI,MAAMC,QAjBf,0FA2BZP,GAAS,OAAO,OAAP,qBAAH,mFAKHI,EALG,2BAMcC,EANd,aAODF,EAPC,aAQAA,EARA,kBASID,GACZA,EAAEhB,UAAYgB,EAAEf,iBAAmBe,EAAEI,MAAME,OAASN,EAAEI,MAAMC,QAVpD,aAWCL,GAAMA,EAAEb,WAAa,GAAM,MAX5B,KAcZ,EAAeoB,EAAAA,YAA2C,CAACC,EAAOf,KAChE,QAACZ,EAAD,IAAY2B,EAAO1B,WAAYW,O,4dCxFjC,MAAMgB,UAA+BC,EAAAA,UACnCC,SACE,MAAM,aAACC,EAAD,OAAeC,GAAUC,KAAKN,MAGpC,IAAKK,EAAOE,gBACV,OAAO,QAAC,WAAD,IAET,MAAMC,EAAWH,EAAOI,eAAiB,cAAgB,eACnDC,EAAa,aAAH,OAAgBN,EAAaO,KAA7B,YAAqCH,EAArC,YAAiDH,EAAOO,sBAAxD,KAEhB,OACE,yBACE,QAAC,IAAD,CAAO1B,KAAK,UAAU2B,MAAM,QAAC,KAAD,CAAatC,KAAK,OAA9C,WACE,2EAAkD8B,EAAOE,gBAAzD,gDACA,QAACO,EAAD,CACEC,KAAI,UAAKL,EAAL,sDACJnC,KAAK,SACLY,QAAS,KACP6B,EAAAA,EAAAA,IAA0B,mCAAoC,CAC5DC,iBAAkB,SAClBC,YAAab,EAAOM,KACpBP,aAAAA,IAPN,UAWGe,EAAAA,EAAAA,GAAE,uBA1BTlB,EAAAA,YAAAA,yBAkCN,MAAMa,GAAmB,OAAOM,EAAAA,GAAP,sBAAH,UACX5B,GAAKA,EAAEI,MAAMyB,SADF,iBAKtB,K,gmCCvBO,MAAMC,UAAwBpB,EAAAA,UAAiB,2DAgBrCqB,MAAOC,EAAcC,EAA4B,UAC9D,MAAM,aAACrB,EAAD,YAAesB,EAAf,OAA4BrB,GAAUC,KAAKN,YAE3CM,KAAKN,MAAM2B,IAAIC,eAAf,oBACSxB,EAAaO,KADtB,YAC8Be,EAAYG,YAD1C,oBACiExB,EAAOxB,GADxE,KAEJ,CACE4C,OAAAA,EACAD,KAAAA,QAvB8C,wCA4BzBD,MAAAA,IACrBO,QACIxB,KAAKyB,aAAa,CAACD,QAAAA,UAEnBxB,KAAKyB,aAAa,GAAI,cAhCoB,2BAoCtCR,UACZ,KACES,EAAAA,EAAAA,KAAkBb,EAAAA,EAAAA,GAAE,sBACdb,KAAKyB,aAAa,CAACE,OAAO,KAChCC,EAAAA,EAAAA,KAAkBf,EAAAA,EAAAA,GAAE,8BACpBb,KAAKN,MAAMmC,qBAAqB7B,KAAK8B,WACrC9B,KAAKN,MAAMgB,0BAA0B,oCACrC,MAAOqB,IACPC,EAAAA,EAAAA,KAAgBnB,EAAAA,EAAAA,GAAE,wCA5C8B,oCAgD7B,KACrBb,KAAKN,MAAMgB,0BAA0B,sCAjDa,kCAoD/BO,MAAOa,EAAmBG,GAAkB,KAC/D,KACEP,EAAAA,EAAAA,KAAkBb,EAAAA,EAAAA,GAAE,sBACdb,KAAKkC,yBAAyBD,IACpCL,EAAAA,EAAAA,IACEK,GAASpB,EAAAA,EAAAA,GAAE,+BAAgCA,EAAAA,EAAAA,GAAE,gCAE/Cb,KAAKN,MAAMyC,2BAA2BL,EAAWG,GACjDjC,KAAKN,MAAMgB,0BACTuB,EAAS,uBAAyB,yBAEpC,MAAOF,IACPC,EAAAA,EAAAA,IACEC,GACIpB,EAAAA,EAAAA,GAAE,oCACFA,EAAAA,EAAAA,GAAE,yCAlEC,gBACX,OAAOb,KAAKN,MAAM0B,YAAYU,UAEhCM,oBACE,OACE,QAAC,EAAAC,SAAD,WACE,QAAC,IAAD,CAAOzD,KAAK,QAAQ2B,MAAM,QAAC,KAAD,CAAUtC,KAAK,OAAzC,UACG4C,EAAAA,EAAAA,GACC,+GA+DS,sBAEjB,MAAM,YAACO,GAAepB,KAAKN,MAC3B,MAAO,CACLW,KAAMe,EAAYG,YAClBe,SAAUlB,EAAYmB,gBAAkBnB,EAAYmB,qBAAkBzD,GAI1Ee,SACE,MAAM,UAACpB,EAAD,OAAYsB,EAAZ,aAAoBD,EAApB,YAAkCsB,GAAepB,KAAKN,MAC5D,OACE,QAAC8C,EAAD,WACE,QAAC,IAAD,CAAQC,OAAQ,CAAC,oBAAjB,SACG,EAAEC,UAAAA,MACD,QAACC,EAAD,CAAiBlE,UAAWA,EAA5B,WACE,QAACmE,EAAD,WACE,QAAC,IAAD,CAAcC,QAAS7C,KAAK8C,qBAE9B,yBAEI,QAACC,EAAD,CACEC,YAAU,EACVzC,MAAM,QAAC,KAAD,IACN0C,UAAWP,EACXQ,GAAE,oBAAepD,EAAaO,KAA5B,qBAA6Ce,EAAYG,YAAzD,oBAAgFxB,EAAOxB,GAAvF,KACF,eAAa,+BALf,UAOGsC,EAAAA,EAAAA,GAAE,kBAIT,yBACE,QAAC,IAAD,CACEsC,SAAS,SACTC,aAAcpD,KAAKqD,qBACnBJ,UAAWP,EACXY,YAAY,sBACZC,UAAW,IAAMvD,KAAKwD,cACtBC,QAASzD,KAAKoC,oBANhB,UAQE,QAACW,EAAD,CACEE,UAAWP,EACXM,YAAU,EACVzC,MAAM,QAAC,KAAD,IACN,eAAa,4BAJf,UAMGM,EAAAA,EAAAA,GAAE,oBAIT,QAAC,IAAD,CACE3C,SAAUkD,EAAYI,QACtBlD,OAAQ,IACN0B,KAAK0D,mBAAmBtC,EAAYU,WAAYV,EAAYI,SAE9DnD,YAAaqE,YAhIhB1B,EAAAA,YAAAA,kBA0Ib,SAAe2C,EAAAA,EAAAA,GAAQ3C,GAEjBwB,GAAY,OAAO,MAAP,qBAAH,YACFoB,EAAAA,EAAAA,GAAM,GADJ,sBAEO1E,GAAKA,EAAEI,MAAMC,QAFpB,yCAIOL,GAAKA,EAAEI,MAAMuE,YAJpB,0CAOgB3E,GAAKA,EAAEI,MAAMC,QAP7B,MAWTwD,GAAe,OAAOjC,EAAAA,GAAP,qBAAH,UACP5B,GAAKA,EAAEI,MAAMwE,SADN,KAIZnB,GAAkB,OAAO,MAAP,qBAAH,0DAKfC,GAAqB,OAAO,MAAP,qBAAH,mG,2EC3KxB,MAAMmB,UAA2BC,EAAAA,EAG/B,uEAwC4BlC,IAE1B,MAAMmC,EAAcjE,KAAKD,OAAOkE,YAAYC,QAEtCC,EAAQF,EAAYG,WAAUC,GAAQA,EAAKvC,YAAcA,IAE3DqC,EAAQ,IAIZF,EAAYK,OAAOH,EAAO,GAE1BnE,KAAKuE,SAAS,CACZC,QAAS,CAAC,IAAIxE,KAAKyE,MAAMD,QAAQ,GAAIP,YAAAA,WArDzC,wCAyD2B,CAACnC,EAAmB4C,GAAkB,KAE/D,MAAMT,EAAcjE,KAAKD,OAAOkE,YAAYC,QAEtCC,EAAQF,EAAYG,WAAUC,GAAQA,EAAKvC,YAAcA,IAE3DqC,EAAQ,IAKZF,EAAYE,GAAS,IAChBF,EAAYE,GACf3C,QAASkD,GAIX1E,KAAKuE,SAAS,CACZC,QAAS,CAAC,IAAIxE,KAAKyE,MAAMD,QAAQ,GAAIP,YAAAA,WA3EzC,kCA+EqB,KACnB,MAAMlE,EAASC,KAAKD,QACd,aAACD,EAAD,OAAe6E,GAAU3E,KAAKN,MACpCM,KAAKU,0BAA0B,8CAC/BkE,EAAMC,WACJC,IACE,QAAC,IAAD,IACMA,EACJC,SAAQ,oBAAejF,EAAaO,KAA5B,wCAAgEN,EAAOxB,GAAvE,KACRyG,aAAW,EACXC,SAAS,EACTC,SAAUC,IACRL,EAAWM,aACXT,EAAOU,KAAKF,OAIlB,CAACG,iBAAiB,OA/FtBC,eACE,MAAM,MAACC,EAAD,gBAAQC,GAAmBzF,KAAKN,MAAMgG,OAC5C,MAAO,CACL,CAAC,UAAD,yBAA8BF,EAA9B,qCAAgEC,KAIjD,sBACjB,MAAO,SAGC,aACR,OAAOzF,KAAKyE,MAAMD,QAAQ,GAGb,kBACb,OAAOxE,KAAKD,OAAO4F,aAAe,GAG1B,aAAG,MACX,iBAAO3F,KAAKD,OAAO6F,cAAnB,aAAO,EAAoBpH,KAGZ,oBACf,OAAOwB,KAAKD,OAAO8F,eAAiB,GAGhB,yBACpB,OAAO7F,KAAKD,OAAOkE,YAAY6B,OAAS,EAAI,YAAc,gBAGzC,sBACjB,gBAAU9F,KAAKD,OAAOvB,MAAtB,OAA6BwB,KAAKD,OAAOgG,SAAW,YAAc,IAGrD,kBACb,OAAO/F,KAAKD,OAAOiG,oBA+DrBC,cAAcC,GAEZ,MAAY,mBAARA,EACK,yBAEF,WAGTC,gBAAgBC,EAA+BC,GAC7C,OAAIA,GAEA,QAACC,EAAD,CACE,eAAa,iBACbrD,SAAUmD,EACVvH,QAASmB,KAAKuG,mBACdtI,KAAK,QACLkF,SAAS,UALX,UAOGtC,EAAAA,EAAAA,GAAE,oBAKFb,KAAKwG,iCAGdC,uBACE,MAAM1G,EAASC,KAAKD,QACd,aAACD,GAAgBE,KAAKN,MAE5B,OAAIK,EAAOkE,YAAY6B,QAEnB,QAAC,EAAAzD,SAAD,YACE,QAAC,IAAD,CAAwBvC,aAAcA,EAAcC,OAAQA,KAC5D,wBACGA,EAAOkE,YAAYyC,KAAKtF,IACvB,QAAC,EAAD,CAEEtB,aAAcA,EACdC,OAAQA,EACRqB,YAAaA,EACbS,qBAAsB7B,KAAK2G,yBAC3BxE,2BAA4BnC,KAAK4G,yBACjClG,0BAA2BV,KAAKU,2BAN3BU,EAAYU,kBAatB9B,KAAK6G,6BAIhB,MAAMP,GAAY,OAAOxF,EAAAA,GAAP,sBAAH,kBACI8C,EAAAA,EAAAA,GAAM,GADV,KAIf,GAAekD,EAAAA,EAAAA,GAAiB/C","sources":["webpack:///./app/components/switchButton.tsx","webpack:///./app/views/organizationIntegrations/pluginDeprecationAlert.tsx","webpack:///./app/views/organizationIntegrations/installedPlugin.tsx","webpack:///./app/views/organizationIntegrations/pluginDetailedView.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  forwardRef?: React.Ref<HTMLButtonElement>;\n  className?: string;\n  id?: string;\n  name?: string;\n  size?: 'sm' | 'lg';\n  isActive?: boolean;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  toggle: React.HTMLProps<HTMLButtonElement>['onClick'];\n};\n\nconst Switch = ({\n  forwardRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n}: Props) => (\n  <SwitchButton\n    ref={forwardRef}\n    id={id}\n    name={name}\n    type=\"button\"\n    className={className}\n    onClick={isDisabled ? undefined : toggle}\n    role=\"checkbox\"\n    aria-checked={isActive}\n    isLoading={isLoading}\n    isDisabled={isDisabled}\n    isActive={isActive}\n    size={size}\n    data-test-id=\"switch\"\n  >\n    <Toggle\n      isDisabled={isDisabled}\n      isActive={isActive}\n      forceActiveColor={forceActiveColor}\n      size={size}\n    />\n  </SwitchButton>\n);\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 6 : 10);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 2 : 4);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  transition: 0.15s border ease;\n  cursor: ${p => (p.isLoading || p.isDisabled ? 'not-allowed' : 'pointer')};\n  pointer-events: ${p => (p.isLoading || p.isDisabled ? 'none' : null)};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 2}px;\n  border-radius: ${getSize}px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: ${p => p.theme.border};\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default React.forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardRef={ref} />\n));\n","import React, {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, PluginWithProjectList} from 'app/types';\nimport {trackIntegrationAnalytics} from 'app/utils/integrationUtil';\n\ntype Props = {\n  organization: Organization;\n  plugin: PluginWithProjectList;\n};\n\ntype State = {};\n\nclass PluginDeprecationAlert extends Component<Props, State> {\n  render() {\n    const {organization, plugin} = this.props;\n\n    // Short-circuit if not deprecated.\n    if (!plugin.deprecationDate) {\n      return <React.Fragment />;\n    }\n    const resource = plugin.altIsSentryApp ? 'sentry-apps' : 'integrations';\n    const upgradeUrl = `/settings/${organization.slug}/${resource}/${plugin.firstPartyAlternative}/`;\n\n    return (\n      <div>\n        <Alert type=\"warning\" icon={<IconWarning size=\"sm\" />}>\n          <span>{`This integration is being deprecated on ${plugin.deprecationDate}. Please upgrade to avoid any disruption.`}</span>\n          <UpgradeNowButton\n            href={`${upgradeUrl}?tab=configurations&referrer=directory_upgrade_now`}\n            size=\"xsmall\"\n            onClick={() =>\n              trackIntegrationAnalytics('integrations.resolve_now_clicked', {\n                integration_type: 'plugin',\n                integration: plugin.slug,\n                organization,\n              })\n            }\n          >\n            {t('Upgrade Now')}\n          </UpgradeNowButton>\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst UpgradeNowButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  float: right;\n`;\n\nexport default PluginDeprecationAlert;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport Switch from 'app/components/switchButton';\nimport {IconDelete, IconFlag, IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {AvatarProject, Organization, PluginNoProject, PluginProjectItem} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/analytics/integrationAnalyticsEvents';\nimport withApi from 'app/utils/withApi';\n\nexport type Props = {\n  api: Client;\n  plugin: PluginNoProject;\n  projectItem: PluginProjectItem;\n  organization: Organization;\n  onResetConfiguration: (projectId: string) => void;\n  onPluginEnableStatusChange: (projectId: string, status: boolean) => void;\n  trackIntegrationAnalytics: (eventKey: IntegrationAnalyticsKey) => void; // analytics callback\n  className?: string;\n};\n\nexport class InstalledPlugin extends Component<Props> {\n  get projectId() {\n    return this.props.projectItem.projectId;\n  }\n  getConfirmMessage() {\n    return (\n      <Fragment>\n        <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n          {t(\n            'Deleting this installation will disable the integration for this project and remove any configurations.'\n          )}\n        </Alert>\n      </Fragment>\n    );\n  }\n\n  pluginUpdate = async (data: object, method: 'POST' | 'DELETE' = 'POST') => {\n    const {organization, projectItem, plugin} = this.props;\n    // no try/catch so the caller will have to have it\n    await this.props.api.requestPromise(\n      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,\n      {\n        method,\n        data,\n      }\n    );\n  };\n\n  updatePluginEnableStatus = async (enabled: boolean) => {\n    if (enabled) {\n      await this.pluginUpdate({enabled});\n    } else {\n      await this.pluginUpdate({}, 'DELETE');\n    }\n  };\n\n  handleReset = async () => {\n    try {\n      addLoadingMessage(t('Removing...'));\n      await this.pluginUpdate({reset: true});\n      addSuccessMessage(t('Configuration was removed'));\n      this.props.onResetConfiguration(this.projectId);\n      this.props.trackIntegrationAnalytics('integrations.uninstall_completed');\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove configuration'));\n    }\n  };\n\n  handleUninstallClick = () => {\n    this.props.trackIntegrationAnalytics('integrations.uninstall_clicked');\n  };\n\n  toggleEnablePlugin = async (projectId: string, status: boolean = true) => {\n    try {\n      addLoadingMessage(t('Enabling...'));\n      await this.updatePluginEnableStatus(status);\n      addSuccessMessage(\n        status ? t('Configuration was enabled.') : t('Configuration was disabled.')\n      );\n      this.props.onPluginEnableStatusChange(projectId, status);\n      this.props.trackIntegrationAnalytics(\n        status ? 'integrations.enabled' : 'integrations.disabled'\n      );\n    } catch (_err) {\n      addErrorMessage(\n        status\n          ? t('Unable to enable configuration.')\n          : t('Unable to disable configuration.')\n      );\n    }\n  };\n\n  get projectForBadge(): AvatarProject {\n    // this function returns the project as needed for the ProjectBadge component\n    const {projectItem} = this.props;\n    return {\n      slug: projectItem.projectSlug,\n      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,\n    };\n  }\n\n  render() {\n    const {className, plugin, organization, projectItem} = this.props;\n    return (\n      <Container>\n        <Access access={['org:integrations']}>\n          {({hasAccess}) => (\n            <IntegrationFlex className={className}>\n              <IntegrationItemBox>\n                <ProjectBadge project={this.projectForBadge} />\n              </IntegrationItemBox>\n              <div>\n                {\n                  <StyledButton\n                    borderless\n                    icon={<IconSettings />}\n                    disabled={!hasAccess}\n                    to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}\n                    data-test-id=\"integration-configure-button\"\n                  >\n                    {t('Configure')}\n                  </StyledButton>\n                }\n              </div>\n              <div>\n                <Confirm\n                  priority=\"danger\"\n                  onConfirming={this.handleUninstallClick}\n                  disabled={!hasAccess}\n                  confirmText=\"Delete Installation\"\n                  onConfirm={() => this.handleReset()}\n                  message={this.getConfirmMessage()}\n                >\n                  <StyledButton\n                    disabled={!hasAccess}\n                    borderless\n                    icon={<IconDelete />}\n                    data-test-id=\"integration-remove-button\"\n                  >\n                    {t('Uninstall')}\n                  </StyledButton>\n                </Confirm>\n              </div>\n              <Switch\n                isActive={projectItem.enabled}\n                toggle={() =>\n                  this.toggleEnablePlugin(projectItem.projectId, !projectItem.enabled)\n                }\n                isDisabled={!hasAccess}\n              />\n            </IntegrationFlex>\n          )}\n        </Access>\n      </Container>\n    );\n  }\n}\n\nexport default withApi(InstalledPlugin);\n\nconst Container = styled('div')`\n  padding: ${space(2)};\n  border: 1px solid ${p => p.theme.border};\n  border-bottom: none;\n  background-color: ${p => p.theme.background};\n\n  &:last-child {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IntegrationFlex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IntegrationItemBox = styled('div')`\n  flex: 1;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  min-width: 0;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport * as modal from 'app/actionCreators/modal';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport ContextPickerModal from 'app/components/contextPickerModal';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {PluginProjectItem, PluginWithProjectList} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';\nimport InstalledPlugin from './installedPlugin';\nimport PluginDeprecationAlert from './pluginDeprecationAlert';\n\ntype State = {\n  plugins: PluginWithProjectList[];\n};\n\ntype Tab = AbstractIntegrationDetailedView['state']['tab'];\n\nclass PluginDetailedView extends AbstractIntegrationDetailedView<\n  AbstractIntegrationDetailedView['props'],\n  State & AbstractIntegrationDetailedView['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, integrationSlug} = this.props.params;\n    return [\n      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${integrationSlug}`],\n    ];\n  }\n\n  get integrationType() {\n    return 'plugin' as const;\n  }\n\n  get plugin() {\n    return this.state.plugins[0];\n  }\n\n  get description() {\n    return this.plugin.description || '';\n  }\n\n  get author() {\n    return this.plugin.author?.name;\n  }\n\n  get resourceLinks() {\n    return this.plugin.resourceLinks || [];\n  }\n\n  get installationStatus() {\n    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';\n  }\n\n  get integrationName() {\n    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;\n  }\n\n  get featureData() {\n    return this.plugin.featureDescriptions;\n  }\n\n  handleResetConfiguration = (projectId: string) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n    // remove from array\n    projectList.splice(index, 1);\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handlePluginEnableStatus = (projectId: string, enable: boolean = true) => {\n    // make a copy of our project list\n    const projectList = this.plugin.projectList.slice();\n    // find the index of the project\n    const index = projectList.findIndex(item => item.projectId === projectId);\n    // should match but quit if it doesn't\n    if (index < 0) {\n      return;\n    }\n\n    // update item in array\n    projectList[index] = {\n      ...projectList[index],\n      enabled: enable,\n    };\n\n    // update state\n    this.setState({\n      plugins: [{...this.state.plugins[0], projectList}],\n    });\n  };\n\n  handleAddToProject = () => {\n    const plugin = this.plugin;\n    const {organization, router} = this.props;\n    this.trackIntegrationAnalytics('integrations.plugin_add_to_project_clicked');\n    modal.openModal(\n      modalProps => (\n        <ContextPickerModal\n          {...modalProps}\n          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}\n          needProject\n          needOrg={false}\n          onFinish={path => {\n            modalProps.closeModal();\n            router.push(path);\n          }}\n        />\n      ),\n      {allowClickClose: false}\n    );\n  };\n\n  getTabDisplay(tab: Tab) {\n    // we want to show project configurations to make it more clear\n    if (tab === 'configurations') {\n      return 'project configurations';\n    }\n    return 'overview';\n  }\n\n  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {\n    if (userHasAccess) {\n      return (\n        <AddButton\n          data-test-id=\"install-button\"\n          disabled={disabledFromFeatures}\n          onClick={this.handleAddToProject}\n          size=\"small\"\n          priority=\"primary\"\n        >\n          {t('Add to Project')}\n        </AddButton>\n      );\n    }\n\n    return this.renderRequestIntegrationButton();\n  }\n\n  renderConfigurations() {\n    const plugin = this.plugin;\n    const {organization} = this.props;\n\n    if (plugin.projectList.length) {\n      return (\n        <Fragment>\n          <PluginDeprecationAlert organization={organization} plugin={plugin} />\n          <div>\n            {plugin.projectList.map((projectItem: PluginProjectItem) => (\n              <InstalledPlugin\n                key={projectItem.projectId}\n                organization={organization}\n                plugin={plugin}\n                projectItem={projectItem}\n                onResetConfiguration={this.handleResetConfiguration}\n                onPluginEnableStatusChange={this.handlePluginEnableStatus}\n                trackIntegrationAnalytics={this.trackIntegrationAnalytics}\n              />\n            ))}\n          </div>\n        </Fragment>\n      );\n    }\n    return this.renderEmptyConfigurations();\n  }\n}\n\nconst AddButton = styled(Button)`\n  margin-bottom: ${space(1)};\n`;\n\nexport default withOrganization(PluginDetailedView);\n"],"names":["Switch","forwardRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","SwitchButton","ref","type","onClick","undefined","role","Toggle","getSize","p","getToggleSize","getToggleTop","getTranslateX","theme","border","active","React","props","PluginDeprecationAlert","Component","render","organization","plugin","this","deprecationDate","resource","altIsSentryApp","upgradeUrl","slug","firstPartyAlternative","icon","UpgradeNowButton","href","trackIntegrationAnalytics","integration_type","integration","t","Button","subText","InstalledPlugin","async","data","method","projectItem","api","requestPromise","projectSlug","enabled","pluginUpdate","addLoadingMessage","reset","addSuccessMessage","onResetConfiguration","projectId","_err","addErrorMessage","status","updatePluginEnableStatus","onPluginEnableStatusChange","getConfirmMessage","Fragment","platform","projectPlatform","Container","access","hasAccess","IntegrationFlex","IntegrationItemBox","project","projectForBadge","StyledButton","borderless","disabled","to","priority","onConfirming","handleUninstallClick","confirmText","onConfirm","handleReset","message","toggleEnablePlugin","withApi","space","background","gray300","PluginDetailedView","AbstractIntegrationDetailedView","projectList","slice","index","findIndex","item","splice","setState","plugins","state","enable","router","modal","openModal","modalProps","nextPath","needProject","needOrg","onFinish","path","closeModal","push","allowClickClose","getEndpoints","orgId","integrationSlug","params","description","author","resourceLinks","length","isHidden","featureDescriptions","getTabDisplay","tab","renderTopButton","disabledFromFeatures","userHasAccess","AddButton","handleAddToProject","renderRequestIntegrationButton","renderConfigurations","map","handleResetConfiguration","handlePluginEnableStatus","renderEmptyConfigurations","withOrganization"],"sourceRoot":""}