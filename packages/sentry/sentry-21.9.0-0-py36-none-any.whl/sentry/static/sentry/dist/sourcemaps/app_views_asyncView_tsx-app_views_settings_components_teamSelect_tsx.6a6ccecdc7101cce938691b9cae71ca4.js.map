{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/idBadge/teamBadge/index.tsx","webpack:///./app/views/settings/components/teamSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\n\nimport Badge from './badge';\n\ntype Props = React.ComponentProps<typeof Badge>;\n\ntype State = {\n  team: Team;\n};\n\nclass TeamBadgeContainer extends React.Component<Props, State> {\n  state: State = {team: this.props.team};\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.state.team === nextProps.team) {\n      return;\n    }\n\n    if (isEqual(this.state.team, nextProps.team)) {\n      return;\n    }\n\n    this.setState({team: nextProps.team});\n  }\n\n  componentWillUnmount() {\n    this.unlistener?.();\n  }\n\n  unlistener = TeamStore.listen(\n    (team: Set<string>) => this.onTeamStoreUpdate(team),\n    undefined\n  );\n\n  onTeamStoreUpdate(updatedTeam: Set<string>) {\n    if (!updatedTeam.has(this.state.team.id)) {\n      return;\n    }\n\n    const team = TeamStore.getById(this.state.team.id);\n    if (!team || isEqual(team.avatar, this.state.team.avatar)) {\n      return;\n    }\n\n    this.setState({team});\n  }\n\n  render() {\n    return <Badge {...this.props} team={this.state.team} />;\n  }\n}\n\nexport default TeamBadgeContainer;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport TeamBadge from 'app/components/idBadge/teamBadge';\nimport Link from 'app/components/links/link';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {DEFAULT_DEBOUNCE_DURATION, TEAMS_PER_PAGE} from 'app/constants';\nimport {IconSubtract} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Teams that are already selected.\n   */\n  selectedTeams: Team[];\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (team: Team) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n};\n\ntype State = {\n  loading: boolean;\n  teamsSearch: null | Team[];\n};\n\nclass TeamSelect extends React.Component<Props, State> {\n  state: State = {\n    loading: true,\n    teamsSearch: null,\n  };\n\n  componentDidMount() {\n    this.fetchTeams();\n  }\n\n  fetchTeams = debounce(async (query?: string) => {\n    const {api, organization} = this.props;\n    const teamsSearch = await api.requestPromise(\n      `/organizations/${organization.slug}/teams/`,\n      {\n        query: {query, per_page: TEAMS_PER_PAGE},\n      }\n    );\n    this.setState({teamsSearch, loading: false});\n  }, DEFAULT_DEBOUNCE_DURATION);\n\n  handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({loading: true});\n    this.fetchTeams(event.target.value);\n  };\n\n  handleAddTeam = (option: Item) => {\n    const team = this.state.teamsSearch?.find(tm => tm.slug === option.value);\n    if (team) {\n      this.props.onAddTeam(team);\n    }\n  };\n\n  handleRemove = (teamSlug: string) => {\n    this.props.onRemoveTeam(teamSlug);\n  };\n\n  renderTeamAddDropDown() {\n    const {disabled, selectedTeams, menuHeader} = this.props;\n    const {teamsSearch} = this.state;\n    const isDisabled = disabled;\n\n    let options: Item[] = [];\n    if (teamsSearch === null || teamsSearch.length === 0) {\n      options = [];\n    } else {\n      options = teamsSearch\n        .filter(\n          team => !selectedTeams.some(selectedTeam => selectedTeam.slug === team.slug)\n        )\n        .map((team, index) => ({\n          index,\n          value: team.slug,\n          searchKey: team.slug,\n          label: <DropdownTeamBadge avatarSize={18} team={team} />,\n        }));\n    }\n\n    return (\n      <DropdownAutoComplete\n        items={options}\n        busyItemsStillVisible={this.state.loading}\n        onChange={this.handleQueryUpdate}\n        onSelect={this.handleAddTeam}\n        emptyMessage={t('No teams')}\n        menuHeader={menuHeader}\n        disabled={isDisabled}\n        alignMenu=\"right\"\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            aria-label={t('Add Team')}\n            isOpen={isOpen}\n            size=\"xsmall\"\n            disabled={isDisabled}\n          >\n            {t('Add Team')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  renderBody() {\n    const {organization, selectedTeams, disabled, confirmLastTeamRemoveMessage} =\n      this.props;\n\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n    const confirmMessage =\n      selectedTeams.length === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return selectedTeams.map(team => (\n      <TeamRow\n        key={team.slug}\n        orgId={organization.slug}\n        team={team}\n        onRemove={this.handleRemove}\n        disabled={disabled}\n        confirmMessage={confirmMessage}\n      />\n    ));\n  }\n\n  render() {\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          {t('Team')}\n          {this.renderTeamAddDropDown()}\n        </PanelHeader>\n\n        <PanelBody>{this.renderBody()}</PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype TeamRowProps = {\n  orgId: string;\n  team: Team;\n  onRemove: Props['onRemoveTeam'];\n  disabled: boolean;\n  confirmMessage: string | null;\n};\n\nconst TeamRow = ({orgId, team, onRemove, disabled, confirmMessage}: TeamRowProps) => (\n  <TeamPanelItem>\n    <StyledLink to={`/settings/${orgId}/teams/${team.slug}/`}>\n      <TeamBadge team={team} />\n    </StyledLink>\n    <Confirm\n      message={confirmMessage}\n      bypass={!confirmMessage}\n      onConfirm={() => onRemove(team.slug)}\n      disabled={disabled}\n    >\n      <Button\n        size=\"xsmall\"\n        icon={<IconSubtract isCircled size=\"xs\" />}\n        disabled={disabled}\n      >\n        {t('Remove')}\n      </Button>\n    </Confirm>\n  </TeamPanelItem>\n);\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(TeamSelect);\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","TeamBadgeContainer","React","team","props","TeamStore","onTeamStoreUpdate","undefined","UNSAFE_componentWillReceiveProps","nextProps","state","isEqual","setState","componentWillUnmount","unlistener","updatedTeam","has","id","avatar","TeamSelect","loading","teamsSearch","debounce","async","api","organization","requestPromise","slug","query","per_page","TEAMS_PER_PAGE","DEFAULT_DEBOUNCE_DURATION","event","fetchTeams","target","value","option","find","tm","onAddTeam","teamSlug","onRemoveTeam","componentDidMount","renderTeamAddDropDown","disabled","selectedTeams","menuHeader","isDisabled","options","length","filter","some","selectedTeam","map","index","searchKey","label","DropdownTeamBadge","avatarSize","items","busyItemsStillVisible","onChange","handleQueryUpdate","onSelect","handleAddTeam","emptyMessage","t","alignMenu","isOpen","size","renderBody","confirmLastTeamRemoveMessage","confirmMessage","TeamRow","orgId","onRemove","handleRemove","hasButtons","TeamPanelItem","StyledLink","to","message","bypass","onConfirm","icon","isCircled","TeamBadge","p","theme","fontSizeMedium","PanelItem","space","Link","withApi"],"sourceRoot":""}