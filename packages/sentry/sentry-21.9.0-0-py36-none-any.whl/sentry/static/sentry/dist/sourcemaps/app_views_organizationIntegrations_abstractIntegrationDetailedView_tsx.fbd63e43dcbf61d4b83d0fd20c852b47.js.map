{"version":3,"file":"chunks/app_views_organizationIntegrations_abstractIntegrationDetailedView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/marked.tsx","webpack:///./app/views/organizationIntegrations/integrationRequest/RequestIntegrationModal.tsx","webpack:///./app/views/organizationIntegrations/integrationRequest/RequestIntegrationButton.tsx","webpack:///./app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx","webpack:///./app/views/settings/components/forms/controls/textarea.tsx","webpack:///./app/views/settings/components/forms/textareaField.tsx"],"sourcesContent":["import dompurify from 'dompurify';\nimport marked from 'marked'; // eslint-disable-line no-restricted-imports\n\nimport {IS_ACCEPTANCE_TEST, NODE_ENV} from 'app/constants';\n\n// Only https and mailto, (e.g. no javascript, vbscript, data protocols)\nconst safeLinkPattern = /^(https?:|mailto:)/i;\n\nconst safeImagePattern = /^https?:\\/\\/./i;\n\nfunction isSafeHref(href: string, pattern: RegExp) {\n  try {\n    return pattern.test(decodeURIComponent(unescape(href)));\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Implementation of marked.Renderer which additonally sanitizes URLs.\n */\nclass SafeRenderer extends marked.Renderer {\n  link(href: string, title: string, text: string) {\n    // For a bad link, just return the plain text href\n    if (!isSafeHref(href, safeLinkPattern)) {\n      return href;\n    }\n\n    const out = `<a href=\"${href}\"${title ? ` title=\"${title}\"` : ''}>${text}</a>`;\n    return dompurify.sanitize(out);\n  }\n\n  image(href: string, title: string, text: string) {\n    // For a bad image, return an empty string\n    if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {\n      return '';\n    }\n\n    return `<img src=\"${href}\" alt=\"${text}\"${title ? ` title=\"${title}\"` : ''} />`;\n  }\n}\n\nclass NoParagraphRenderer extends SafeRenderer {\n  paragraph(text: string) {\n    return text;\n  }\n}\n\nmarked.setOptions({\n  renderer: new SafeRenderer(),\n  sanitize: true,\n\n  // Silence sanitize deprecation warning in test / ci (CI sets NODE_NV\n  // to production, but specifies `CI`).\n  //\n  // [!!] This has the side effect of causing failed markdown content to render\n  //      as a html error, instead of throwing an exception, however none of\n  //      our tests are rendering failed markdown so this is likely a safe\n  //      tradeoff to turn off off the deprecation warning.\n  silent: !!IS_ACCEPTANCE_TEST || NODE_ENV === 'test',\n});\n\nconst sanitizedMarked = (...args: Parameters<typeof marked>) =>\n  dompurify.sanitize(marked(...args));\n\nconst singleLineRenderer = (text: string, options: marked.MarkedOptions = {}) =>\n  sanitizedMarked(text, {...options, renderer: new NoParagraphRenderer()});\n\nexport {singleLineRenderer};\nexport default sanitizedMarked;\n","import {Fragment} from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport {trackIntegrationAnalytics} from 'app/utils/integrationUtil';\nimport TextareaField from 'app/views/settings/components/forms/textareaField';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport RequestIntegrationButton from './RequestIntegrationButton';\n\ntype Props = {\n  onSuccess: () => void;\n} & RequestIntegrationButton['props'] &\n  ModalRenderProps &\n  AsyncComponent['props'];\ntype State = {\n  isSending: boolean;\n  message: string;\n} & AsyncComponent['state'];\n\n/**\n * This modal serves as a non-owner's confirmation step before sending\n * organization owners an email requesting a new organization integration. It\n * lets the user attach an optional message to be included in the email.\n */\nexport default class RequestIntegrationModal extends AsyncComponent<Props, State> {\n  state: State = {\n    ...this.getDefaultState(),\n    isSending: false,\n    message: '',\n  };\n\n  sendRequest = () => {\n    const {organization, slug, type} = this.props;\n    const {message} = this.state;\n\n    trackIntegrationAnalytics('integrations.request_install', {\n      integration_type: type,\n      integration: slug,\n      organization,\n    });\n\n    const endpoint = `/organizations/${organization.slug}/integration-requests/`;\n    this.api.request(endpoint, {\n      method: 'POST',\n      data: {\n        providerSlug: slug,\n        providerType: type,\n        message,\n      },\n      success: this.handleSubmitSuccess,\n      error: this.handleSubmitError,\n    });\n  };\n\n  handleSubmitSuccess = () => {\n    const {closeModal, onSuccess} = this.props;\n\n    addSuccessMessage(t('Request successfully sent.'));\n    this.setState({isSending: false});\n    onSuccess();\n    closeModal();\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Error sending the request');\n    this.setState({isSending: false});\n  };\n\n  render() {\n    const {Header, Body, Footer, name} = this.props;\n\n    const buttonText = this.state.isSending ? t('Sending Request') : t('Send Request');\n\n    return (\n      <Fragment>\n        <Header>\n          <h4>{t('Request %s Installation', name)}</h4>\n        </Header>\n        <Body>\n          <TextBlock>\n            {t(\n              'Looks like your organization owner, manager, or admin needs to install %s. Want to send them a request?',\n              name\n            )}\n          </TextBlock>\n          <TextBlock>\n            {t(\n              '(Optional) You’ve got good reasons for installing the %s Integration. Share them with your organization owner.',\n              name\n            )}\n          </TextBlock>\n          <TextareaField\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            name=\"message\"\n            type=\"string\"\n            onChange={value => this.setState({message: value})}\n            placeholder={t('Optional message…')}\n          />\n          <TextBlock>\n            {t(\n              'When you click “Send Request”, we’ll email your request to your organization’s owners. So just keep that in mind.'\n            )}\n          </TextBlock>\n        </Body>\n        <Footer>\n          <Button onClick={this.sendRequest}>{buttonText}</Button>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {IntegrationType, Organization} from 'app/types';\n\nimport RequestIntegrationModal from './RequestIntegrationModal';\n\ntype Props = {\n  organization: Organization;\n  name: string;\n  slug: string;\n  type: IntegrationType;\n};\ntype State = {\n  isOpen: boolean;\n  isSent: boolean;\n};\n\nexport default class RequestIntegrationButton extends Component<Props, State> {\n  state: State = {\n    isOpen: false,\n    isSent: false,\n  };\n\n  openRequestModal() {\n    this.setState({isOpen: true});\n    openModal(\n      renderProps => (\n        <RequestIntegrationModal\n          {...this.props}\n          {...renderProps}\n          onSuccess={() => this.setState({isSent: true})}\n        />\n      ),\n      {\n        onClose: () => this.setState({isOpen: false}),\n      }\n    );\n  }\n\n  render() {\n    const {isOpen, isSent} = this.state;\n\n    let buttonText;\n    if (isOpen) {\n      buttonText = t('Requesting Installation');\n    } else if (isSent) {\n      buttonText = t('Installation Requested');\n    } else {\n      buttonText = t('Request Installation');\n    }\n\n    return (\n      <StyledRequestIntegrationButton\n        data-test-id=\"request-integration-button\"\n        disabled={isOpen || isSent}\n        onClick={() => this.openRequestModal()}\n        priority=\"primary\"\n        size=\"small\"\n      >\n        {buttonText}\n      </StyledRequestIntegrationButton>\n    );\n  }\n}\n\nconst StyledRequestIntegrationButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel} from 'app/components/panels';\nimport Tag from 'app/components/tag';\nimport Tooltip from 'app/components/tooltip';\nimport {IconClose, IconDocs, IconGeneric, IconGithub, IconProject} from 'app/icons';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport space from 'app/styles/space';\nimport {\n  IntegrationFeature,\n  IntegrationInstallationStatus,\n  IntegrationType,\n  Organization,\n} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  IntegrationAnalyticsKey,\n  IntegrationEventParameters,\n} from 'app/utils/analytics/integrationAnalyticsEvents';\nimport {\n  getCategories,\n  getIntegrationFeatureGate,\n  trackIntegrationAnalytics,\n} from 'app/utils/integrationUtil';\nimport marked, {singleLineRenderer} from 'app/utils/marked';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport RequestIntegrationButton from './integrationRequest/RequestIntegrationButton';\nimport IntegrationStatus from './integrationStatus';\n\ntype Tab = 'overview' | 'configurations';\n\ntype AlertType = React.ComponentProps<typeof Alert> & {\n  text: string;\n  feature?: string;\n};\n\ntype State = {\n  tab: Tab;\n} & AsyncComponent['state'];\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; integrationSlug: string}, {}> &\n  AsyncComponent['props'];\n\nclass AbstractIntegrationDetailedView<\n  P extends Props = Props,\n  S extends State = State\n> extends AsyncComponent<P, S> {\n  tabs: Tab[] = ['overview', 'configurations'];\n\n  componentDidMount() {\n    const {location} = this.props;\n    const value = location.query.tab === 'configurations' ? 'configurations' : 'overview';\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({tab: value});\n  }\n\n  onLoadAllEndpointsSuccess() {\n    this.trackIntegrationAnalytics('integrations.integration_viewed', {\n      integration_tab: this.state.tab,\n    });\n  }\n\n  /**\n   * Abstract methods defined below\n   */\n\n  // The analytics type used in analytics which is snake case\n  get integrationType(): IntegrationType {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get description(): string {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get author(): string | undefined {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get alerts(): AlertType[] {\n    // default is no alerts\n    return [];\n  }\n\n  // Returns a list of the resources displayed at the bottom of the overview card\n  get resourceLinks(): Array<{title: string; url: string}> {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get installationStatus(): IntegrationInstallationStatus | null {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  get integrationName(): string {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  // Returns an array of RawIntegrationFeatures which is used in feature gating\n  // and displaying what the integration does\n  get featureData(): IntegrationFeature[] {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  getIcon(title: string) {\n    switch (title) {\n      case 'View Source':\n        return <IconProject />;\n      case 'Report Issue':\n        return <IconGithub />;\n      case 'Documentation':\n      case 'Splunk Setup Instructions':\n      case 'Trello Setup Instructions':\n        return <IconDocs />;\n      default:\n        return <IconGeneric />;\n    }\n  }\n\n  onTabChange = (value: Tab) => {\n    this.trackIntegrationAnalytics('integrations.integration_tab_clicked', {\n      integration_tab: value,\n    });\n    this.setState({tab: value});\n  };\n\n  // Returns the string that is shown as the title of a tab\n  getTabDisplay(tab: Tab): string {\n    // default is return the tab\n    return tab;\n  }\n\n  // Render the button at the top which is usually just an installation button\n  renderTopButton(\n    _disabledFromFeatures: boolean, // from the feature gate\n    _userHasAccess: boolean // from user permissions\n  ): React.ReactElement {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  // Returns the permission descriptions, only use by Sentry Apps\n  renderPermissions(): React.ReactElement | null {\n    // default is don't render permissions\n    return null;\n  }\n\n  renderEmptyConfigurations() {\n    return (\n      <Panel>\n        <EmptyMessage\n          title={t(\"You haven't set anything up yet\")}\n          description={t(\n            'But that doesn’t have to be the case for long! Add an installation to get started.'\n          )}\n          action={this.renderAddInstallButton(true)}\n        />\n      </Panel>\n    );\n  }\n\n  // Returns the list of configurations for the integration\n  renderConfigurations() {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Actually implemented methods below\n   */\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  // Wrapper around trackIntegrationAnalytics that automatically provides many fields and the org\n  trackIntegrationAnalytics = <T extends IntegrationAnalyticsKey>(\n    eventKey: IntegrationAnalyticsKey,\n    options?: Partial<IntegrationEventParameters[T]>\n  ) => {\n    options = options || {};\n    // If we use this intermediate type we get type checking on the things we care about\n    const params = {\n      view: 'integrations_directory_integration_detail',\n      integration: this.integrationSlug,\n      integration_type: this.integrationType,\n      already_installed: this.installationStatus !== 'Not Installed', // pending counts as installed here\n      organization: this.props.organization,\n      ...options,\n    };\n    trackIntegrationAnalytics(eventKey, params);\n  };\n\n  // Returns the props as needed by the hooks integrations:feature-gates\n  get featureProps() {\n    const {organization} = this.props;\n    const featureData = this.featureData;\n\n    // Prepare the features list\n    const features = featureData.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    return {organization, features};\n  }\n\n  cleanTags() {\n    return getCategories(this.featureData);\n  }\n\n  renderRequestIntegrationButton() {\n    return (\n      <RequestIntegrationButton\n        organization={this.props.organization}\n        name={this.integrationName}\n        slug={this.integrationSlug}\n        type={this.integrationType}\n      />\n    );\n  }\n\n  renderAddInstallButton(hideButtonIfDisabled = false) {\n    const {organization} = this.props;\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    return (\n      <IntegrationDirectoryFeatures {...this.featureProps}>\n        {({disabled, disabledReason}) => (\n          <DisableWrapper>\n            <Access organization={organization} access={['org:integrations']}>\n              {({hasAccess}) => (\n                <Tooltip\n                  title={t(\n                    'You must be an organization owner, manager or admin to install this.'\n                  )}\n                  disabled={hasAccess}\n                >\n                  {!hideButtonIfDisabled && disabled ? (\n                    <div />\n                  ) : (\n                    this.renderTopButton(disabled, hasAccess)\n                  )}\n                </Tooltip>\n              )}\n            </Access>\n            {disabled && <DisabledNotice reason={disabledReason} />}\n          </DisableWrapper>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  // Returns the content shown in the top section of the integration detail\n  renderTopSection() {\n    const tags = this.cleanTags();\n\n    return (\n      <Flex>\n        <PluginIcon pluginId={this.integrationSlug} size={50} />\n        <NameContainer>\n          <Flex>\n            <Name>{this.integrationName}</Name>\n            <StatusWrapper>\n              {this.installationStatus && (\n                <IntegrationStatus status={this.installationStatus} />\n              )}\n            </StatusWrapper>\n          </Flex>\n          <Flex>\n            {tags.map(feature => (\n              <StyledTag key={feature}>{startCase(feature)}</StyledTag>\n            ))}\n          </Flex>\n        </NameContainer>\n        {this.renderAddInstallButton()}\n      </Flex>\n    );\n  }\n\n  // Returns the tabs divider with the clickable tabs\n  renderTabs() {\n    // TODO: Convert to styled component\n    return (\n      <ul className=\"nav nav-tabs border-bottom\" style={{paddingTop: '30px'}}>\n        {this.tabs.map(tabName => (\n          <li\n            key={tabName}\n            className={this.state.tab === tabName ? 'active' : ''}\n            onClick={() => this.onTabChange(tabName)}\n          >\n            <CapitalizedLink>{t(this.getTabDisplay(tabName))}</CapitalizedLink>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  // Returns the information about the integration description and features\n  renderInformationCard() {\n    const {IntegrationDirectoryFeatureList} = getIntegrationFeatureGate();\n\n    return (\n      <React.Fragment>\n        <Flex>\n          <FlexContainer>\n            <Description dangerouslySetInnerHTML={{__html: marked(this.description)}} />\n            <IntegrationDirectoryFeatureList\n              {...this.featureProps}\n              provider={{key: this.props.params.integrationSlug}}\n            />\n            {this.renderPermissions()}\n            {this.alerts.map((alert, i) => {\n              return (\n                (defined(alert.feature)\n                  ? this.props.organization.features.includes(alert.feature)\n                  : true) && (\n                  <Alert key={i} type={alert.type} icon={alert.icon}>\n                    <span\n                      dangerouslySetInnerHTML={{__html: singleLineRenderer(alert.text)}}\n                    />\n                  </Alert>\n                )\n              );\n            })}\n          </FlexContainer>\n          <Metadata>\n            {!!this.author && (\n              <AuthorInfo>\n                <CreatedContainer>{t('Created By')}</CreatedContainer>\n                <div>{this.author}</div>\n              </AuthorInfo>\n            )}\n            {this.resourceLinks.map(({title, url}) => (\n              <ExternalLinkContainer key={url}>\n                {this.getIcon(title)}\n                <ExternalLink href={url}>{t(title)}</ExternalLink>\n              </ExternalLinkContainer>\n            ))}\n          </Metadata>\n        </Flex>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        {this.renderTopSection()}\n        {this.renderTabs()}\n        {this.state.tab === 'overview'\n          ? this.renderInformationCard()\n          : this.renderConfigurations()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n`;\n\nconst FlexContainer = styled('div')`\n  flex: 1;\n`;\n\nconst CapitalizedLink = styled('a')`\n  text-transform: capitalize;\n`;\n\nconst StyledTag = styled(Tag)`\n  text-transform: none;\n  &:not(:first-child) {\n    margin-left: ${space(0.5)};\n  }\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: ${space(2)};\n`;\n\nconst Name = styled('div')`\n  font-weight: bold;\n  font-size: 1.4em;\n  margin-bottom: ${space(1)};\n`;\n\nconst IconCloseCircle = styled(IconClose)`\n  color: ${p => p.theme.red300};\n  margin-right: ${space(1)};\n`;\n\nconst DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (\n  <div\n    style={{\n      display: 'flex',\n      alignItems: 'center',\n    }}\n    {...p}\n  >\n    <IconCloseCircle isCircled />\n    <span>{reason}</span>\n  </div>\n))`\n  padding-top: ${space(0.5)};\n  font-size: 0.9em;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst Description = styled('div')`\n  font-size: 1.5rem;\n  line-height: 2.1rem;\n  margin-bottom: ${space(2)};\n\n  li {\n    margin-bottom: 6px;\n  }\n`;\n\nconst Metadata = styled(Flex)`\n  display: grid;\n  grid-auto-rows: max-content;\n  grid-auto-flow: row;\n  grid-gap: ${space(2)};\n  font-size: 0.9em;\n  margin-left: ${space(4)};\n  margin-right: 100px;\n`;\n\nconst AuthorInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst ExternalLinkContainer = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StatusWrapper = styled('div')`\n  margin-bottom: ${space(1)};\n  padding-left: ${space(2)};\n  line-height: 1.5em;\n`;\n\nconst DisableWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst CreatedContainer = styled('div')`\n  text-transform: uppercase;\n  padding-bottom: ${space(1)};\n  color: ${p => p.theme.gray300};\n  font-weight: 600;\n  font-size: 12px;\n`;\n\nexport default AbstractIntegrationDetailedView;\n","import * as React from 'react';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\n\ntype InputProps = Omit<Parameters<typeof inputStyles>[0], 'theme'>;\ntype Props = Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'css'> &\n  InputProps & {\n    /**\n     * Enable autosizing of the textarea.\n     */\n    autosize?: boolean;\n    /**\n     * Number of rows to default to.\n     */\n    rows?: number;\n    /**\n     * Max number of rows to default to.\n     */\n    maxRows?: number;\n  };\n\nconst TextAreaControl = React.forwardRef(function TextAreaControl(\n  {autosize, rows, maxRows, ...p}: Props,\n  ref: React.Ref<HTMLTextAreaElement>\n) {\n  return autosize ? (\n    <TextareaAutosize {...p} async ref={ref} rows={rows ? rows : 2} maxRows={maxRows} />\n  ) : (\n    <textarea ref={ref} {...p} />\n  );\n});\n\nTextAreaControl.displayName = 'TextAreaControl';\n\nconst propFilter = (p: string) =>\n  ['autosize', 'rows', 'maxRows'].includes(p) || isPropValid(p);\n\nconst TextArea = styled(TextAreaControl, {shouldForwardProp: propFilter})`\n  ${inputStyles};\n  min-height: 40px;\n  padding: calc(${space(1)} - 1px) ${space(1)};\n  line-height: 1.5em;\n  ${p =>\n    p.autosize &&\n    `\n      height: auto;\n      padding: calc(${space(1)} - 2px) ${space(1)};\n      line-height: 1.6em;\n    `}\n`;\n\nexport default TextArea;\n","import * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport Textarea from 'app/views/settings/components/forms/controls/textarea';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = Omit<InputField['props'], 'field'> &\n  Pick<\n    React.ComponentProps<typeof Textarea>,\n    'monospace' | 'autosize' | 'rows' | 'maxRows'\n  >;\n\nexport default function TextareaField({monospace, rows, autosize, ...props}: Props) {\n  return (\n    <InputField\n      {...props}\n      field={fieldProps => (\n        <Textarea\n          {...{monospace, rows, autosize}}\n          {...omit(fieldProps, ['onKeyDown', 'children'])}\n        />\n      )}\n    />\n  );\n}\n"],"names":["safeLinkPattern","safeImagePattern","isSafeHref","href","pattern","test","decodeURIComponent","unescape","SafeRenderer","marked","link","title","text","out","dompurify","image","this","options","sanitize","NoParagraphRenderer","paragraph","renderer","silent","IS_ACCEPTANCE_TEST","NODE_ENV","sanitizedMarked","args","singleLineRenderer","RequestIntegrationModal","AsyncComponent","getDefaultState","isSending","message","organization","slug","type","props","state","trackIntegrationAnalytics","integration_type","integration","endpoint","api","request","method","data","providerSlug","providerType","success","handleSubmitSuccess","error","handleSubmitError","closeModal","onSuccess","addSuccessMessage","t","setState","addErrorMessage","render","Header","Body","Footer","name","buttonText","Fragment","inline","flexibleControlStateSize","stacked","onChange","value","placeholder","onClick","sendRequest","RequestIntegrationButton","Component","isOpen","isSent","openRequestModal","openModal","renderProps","onClose","StyledRequestIntegrationButton","disabled","priority","size","Button","space","AbstractIntegrationDetailedView","integration_tab","tab","eventKey","params","view","integrationSlug","integrationType","already_installed","installationStatus","componentDidMount","location","query","onLoadAllEndpointsSuccess","Error","getIcon","getTabDisplay","renderTopButton","_disabledFromFeatures","_userHasAccess","renderPermissions","renderEmptyConfigurations","description","action","renderAddInstallButton","renderConfigurations","features","featureData","map","f","featureGate","FeatureListItem","dangerouslySetInnerHTML","__html","cleanTags","getCategories","renderRequestIntegrationButton","integrationName","hideButtonIfDisabled","IntegrationDirectoryFeatures","getIntegrationFeatureGate","featureProps","disabledReason","DisableWrapper","access","hasAccess","DisabledNotice","reason","renderTopSection","tags","Flex","pluginId","NameContainer","Name","StatusWrapper","status","feature","StyledTag","startCase","renderTabs","className","style","paddingTop","tabs","tabName","onTabChange","CapitalizedLink","renderInformationCard","IntegrationDirectoryFeatureList","FlexContainer","Description","provider","key","alerts","alert","i","defined","includes","icon","Metadata","author","AuthorInfo","CreatedContainer","resourceLinks","url","ExternalLinkContainer","renderBody","Tag","IconCloseCircle","IconClose","p","theme","red300","display","alignItems","isCircled","gray300","TextAreaControl","React","autosize","rows","maxRows","ref","async","displayName","shouldForwardProp","isPropValid","inputStyles","TextareaField","monospace","field","fieldProps","omit"],"sourceRoot":""}