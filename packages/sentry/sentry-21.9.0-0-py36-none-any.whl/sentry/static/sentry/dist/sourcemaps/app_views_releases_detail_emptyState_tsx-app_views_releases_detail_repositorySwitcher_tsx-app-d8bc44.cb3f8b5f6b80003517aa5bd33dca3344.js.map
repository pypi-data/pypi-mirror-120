{"version":3,"file":"chunks/app_views_releases_detail_emptyState_tsx-app_views_releases_detail_repositorySwitcher_tsx-app-d8bc44.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uRAEA,Q,MAAeA,GAAAA,cAAqB,CAClC,oBACA,mBACA,wBACA,6B,4DCGa,SAASC,EACtBC,GAEA,MAAO,CAELC,OAAQ,CAAC,OAAQ,WACdD,G,6bCUA,MAAME,EAA2E,CACtFC,YAAaC,EAAAA,EACbC,MAAO,CACLC,aAASC,EACTC,kBAAcD,EACdE,yBAAqBF,EACrBG,uBAAmBH,GAGrBI,OACEC,KAAKC,qBAGPA,oBACED,KAAKP,MAAQ,CACXC,aAASC,EACTC,kBAAcD,EACdE,yBAAqBF,EACrBG,uBAAmBH,GAErBK,KAAKE,QAAQF,KAAKP,QAGpBU,iBAAiBT,GACfM,KAAKP,MAAQ,CACXC,QAAAA,EACAE,aAAcF,IAAYM,KAAKP,MAAMC,QAAUM,KAAKP,MAAMG,kBAAeD,EACzEE,qBAAqB,EACrBC,uBAAmBH,GAErBK,KAAKE,QAAQF,KAAKP,QAGpBW,sBAAsBC,GACpBL,KAAKP,MAAQ,IACRO,KAAKP,MACRG,kBAAcD,EACdE,qBAAqB,EACrBC,kBAAmBO,GAErBL,KAAKE,QAAQF,KAAKP,QAGpBa,wBAAwBC,GACtBP,KAAKP,MAAQ,IACRO,KAAKP,MACRG,aAAcW,EACdV,qBAAqB,EACrBC,uBAAmBH,GAErBK,KAAKE,QAAQF,KAAKP,QAGpBe,MACE,MAAO,IAAIR,KAAKP,SAOpB,EAHwBP,IAAAA,YAAmBI,G,0IC/D3C,MAAMmB,EAA+B,CACnCb,kBAAcD,EACdE,yBAAqBF,EACrBG,uBAAmBH,GAiErB,EA9DA,SACEe,GAEA,MAAMC,UAAyBC,EAAAA,UAG7BC,YAAYzB,EAA2B0B,GACrCC,MAAM3B,EAAO0B,IADsC,0BAyBvCE,EAAAA,QAAuB,IAAMhB,KAAKiB,sBAAiBtB,IAtB/D,MAAM,aAACuB,GAAgBlB,KAAKZ,MACtBM,EAAUwB,EAAaC,KACvBC,EAAWJ,EAAAA,MAEbI,EAAS1B,UAAYA,GACvB2B,EAAAA,EAAAA,oBAGFrB,KAAKP,MACH2B,EAAS1B,UAAYA,EACjB,IAAIe,KAAkBW,GACtB,IAAIX,GAGZa,oBAGEtB,KAAKuB,oBAEPC,uBACExB,KAAKyB,cAIPF,oBACE,MAAM,IAACG,EAAD,aAAMR,GAAgBlB,KAAKZ,MAC3BM,EAAUwB,EAAaC,KACvBC,EAAWJ,EAAAA,QAMbI,EAASxB,eAAiBwB,EAASvB,qBACrCuB,EAAStB,oBC1DV,SAAyB4B,EAAaC,GAC3C,MAAM,QAACjC,GAAWiC,EACZC,EAAO,kBAAH,OAAqBlC,EAArB,WAMVsB,EAAAA,MAAAA,qBAA4C,EAC5CK,EAAAA,EAAAA,iBAAmC3B,GAE5BgC,EACJG,eAAeD,EAAM,CACpBE,OAAQ,QAETC,MAAMC,IACLX,EAAAA,EAAAA,wBAA0CW,MAE3CC,OAAM5B,IACLgB,EAAAA,EAAAA,sBAAwChB,GACxC6B,EAAAA,IAAiBC,IACfA,EAAMC,SAASF,EAAAA,EAAAA,SACfC,EAAME,eAAe,CAAC,mCACtBH,EAAAA,GAAwB7B,SDqCxBiC,CAAgBZ,EAAK,CAAChC,QAAAA,IAI1BuB,gBACE,MAAMG,EAAWJ,EAAAA,MACjBhB,KAAKuC,SAAS,IAAInB,IAGpBoB,SACE,OAAO,QAAC9B,EAAD,IAAsBV,KAAKZ,SAAWY,KAAKP,SAItD,OAxDMkB,EADN,uCACMA,EADN,0CAE2C8B,EAAAA,EAAAA,GAAe/B,GAF1D,MAyDOC,I,uSE5ET,MAAM+B,EAAa,EAAEC,SAAAA,MACnB,QAAC,KAAD,WACE,QAAC,IAAD,WACE,QAAC,IAAD,WACE,sBAAIA,UAJND,EAAAA,YAAAA,aAUN,W,okBCGA,MAAME,UAA2BC,EAAAA,cAA4B,mDAC5C,KAD4C,8BAa1CC,EAAAA,EAAAA,eAb0C,sCAcjCC,IACxB,MAAM,OAACC,EAAD,SAASC,GAAYjD,KAAKZ,MAEhC4D,EAAOE,KAAK,IACPD,EACHE,MAAO,IAAIF,EAASE,MAAOC,YAAQzD,EAAWoD,WAAAA,QAhBlDzB,oBACEtB,KAAKqD,yBAEPA,yBAAyB,QACvB,MAAMC,EAAmB,UAAGtD,KAAKuD,sBAAR,iBAAG,EAAqBC,eAAxB,aAAG,EAA8BC,YACtDH,GACFtD,KAAKuC,SAAS,CAACe,oBAAAA,IAcnBd,SACE,MAAM,iBAACkB,EAAD,aAAmB9D,GAAgBI,KAAKZ,OACxC,oBAACkE,GAAuBtD,KAAKP,MAE7BsD,EAAaW,MAAAA,OAAH,EAAGA,EAAkBC,KAErC,OACE,QAACC,EAAD,CACEC,aAAcP,EACdQ,OACE,QAAC,EAAAC,SAAD,YACE,QAACC,EAAD,qBAAgBC,EAAAA,EAAAA,GAAE,UAAlB,OACClB,KAGLmB,YAAa,CAACC,WAAYnE,KAAKuD,gBARjC,SAUG3D,EACEwE,KAAIC,GAAQA,EAAKV,OACjBS,KAAIE,IACH,QAAC,KAAD,CAEEC,SAAUvE,KAAKwE,uBACfC,SAAUH,EACVI,SAAUJ,IAAavB,EAJzB,UAME,QAAC4B,EAAD,UAAYL,KALPA,QA5Cb1B,EAAAA,YAAAA,qBAyDN,UAEMgB,GAAwB,OAAOgB,EAAAA,GAAP,sBAAH,kBAGRC,EAAAA,EAAAA,GAAM,GAHE,2CAOrBC,GAAKA,EAAEjB,cAAF,0BAAqCiB,EAAEjB,aAAvC,gBAPgB,mBAQNiB,GAAKA,EAAEC,MAAMC,cARP,iDAUHF,GAAKA,EAAEC,MAAME,OAAOC,QAAQC,QAVzB,2BAerBnB,GAAa,OAAO,KAAP,sBAAH,4BAELc,GAAKA,EAAEC,MAAMK,SAFR,kBAGEP,EAAAA,EAAAA,GAAM,IAHR,KAMVF,GAAY,OAAO,MAAP,sBACdU,EAAAA,EADW,M,u1BChER,SAASC,EAAqBC,GACnC,OAAOA,EAASC,QAA0B,CAACC,EAAmBC,KAC5D,MAAM,SAACC,EAAD,SAAWrB,EAAX,OAAqBsB,EAArB,KAA6BC,GAAQH,EAmB3C,OAjBKD,EAAkBK,eAAexB,KACpCmB,EAAkBnB,GAAY,IAG3BmB,EAAkBnB,GAAUwB,eAAeH,KAC9CF,EAAkBnB,GAAUqB,GAAY,CACtCI,QAAS,GACTC,MAAO,IAAIC,MAIXL,EAAOM,QACTT,EAAkBnB,GAAUqB,GAAUI,QAAQH,EAAOM,OAASN,GAGhEH,EAAkBnB,GAAUqB,GAAUK,MAAMG,IAAIN,GAEzCJ,IACN,IAME,SAASW,EAAuBC,GACrC,OAAOA,EAAWb,QAAO,CAACc,EAAqBC,KAAW,QACxD,MAAMC,EAAc,oBAAGD,EAAOE,kBAAV,aAAG,EAAmB9C,YAAtB,SAA8BM,EAAAA,EAAAA,GAAE,WAQpD,OANKqC,EAAoBR,eAAeU,KACtCF,EAAoBE,GAAkB,IAGxCF,EAAoBE,GAAgBtD,KAAKqD,GAElCD,IACN,IAaE,SAASI,GAAS,SAACzD,EAAD,QAAW0D,EAAU,GAArB,iBAAyBjD,IAChD,MAAMP,EAAQ,IACTyD,GAAAA,CAAK3D,EAASE,MAAO,IAAI0D,OAAOC,OAAOC,EAAAA,IAAY,WACtDC,SAAUL,GAGZ,OAAKjD,EAIE,IAAIP,EAAO8D,UAAWvD,EAAiBC,MAHrCR,EASJ,SAAS+D,EAAiBC,EAAsBzD,GACrD,OAAKA,EAGE,CAACA,EAAiBC,MAFhBwD,EAQJ,SAASC,EACdC,EACAC,EACAC,GAEA,MAAM,SAACC,EAAD,aAAWC,EAAX,SAAyBC,GAAYL,GACrC,MAACM,EAAD,IAAQC,EAAR,OAAaC,GAAUH,EAEvBI,EAAgB,CACpBC,QAAIpI,EACJ2H,QAAS,EACT3D,KAAM,GAAF,QAAKM,EAAAA,EAAAA,GAAE,kBACX+D,OAAQ,CAAC,WACT7E,MAAO,IAAI8E,EAAAA,GAAc,CAAC,WAAD,OACZX,GACX,yBACA,eACCY,eACHC,MAAON,EACPO,YAAaX,EACbD,SAAAA,EACAG,MAAOA,GAAQU,EAAAA,EAAAA,IAAiBV,QAAShI,EACzCiI,IAAKA,GAAMS,EAAAA,EAAAA,IAAiBT,QAAOjI,GAGrC,OAAO2I,EAAAA,GAAAA,eAAyBR,GAG3B,MAAMS,EAA+B,CAC1C,CAACC,EAAAA,GAAAA,sBAAiDvE,EAAAA,EAAAA,GAAE,2BACpD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,WACjD,CAACuE,EAAAA,GAAAA,oBAA+CvE,EAAAA,EAAAA,GAAE,YAClD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,WACjD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,WAC9C,CAACuE,EAAAA,GAAAA,iBAA4CvE,EAAAA,EAAAA,GAAE,YAC/C,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,WAC9C,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,qBAC9C,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,iBAC9C,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,aAAwCvE,EAAAA,EAAAA,GAAE,cAC3C,CAACuE,EAAAA,GAAAA,cAAyCvE,EAAAA,EAAAA,GAAE,eAC5C,CAACuE,EAAAA,GAAAA,oBAA+CvE,EAAAA,EAAAA,GAAE,qBAClD,CAACuE,EAAAA,GAAAA,eAA0CvE,EAAAA,EAAAA,GAAE,iBAGlCwE,EAA+B,CAC1C,CAACD,EAAAA,GAAAA,sBAAiDvE,EAAAA,EAAAA,GAAE,2BACpD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,oBAA+CvE,EAAAA,EAAAA,GAAE,yBAClD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,wBACjD,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,qBAC9C,CAACuE,EAAAA,GAAAA,iBAA4CvE,EAAAA,EAAAA,GAAE,sBAC/C,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,qBAC9C,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,qBAC9C,CAACuE,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAAE,iBAC9C,CAACuE,EAAAA,GAAAA,mBAA8CvE,EAAAA,EAAAA,GAAE,oBACjD,CAACuE,EAAAA,GAAAA,aAAwCvE,EAAAA,EAAAA,GAAE,cAC3C,CAACuE,EAAAA,GAAAA,cAAyCvE,EAAAA,EAAAA,GAAE,eAC5C,CAACuE,EAAAA,GAAAA,oBAA+CvE,EAAAA,EAAAA,GAAE,qBAClD,CAACuE,EAAAA,GAAAA,eAA0CvE,EAAAA,EAAAA,GAAE,iBAGlCyE,EAA6B,CACxC,CAACF,EAAAA,GAAAA,qBACCG,EAAAA,GAAuBC,EAAAA,GAAAA,qBACzB,CAACJ,EAAAA,GAAAA,kBACCG,EAAAA,GAAuBC,EAAAA,GAAAA,kBACzB,CAACJ,EAAAA,GAAAA,gBAA2CvE,EAAAA,EAAAA,GAC1C,6CAEF,CAACuE,EAAAA,GAAAA,aAAwCvE,EAAAA,EAAAA,GAAE,2CAQ7C,SAAS4E,EACPC,EACAC,EACAhE,EACAiE,GAEA,MAAM,UAACC,EAAD,UAAYC,GAAaF,GAAW,GAE1C,MAAO,CACLG,WAAYL,EACZjD,KAAM,OACNtF,KAAM,CAAC,CAACoD,KAAMoF,EAAUK,MAAO,OAC/BC,WAAYH,MAAAA,EAAAA,OAAavJ,EACzB2J,WAAYJ,MAAAA,EAAAA,OAAavJ,EACzB4J,MAAOxE,EAAMK,QACboE,UAAUrK,EAAAA,EAAAA,GAAS,CACjBsK,QAAQ,EACRC,UAAW,CAACH,MAAOxE,EAAMK,QAASS,KAAM,SACxC/B,MAAO,CACLiF,SAAU,kBACVY,UAAWV,EAAY,GAAKH,EAC5Bc,KAAM,QACNC,SAAU,IAEZtJ,KAAM,CACJ,CACEuJ,MAAOf,OAOV,MAAMgB,EAAyB,CACpCC,SAAS/F,EAAAA,EAAAA,GAAE,mBACXgG,SAAShG,EAAAA,EAAAA,GAAE,WACXiG,WAAWjG,EAAAA,EAAAA,GAAE,aAGR,SAASkG,EACdC,EACAC,EACAtF,EACA9B,EACA+F,GACA,MACA,MAAMsB,EAAsB,GACtBC,EAAc,UAAGH,EAAQG,sBAAX,aAAG,EAAyBF,EAAQlJ,MAClDqJ,EAAgE,KAAlDC,EAAAA,EAAAA,IAAWxH,EAASE,MAAMiF,aAAasC,QACrD,YAACC,KAAgBC,IAAqBC,EAAAA,EAAAA,IAAiB,CAC3D5H,SAAAA,EACA6H,eAAeC,EAAAA,EAAAA,IAAiBX,GAChCY,mBAAoBC,EAAAA,GACpBC,kBAAkB,IAEpB,IAAI,MAACvD,EAAD,IAAQC,GAAOgD,EACnB,MAAMO,IACJlI,EAASE,MAAMiI,WACfnI,EAASE,MAAMkI,SACfpI,EAASE,MAAMmI,iBAGjB,GAAIX,EAAa,CACf,MAAMY,GAAoBC,EAAAA,EAAAA,GAAiBb,EAAa,MACxDhD,EAAQ4D,EAAkB5D,MAC1BC,EAAM2D,EAAkB3D,IAG1B,MAAM6D,EAAiBC,GAAAA,CAAOtB,EAAQuB,aAAaC,QAAQ,UAY3D,IAXIH,EAAeI,UAAUlE,EAAOC,IAAQuD,IAC1Cb,EAAUpH,KACR2F,EACEkB,EAAuBC,QACvByB,EAAeK,UACf/G,EACAiE,KAKDwB,KAAgBuB,EAAAA,EAAAA,4BAA2B1B,EAAQ2B,UAEtD,OAAO1B,EAGT,MAAM2B,GAAiB1B,MAAAA,OAAA,EAAAA,EAAgBN,UAAWyB,GAAAA,CAAOnB,EAAeN,SACpEgC,GAAkBA,EAAeJ,UAAUlE,EAAOC,IACpD0C,EAAUpH,KACR2F,EACEkB,EAAuBE,QACvBgC,EAAeH,UACf/G,EACAiE,IAKN,MAAMkD,GAAkB3B,MAAAA,OAAA,EAAAA,EAAgBL,YAAawB,GAAAA,CAAOnB,EAAeL,WAY3E,OAXIgC,GAAmBA,EAAgBL,UAAUlE,EAAOC,IACtD0C,EAAUpH,KACR2F,EACEkB,EAAuBG,UACvBgC,EAAgBJ,UAChB/G,EACAiE,IAKCsB,I,o5BCtFT,QAvLA,SACE5J,GAEA,MAAMyL,UAAyBvL,EAAAA,UAAsC,mDAGpD,CACbwL,aAAc,GACdC,WAAW,IAGb/K,oBACEtB,KAAKsM,oBAGPC,mBAAmBC,EAA0BC,GAAkB,QAE3DzM,KAAKZ,MAAMuC,OAAOyI,UAAYoC,EAAU7K,OAAOyI,SAC5CoC,EAAU3M,sBAAwBG,KAAKZ,MAAMS,oBAEhDG,KAAKsM,oBAKLG,EAAUL,aAAa1B,SAAW1K,KAAKP,MAAM2M,aAAa1B,SAC1D,UAAA8B,EAAUvJ,SAASE,aAAnB,eAA0BJ,eAA1B,UAAyC/C,KAAKZ,MAAM6D,SAASE,aAA7D,aAAyC,EAA2BJ,aAEpE/C,KAAK0M,qBAAqB1M,KAAKZ,OAMnCsN,qBAAqBtN,GAAsB,MACzC,MAAM,aAACgN,EAAD,kBAAeO,GAAqB3M,KAAKP,MAE/C,IAAK2M,EAAa1B,OAChB,OAGF,MAAMkC,EAAgB,UAAGxN,EAAM6D,SAASE,aAAlB,aAAG,EAAsBJ,WAExB,MAAvB,IAAK6J,EAIH,YAHA5M,KAAKuC,SAAS,CACZoK,kBAAiB,UAAEP,EAAa,UAAf,QAAqB,OAK1C,GAAIQ,KAAqBD,MAAAA,OAAL,EAAKA,EAAmBhJ,MAC1C,OAGF,MAAMkJ,EAAoBT,EAAaU,MACrCC,GAAcA,EAAWpJ,OAASiJ,IAGhCC,EACF7M,KAAKuC,SAAS,CACZoK,kBAAmBE,KAKvBG,EAAAA,EAAAA,KAAgB/I,EAAAA,EAAAA,GAAE,uDAGG,0BACrB,MAAM,OAACtC,EAAD,IAASD,EAAT,aAAc9B,EAAd,oBAA4BC,GAAuBG,KAAKZ,MAE9D,QAA4BO,IAAxBE,IAA6D,IAAxBA,EACvC,OAGF,GAAKD,MAAAA,IAAAA,EAAc8K,OAEjB,YADA1K,KAAKuC,SAAS,CAAC8J,WAAW,IAI5B,MAAM,QAACjC,EAAD,MAAU6C,GAAStL,GACnB,QAAC0I,GAAWrK,KAAKc,QAEvBd,KAAKuC,SAAS,CAAC8J,WAAW,IAE1B,IACE,MAAMa,EAAcC,mBAAmB/C,GACjCgC,QAAqB1K,EAAIG,eAAJ,oBACZoL,EADY,YACH5C,EAAQlJ,KADL,qBACsB+L,EADtB,mBAG3BlN,KAAKuC,SAAS,CAAC6J,aAAAA,EAAcC,WAAW,IACxCrM,KAAK0M,qBAAqB1M,KAAKZ,OAC/B,MAAOgO,GACPlL,EAAAA,GAAwBkL,IACxBJ,EAAAA,EAAAA,KACE/I,EAAAA,EAAAA,GACE,6EACAmG,KAMR5H,SACE,MAAM,UAAC6J,EAAD,kBAAYM,EAAZ,aAA+BP,GAAgBpM,KAAKP,OACpD,oBAACI,EAAD,aAAsBD,EAAtB,OAAoC+B,EAApC,OAA4CqB,EAA5C,SAAoDC,EAApD,aAA8D/B,GAClElB,KAAKZ,MAEP,GAAIiN,GAAaxM,EACf,OAAO,QAAC,IAAD,IAKT,GAFqCD,MAAAA,IAAAA,EAAc8K,OAElB,CAC/B,MAAM,MAACuC,GAAStL,EAChB,OACE,QAAC,KAAD,WACE,QAAC,KAAD,CAAM0L,WAAS,EAAf,UACE,QAAC,KAAD,CAAOC,cAAY,EAAnB,UACE,QAAC,IAAD,CACEC,MAAM,QAAC,KAAD,CAAYC,KAAK,OACvB1E,OAAO7E,EAAAA,EAAAA,GAAE,yCACTwJ,aAAaxJ,EAAAA,EAAAA,GACX,oGAEFyJ,QACE,QAAC,KAAD,CAAQC,SAAS,UAAUC,GAAE,oBAAeX,EAAf,WAA7B,UACGhJ,EAAAA,EAAAA,GAAE,kCAYnB,IAF6BmI,EAAa1B,OAGxC,OACE,QAAC,KAAD,WACE,QAAC,KAAD,CAAM2C,WAAS,EAAf,UACE,QAAC,KAAD,CAAOC,cAAY,EAAnB,UACE,QAAC,IAAD,CACEC,MAAM,QAAC,KAAD,CAAYC,KAAK,OACvB1E,OAAO7E,EAAAA,EAAAA,GAAE,yCACTwJ,aAAaxJ,EAAAA,EAAAA,GACX,oEASd,QAA0BtE,IAAtBgN,EACF,OAAO,QAAC,IAAD,IAGT,MAAM,QAACvC,GAAWzI,EACZjC,EAAUwB,EAAaC,KAE7B,OACE,QAACT,EAAD,IACMV,KAAKZ,MACTM,QAASA,EACTmO,YAAa7N,KAAKc,QAAQuJ,QAAQlJ,KAClCiJ,QAASA,EACTpH,OAAQA,EACRC,SAAUA,EACVmJ,aAAcA,EACdO,kBAAmBA,KAM3B,OAjLMR,EADN,uCACMA,EADN,0CAE2C1J,EAAAA,EAAAA,GAAe/B,GAF1D,cACMyL,EADN,cA8BuB2B,EAAAA,iBAoJhBC,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,IAAiBC,EAAAA,EAAAA,GAAiB9B,O,gICvN5C,IAAKvD,G,SAAAA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,QAAAA,UAAAA,EAAAA,SAAAA,WAAAA,EAAAA,WAAAA,YAAAA,EAAAA,iBAAAA,mBAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,QAAAA,UAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,YAAAA,EAAAA,UAAAA,YAAAA,EAAAA,SAAAA,W,CAAAA,IAAAA,EAAAA,KAcL,MAAMsF,EAAc,CACzB,CAACtF,EAAYuF,UAAUlK,EAAAA,EAAAA,GAAE,WACzB,CAAC2E,EAAYwF,UAAUnK,EAAAA,EAAAA,GAAE,WACzB,CAAC2E,EAAYyF,WAAWpK,EAAAA,EAAAA,GAAE,YAC1B,CAAC2E,EAAY0F,mBAAmBrK,EAAAA,EAAAA,GAAE,oBAClC,CAAC2E,EAAY2F,sBAAsBtK,EAAAA,EAAAA,GAAE,uBACrC,CAAC2E,EAAY4F,UAAUvK,EAAAA,EAAAA,GAAE,WACzB,CAAC2E,EAAY6F,UAAUxK,EAAAA,EAAAA,GAAE,WACzB,CAAC2E,EAAY8F,YAAYzK,EAAAA,EAAAA,GAAE,aAC3B,CAAC2E,EAAY+F,WAAW1K,EAAAA,EAAAA,GAAE,YAC1B2K,UAAU3K,EAAAA,EAAAA,GAAE,oBACZ4K,cAAc5K,EAAAA,EAAAA,GAAE,iBAChB6K,eAAe7K,EAAAA,EAAAA,GAAE,kBACjB8K,cAAc9K,EAAAA,EAAAA,GAAE,iBAChB+K,cAAc/K,EAAAA,EAAAA,GAAE,iBAChBgL,qBAAqBhL,EAAAA,EAAAA,GAAE,0BACvBiL,wBAAwBjL,EAAAA,EAAAA,GAAE,6BAC1BkL,eAAelL,EAAAA,EAAAA,GAAE,mBAIN0E,EAAyB,CACpC,CAACC,EAAYuF,UAAUlK,EAAAA,EAAAA,GAAE,2CACzB,CAAC2E,EAAYwG,aAAanL,EAAAA,EAAAA,GACxB,gEAEF,CAAC2E,EAAY0F,mBAAmBrK,EAAAA,EAAAA,GAC9B,wDAEF,CAAC2E,EAAY2F,sBAAsBtK,EAAAA,EAAAA,GAAE,sCACrC,CAAC2E,EAAYyG,YAAYpL,EAAAA,EAAAA,GAAE,0CAC3B,CAAC2E,EAAY+F,WAAW1K,EAAAA,EAAAA,GACtB,iIAKSqL,EAAyB,CACpC,CAAC1G,EAAYwF,UAAUnK,EAAAA,EAAAA,GACrB,gHAEF,CAAC2E,EAAY2F,sBAAsBtK,EAAAA,EAAAA,GAAE,sCACrC,CAAC2E,EAAYyF,WAAWpK,EAAAA,EAAAA,GACtB,wFAEF,CAAC2E,EAAY4F,UAAUvK,EAAAA,EAAAA,GAAE,4BACzB,CAAC2E,EAAY6F,UAAUxK,EAAAA,EAAAA,GAAE,yBACzB,CAAC2E,EAAY8F,YAAYzK,EAAAA,EAAAA,GAAE,6BAIhBsL,EAA0B,CACrCC,SAASvL,EAAAA,EAAAA,GAAE,4DACX,CAAC2E,EAAYyF,WAAWpK,EAAAA,EAAAA,GACtB,oFAEF,CAAC2E,EAAY4F,UAAUvK,EAAAA,EAAAA,GACrB,kEAEF,CAAC2E,EAAY6F,UAAUxK,EAAAA,EAAAA,GACrB,2EAEF,CAAC2E,EAAY8F,YAAYzK,EAAAA,EAAAA,GAAE,8CAuFtB,SAASwL,EACdC,EACA1D,GAEA,OAxFF,SAA6BA,GAS3B,OAPe,iBAAbA,GACa,gBAAbA,GACa,cAAbA,GACa,sBAAbA,EACIA,EACAA,MAAAA,OALJ,EAKIA,EAAU2D,MAAM,KAAK,IAGzB,IAAK,SACL,IAAK,OACH,MAAO,IACFhH,KACA2G,GAEP,IAAK,cACL,IAAK,oBACH,MAAO,IACF3G,KACA2G,EACH,CAAC1G,EAAYuF,UAAUlK,EAAAA,EAAAA,GACrB,wFAGN,IAAK,UACL,IAAK,UACL,IAAK,eACL,IAAK,UACH,MAAO,IACF0E,KACA2G,EACH,CAAC1G,EAAYwF,UAAUnK,EAAAA,EAAAA,GACrB,qEAIN,IAAK,QACH,MAAO,IACF0E,KACA2G,EACH,CAAC1G,EAAYwF,UAAUnK,EAAAA,EAAAA,GAAE,uDAG7B,IAAK,OACL,IAAK,aACH,MAAO,IACF0E,EACH,CAACC,EAAYwF,UAAUnK,EAAAA,EAAAA,GACrB,4EAEF,CAAC2E,EAAYyF,WAAWpK,EAAAA,EAAAA,GAAE,kCAC1B,CAAC2E,EAAY4F,UAAUvK,EAAAA,EAAAA,GAAE,qDACzB,CAAC2E,EAAY6F,UAAUxK,EAAAA,EAAAA,GACrB,2DAEF,CAAC2E,EAAY8F,WACX,oFAEN,IAAK,YACL,IAAK,WACL,IAAK,SACH,MAAO,IACF/F,KACA4G,GAEP,IAAK,OACH,MAAO,IACF5G,KACA4G,EACH,CAAC3G,EAAYwF,UAAUnK,EAAAA,EAAAA,GAAE,yDAE7B,QACE,MAAO,IACF0E,EACH,CAACC,EAAYwF,UAAUnK,EAAAA,EAAAA,GAAE,sDACzB,CAAC2E,EAAYyF,WAAWpK,EAAAA,EAAAA,GAAE,2BAC1B,CAAC2E,EAAY4F,SAAUc,EAAuBM,QAC9C,CAAChH,EAAY6F,SAAUa,EAAuBO,QAC9C,CAACjH,EAAY8F,WAAYY,EAAuBQ,YAS/CC,CAAoB/D,GAAU0D","sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/charts/components/markLine.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/views/releases/detail/withReleaseRepos.tsx","webpack:///./app/views/releases/utils/sessionTerm.tsx"],"sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import 'echarts/lib/component/markLine';\n\nimport {EChartOption} from 'echarts';\n\n/**\n * eCharts markLine\n *\n * See https://echarts.apache.org/en/option.html#series-line.markLine\n */\nexport default function MarkLine(\n  props: EChartOption.SeriesLine['markLine']\n): EChartOption.SeriesLine['markLine'] {\n  return {\n    // The second symbol is a very ugly arrow, we don't want it\n    symbol: ['none', 'none'],\n    ...props,\n  };\n}\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as Reflux.Store &\n  RepositoryStoreInterface;\n\nexport default RepositoryStore;\n","import * as React from 'react';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nfunction withRepositories<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithRepositories extends React.Component<P & DependentProps, InjectedProps> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: P & DependentProps, context: any) {\n      super(props, context);\n\n      const {organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      this.state =\n        repoData.orgSlug === orgSlug\n          ? {...INITIAL_STATE, ...repoData}\n          : {...INITIAL_STATE};\n    }\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = RepositoryStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRepositories() {\n      const {api, organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    }\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return WithRepositories;\n}\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import * as React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{children}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {createRef, Fragment, PureComponent} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport MarkLine from 'app/components/charts/components/markLine';\nimport {parseStatsPeriod} from 'app/components/organizations/timeRangeSelector/utils';\nimport {DEFAULT_STATS_PERIOD} from 'app/constants';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  ReleaseComparisonChartType,\n  ReleaseProject,\n  ReleaseWithHealth,\n  Repository,\n} from 'app/types';\nimport {Series} from 'app/types/echarts';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {decodeList} from 'app/utils/queryString';\nimport {Theme} from 'app/utils/theme';\nimport {MutableSearch} from 'app/utils/tokenizeSearch';\nimport {isProjectMobileForReleases} from 'app/views/releases/list';\n\nimport {getReleaseBounds, getReleaseParams} from '../utils';\nimport {commonTermsDescription, SessionTerm} from '../utils/sessionTerm';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  _organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: ['apdex()'],\n    query: new MutableSearch([\n      `release:${version}`,\n      'event.type:transaction',\n      'count():>0',\n    ]).formatString(),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n\nexport const releaseComparisonChartLabels = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Session Rate'),\n  [ReleaseComparisonChartType.HEALTHY_SESSIONS]: t('Healthy'),\n  [ReleaseComparisonChartType.ABNORMAL_SESSIONS]: t('Abnormal'),\n  [ReleaseComparisonChartType.ERRORED_SESSIONS]: t('Errored'),\n  [ReleaseComparisonChartType.CRASHED_SESSIONS]: t('Crashed Session Rate'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free User Rate'),\n  [ReleaseComparisonChartType.HEALTHY_USERS]: t('Healthy'),\n  [ReleaseComparisonChartType.ABNORMAL_USERS]: t('Abnormal'),\n  [ReleaseComparisonChartType.ERRORED_USERS]: t('Errored'),\n  [ReleaseComparisonChartType.CRASHED_USERS]: t('Crashed User Rate'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.SESSION_DURATION]: t('Session Duration p50'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n  [ReleaseComparisonChartType.ERROR_COUNT]: t('Error Count'),\n  [ReleaseComparisonChartType.TRANSACTION_COUNT]: t('Transaction Count'),\n  [ReleaseComparisonChartType.FAILURE_RATE]: t('Failure Rate'),\n};\n\nexport const releaseComparisonChartTitles = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Session Rate'),\n  [ReleaseComparisonChartType.HEALTHY_SESSIONS]: t('Healthy Session Rate'),\n  [ReleaseComparisonChartType.ABNORMAL_SESSIONS]: t('Abnormal Session Rate'),\n  [ReleaseComparisonChartType.ERRORED_SESSIONS]: t('Errored Session Rate'),\n  [ReleaseComparisonChartType.CRASHED_SESSIONS]: t('Crashed Session Rate'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free User Rate'),\n  [ReleaseComparisonChartType.HEALTHY_USERS]: t('Healthy User Rate'),\n  [ReleaseComparisonChartType.ABNORMAL_USERS]: t('Abnormal User Rate'),\n  [ReleaseComparisonChartType.ERRORED_USERS]: t('Errored User Rate'),\n  [ReleaseComparisonChartType.CRASHED_USERS]: t('Crashed User Rate'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.SESSION_DURATION]: t('Session Duration'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n  [ReleaseComparisonChartType.ERROR_COUNT]: t('Error Count'),\n  [ReleaseComparisonChartType.TRANSACTION_COUNT]: t('Transaction Count'),\n  [ReleaseComparisonChartType.FAILURE_RATE]: t('Failure Rate'),\n};\n\nexport const releaseComparisonChartHelp = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_SESSIONS],\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_USERS],\n  [ReleaseComparisonChartType.SESSION_COUNT]: t(\n    'The number of sessions in a given period.'\n  ),\n  [ReleaseComparisonChartType.USER_COUNT]: t('The number of users in a given period.'),\n};\n\ntype GenerateReleaseMarklineOptions = {\n  hideLabel?: boolean;\n  axisIndex?: number;\n};\n\nfunction generateReleaseMarkLine(\n  title: string,\n  position: number,\n  theme: Theme,\n  options?: GenerateReleaseMarklineOptions\n) {\n  const {hideLabel, axisIndex} = options || {};\n\n  return {\n    seriesName: title,\n    type: 'line',\n    data: [{name: position, value: null as any}], // TODO(ts): echart types\n    yAxisIndex: axisIndex ?? undefined,\n    xAxisIndex: axisIndex ?? undefined,\n    color: theme.gray300,\n    markLine: MarkLine({\n      silent: true,\n      lineStyle: {color: theme.gray300, type: 'solid'},\n      label: {\n        position: 'insideEndBottom',\n        formatter: hideLabel ? '' : title,\n        font: 'Rubik',\n        fontSize: 11,\n      } as any, // TODO(ts): weird echart types,\n      data: [\n        {\n          xAxis: position,\n        },\n      ] as any, // TODO(ts): weird echart types\n    }),\n  };\n}\n\nexport const releaseMarkLinesLabels = {\n  created: t('Release Created'),\n  adopted: t('Adopted'),\n  unadopted: t('Replaced'),\n};\n\nexport function generateReleaseMarkLines(\n  release: ReleaseWithHealth,\n  project: ReleaseProject,\n  theme: Theme,\n  location: Location,\n  options?: GenerateReleaseMarklineOptions\n) {\n  const markLines: Series[] = [];\n  const adoptionStages = release.adoptionStages?.[project.slug];\n  const isSingleEnv = decodeList(location.query.environment).length === 1;\n  const {statsPeriod, ...releaseParamsRest} = getReleaseParams({\n    location,\n    releaseBounds: getReleaseBounds(release),\n    defaultStatsPeriod: DEFAULT_STATS_PERIOD, // this will be removed once we get rid off legacy release details\n    allowEmptyPeriod: true,\n  });\n  let {start, end} = releaseParamsRest;\n  const isDefaultPeriod = !(\n    location.query.pageStart ||\n    location.query.pageEnd ||\n    location.query.pageStatsPeriod\n  );\n\n  if (statsPeriod) {\n    const parsedStatsPeriod = parseStatsPeriod(statsPeriod, null);\n    start = parsedStatsPeriod.start;\n    end = parsedStatsPeriod.end;\n  }\n\n  const releaseCreated = moment(release.dateCreated).startOf('minute');\n  if (releaseCreated.isBetween(start, end) || isDefaultPeriod) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.created,\n        releaseCreated.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  if (!isSingleEnv || !isProjectMobileForReleases(project.platform)) {\n    // for now want to show marklines only on mobile platforms with single environment selected\n    return markLines;\n  }\n\n  const releaseAdopted = adoptionStages?.adopted && moment(adoptionStages.adopted);\n  if (releaseAdopted && releaseAdopted.isBetween(start, end)) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.adopted,\n        releaseAdopted.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  const releaseReplaced = adoptionStages?.unadopted && moment(adoptionStages.unadopted);\n  if (releaseReplaced && releaseReplaced.isBetween(start, end)) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.unadopted,\n        releaseReplaced.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  return markLines;\n}\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withRepositories from 'app/utils/withRepositories';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {ReleaseContext} from '.';\n\n// These props are required when using this HoC\ntype DependentProps = RouteComponentProps<{orgId: string; release: string}, {}>;\n\ntype HoCsProps = {\n  api: Client;\n  organization: Organization;\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  releaseRepos: Repository[];\n  isLoading: boolean;\n  activeReleaseRepo?: Repository;\n};\n\nfunction withReleaseRepos<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithReleaseRepos extends React.Component<P & HoCsProps, State> {\n    static displayName = `withReleaseRepos(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      releaseRepos: [],\n      isLoading: true,\n    };\n\n    componentDidMount() {\n      this.fetchReleaseRepos();\n    }\n\n    componentDidUpdate(prevProps: P & HoCsProps, prevState: State) {\n      if (\n        this.props.params.release !== prevProps.params.release ||\n        (!!prevProps.repositoriesLoading && !this.props.repositoriesLoading)\n      ) {\n        this.fetchReleaseRepos();\n        return;\n      }\n\n      if (\n        prevState.releaseRepos.length !== this.state.releaseRepos.length ||\n        prevProps.location.query?.activeRepo !== this.props.location.query?.activeRepo\n      ) {\n        this.setActiveReleaseRepo(this.props);\n      }\n    }\n\n    static contextType = ReleaseContext;\n\n    setActiveReleaseRepo(props: P & HoCsProps) {\n      const {releaseRepos, activeReleaseRepo} = this.state;\n\n      if (!releaseRepos.length) {\n        return;\n      }\n\n      const activeCommitRepo = props.location.query?.activeRepo;\n\n      if (!activeCommitRepo) {\n        this.setState({\n          activeReleaseRepo: releaseRepos[0] ?? null,\n        });\n        return;\n      }\n\n      if (activeCommitRepo === activeReleaseRepo?.name) {\n        return;\n      }\n\n      const matchedRepository = releaseRepos.find(\n        commitRepo => commitRepo.name === activeCommitRepo\n      );\n\n      if (matchedRepository) {\n        this.setState({\n          activeReleaseRepo: matchedRepository,\n        });\n        return;\n      }\n\n      addErrorMessage(t('The repository you were looking for was not found.'));\n    }\n\n    async fetchReleaseRepos() {\n      const {params, api, repositories, repositoriesLoading} = this.props;\n\n      if (repositoriesLoading === undefined || repositoriesLoading === true) {\n        return;\n      }\n\n      if (!repositories?.length) {\n        this.setState({isLoading: false});\n        return;\n      }\n\n      const {release, orgId} = params;\n      const {project} = this.context;\n\n      this.setState({isLoading: true});\n\n      try {\n        const releasePath = encodeURIComponent(release);\n        const releaseRepos = await api.requestPromise(\n          `/projects/${orgId}/${project.slug}/releases/${releasePath}/repositories/`\n        );\n        this.setState({releaseRepos, isLoading: false});\n        this.setActiveReleaseRepo(this.props);\n      } catch (error) {\n        Sentry.captureException(error);\n        addErrorMessage(\n          t(\n            'An error occured while trying to fetch the repositories of the release: %s',\n            release\n          )\n        );\n      }\n    }\n\n    render() {\n      const {isLoading, activeReleaseRepo, releaseRepos} = this.state;\n      const {repositoriesLoading, repositories, params, router, location, organization} =\n        this.props;\n\n      if (isLoading || repositoriesLoading) {\n        return <LoadingIndicator />;\n      }\n\n      const noRepositoryOrgRelatedFound = !repositories?.length;\n\n      if (noRepositoryOrgRelatedFound) {\n        const {orgId} = params;\n        return (\n          <Body>\n            <Main fullWidth>\n              <Panel dashedBorder>\n                <EmptyMessage\n                  icon={<IconCommit size=\"xl\" />}\n                  title={t('Releases are better with commit data!')}\n                  description={t(\n                    'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n                  )}\n                  action={\n                    <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n                      {t('Connect a repository')}\n                    </Button>\n                  }\n                />\n              </Panel>\n            </Main>\n          </Body>\n        );\n      }\n\n      const noReleaseReposFound = !releaseRepos.length;\n\n      if (noReleaseReposFound) {\n        return (\n          <Body>\n            <Main fullWidth>\n              <Panel dashedBorder>\n                <EmptyMessage\n                  icon={<IconCommit size=\"xl\" />}\n                  title={t('Releases are better with commit data!')}\n                  description={t(\n                    'No commits associated with this release have been found.'\n                  )}\n                />\n              </Panel>\n            </Main>\n          </Body>\n        );\n      }\n\n      if (activeReleaseRepo === undefined) {\n        return <LoadingIndicator />;\n      }\n\n      const {release} = params;\n      const orgSlug = organization.slug;\n\n      return (\n        <WrappedComponent\n          {...this.props}\n          orgSlug={orgSlug}\n          projectSlug={this.context.project.slug}\n          release={release}\n          router={router}\n          location={location}\n          releaseRepos={releaseRepos}\n          activeReleaseRepo={activeReleaseRepo}\n        />\n      );\n    }\n  }\n\n  return withApi(withOrganization(withRepositories(WithReleaseRepos)));\n}\n\nexport default withReleaseRepos;\n","import {PlatformKey} from 'app/data/platformCategories';\nimport {t} from 'app/locale';\n\nexport enum SessionTerm {\n  CRASHES = 'crashes',\n  CRASHED = 'crashed',\n  ABNORMAL = 'abnormal',\n  CRASH_FREE = 'crashFree',\n  CRASH_FREE_USERS = 'crash-free-users',\n  CRASH_FREE_SESSIONS = 'crash-free-sessions',\n  HEALTHY = 'healthy',\n  ERRORED = 'errored',\n  UNHANDLED = 'unhandled',\n  STABILITY = 'stability',\n  ADOPTION = 'adoption',\n}\n\nexport const sessionTerm = {\n  [SessionTerm.CRASHES]: t('Crashes'),\n  [SessionTerm.CRASHED]: t('Crashed'),\n  [SessionTerm.ABNORMAL]: t('Abnormal'),\n  [SessionTerm.CRASH_FREE_USERS]: t('Crash Free Users'),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Crash Free Sessions'),\n  [SessionTerm.HEALTHY]: t('Healthy'),\n  [SessionTerm.ERRORED]: t('Errored'),\n  [SessionTerm.UNHANDLED]: t('Unhandled'),\n  [SessionTerm.ADOPTION]: t('Adoption'),\n  duration: t('Session Duration'),\n  otherCrashed: t('Other Crashed'),\n  otherAbnormal: t('Other Abnormal'),\n  otherErrored: t('Other Errored'),\n  otherHealthy: t('Other Healthy'),\n  otherCrashFreeUsers: t('Other Crash Free Users'),\n  otherCrashFreeSessions: t('Other Crash Free Sessions'),\n  otherReleases: t('Other Releases'),\n};\n\n// This should never be used directly (except in tests)\nexport const commonTermsDescription = {\n  [SessionTerm.CRASHES]: t('Number of sessions with a crashed state'),\n  [SessionTerm.CRASH_FREE]: t(\n    'Percentage of sessions/users who did not experience a crash.'\n  ),\n  [SessionTerm.CRASH_FREE_USERS]: t(\n    'Percentage of unique users with non-crashed sessions'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.STABILITY]: t('The percentage of crash free sessions.'),\n  [SessionTerm.ADOPTION]: t(\n    'Adoption compares the sessions or users of a release with the total sessions or users for this project in the last 24 hours.'\n  ),\n};\n\n// This should never be used directly (except in tests)\nexport const mobileTermsDescription = {\n  [SessionTerm.CRASHED]: t(\n    'The process was terminated due to an unhandled exception or a request to the server that ended with an error'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.ABNORMAL]: t(\n    'An unknown session exit. Like due to loss of power or killed by the operating system'\n  ),\n  [SessionTerm.HEALTHY]: t('A session without errors'),\n  [SessionTerm.ERRORED]: t('A session with errors'),\n  [SessionTerm.UNHANDLED]: t('Not handled by user code'),\n};\n\n// This should never be used directly (except in tests)\nexport const desktopTermDescriptions = {\n  crashed: t('The application crashed with a hard crash (eg. segfault)'),\n  [SessionTerm.ABNORMAL]: t(\n    'The application did not properly end the session, for example, due to force-quit'\n  ),\n  [SessionTerm.HEALTHY]: t(\n    'The application exited normally and did not observe any errors'\n  ),\n  [SessionTerm.ERRORED]: t(\n    'The application exited normally but observed error events while running'\n  ),\n  [SessionTerm.UNHANDLED]: t('The application crashed with a hard crash'),\n};\n\nfunction getTermDescriptions(platform: PlatformKey | null) {\n  const technology =\n    platform === 'react-native' ||\n    platform === 'java-spring' ||\n    platform === 'apple-ios' ||\n    platform === 'dotnet-aspnetcore'\n      ? platform\n      : platform?.split('-')[0];\n\n  switch (technology) {\n    case 'dotnet':\n    case 'java':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n      };\n    case 'java-spring':\n    case 'dotnet-aspnetcore':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHES]: t(\n          'A request that resulted in an unhandled exception and hence a Server Error response'\n        ),\n      };\n    case 'android':\n    case 'cordova':\n    case 'react-native':\n    case 'flutter':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'An unhandled exception that resulted in the application crashing'\n        ),\n      };\n\n    case 'apple': {\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t('An error that resulted in the application crashing'),\n      };\n    }\n    case 'node':\n    case 'javascript':\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'During the session an unhandled global error/promise rejection occurred.'\n        ),\n        [SessionTerm.ABNORMAL]: t('Non applicable for Javascript.'),\n        [SessionTerm.HEALTHY]: t('No errors were captured during session life-time.'),\n        [SessionTerm.ERRORED]: t(\n          'During the session at least one handled error occurred.'\n        ),\n        [SessionTerm.UNHANDLED]:\n          \"An error was captured by the global 'onerror' or 'onunhandledrejection' handler.\",\n      };\n    case 'apple-ios':\n    case 'minidump':\n    case 'native':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n      };\n    case 'rust':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n        [SessionTerm.CRASHED]: t('The application had an unrecoverable error (a panic)'),\n      };\n    default:\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t('Number of users who experienced an unhandled error'),\n        [SessionTerm.ABNORMAL]: t('An unknown session exit'),\n        [SessionTerm.HEALTHY]: mobileTermsDescription.healthy,\n        [SessionTerm.ERRORED]: mobileTermsDescription.errored,\n        [SessionTerm.UNHANDLED]: mobileTermsDescription.unhandled,\n      };\n  }\n}\n\nexport function getSessionTermDescription(\n  term: SessionTerm,\n  platform: PlatformKey | null\n) {\n  return getTermDescriptions(platform)[term];\n}\n"],"names":["Reflux","MarkLine","props","symbol","RepositoryStoreConfig","listenables","RepoActions","state","orgSlug","undefined","repositories","repositoriesLoading","repositoriesError","init","this","resetRepositories","trigger","loadRepositories","loadRepositoriesError","err","loadRepositoriesSuccess","data","get","INITIAL_STATE","WrappedComponent","WithRepositories","React","constructor","context","super","RepositoryStore","onStoreUpdate","organization","slug","repoData","RepositoryActions","componentDidMount","fetchRepositories","componentWillUnmount","unsubscribe","api","params","path","requestPromise","method","then","res","catch","Sentry","scope","setLevel","setFingerprint","getRepositories","setState","render","getDisplayName","EmptyState","children","RepositorySwitcher","PureComponent","createRef","activeRepo","router","location","push","query","cursor","setButtonDropDownWidth","dropdownButtonWidth","dropdownButton","current","offsetWidth","activeRepository","name","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","t","buttonProps","forwardRef","map","repo","repoName","onSelect","handleRepoFilterChange","eventKey","isActive","RepoLabel","DropdownControl","space","p","theme","borderRadius","button","default","border","gray300","overflowEllipsis","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","getQuery","perPage","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","_organization","projects","environments","datetime","start","end","period","discoverQuery","id","fields","MutableSearch","formatString","range","environment","getUtcDateString","EventView","releaseComparisonChartLabels","ReleaseComparisonChartType","releaseComparisonChartTitles","releaseComparisonChartHelp","commonTermsDescription","SessionTerm","generateReleaseMarkLine","title","position","options","hideLabel","axisIndex","seriesName","value","yAxisIndex","xAxisIndex","color","markLine","silent","lineStyle","formatter","font","fontSize","xAxis","releaseMarkLinesLabels","created","adopted","unadopted","generateReleaseMarkLines","release","project","markLines","adoptionStages","isSingleEnv","decodeList","length","statsPeriod","releaseParamsRest","getReleaseParams","releaseBounds","getReleaseBounds","defaultStatsPeriod","DEFAULT_STATS_PERIOD","allowEmptyPeriod","isDefaultPeriod","pageStart","pageEnd","pageStatsPeriod","parsedStatsPeriod","parseStatsPeriod","releaseCreated","moment","dateCreated","startOf","isBetween","valueOf","isProjectMobileForReleases","platform","releaseAdopted","releaseReplaced","WithReleaseRepos","releaseRepos","isLoading","fetchReleaseRepos","componentDidUpdate","prevProps","prevState","setActiveReleaseRepo","activeReleaseRepo","activeCommitRepo","matchedRepository","find","commitRepo","addErrorMessage","orgId","releasePath","encodeURIComponent","error","fullWidth","dashedBorder","icon","size","description","action","priority","to","projectSlug","ReleaseContext","withApi","withOrganization","withRepositories","sessionTerm","CRASHES","CRASHED","ABNORMAL","CRASH_FREE_USERS","CRASH_FREE_SESSIONS","HEALTHY","ERRORED","UNHANDLED","ADOPTION","duration","otherCrashed","otherAbnormal","otherErrored","otherHealthy","otherCrashFreeUsers","otherCrashFreeSessions","otherReleases","CRASH_FREE","STABILITY","mobileTermsDescription","desktopTermDescriptions","crashed","getSessionTermDescription","term","split","healthy","errored","unhandled","getTermDescriptions"],"sourceRoot":""}