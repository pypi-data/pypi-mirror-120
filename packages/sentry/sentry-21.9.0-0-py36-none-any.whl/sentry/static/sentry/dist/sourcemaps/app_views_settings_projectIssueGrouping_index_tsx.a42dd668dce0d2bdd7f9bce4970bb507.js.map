{"version":3,"file":"chunks/app_views_settings_projectIssueGrouping_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"sourcesContent":["function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport ProjectActions from 'app/actions/projectActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport {openConfirmModal} from 'app/components/confirm';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {EventGroupingConfig, Organization, Project} from 'app/types';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport marked from 'app/utils/marked';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\nconst upgradeGroupingId = 'upgrade-grouping';\n\ntype Props = {\n  groupingConfigs: EventGroupingConfig[];\n  organization: Organization;\n  projectId: string;\n  project: Project;\n  onUpgrade: () => void;\n  api: Client;\n  location: Location;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n  location,\n}: Props) {\n  const hasProjectWriteAccess = organization.access.includes('project:write');\n  const {updateNotes, riskLevel, latestGroupingConfig} = getGroupingChanges(\n    project,\n    groupingConfigs\n  );\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = !latestGroupingConfig;\n  const priority = riskLevel >= 2 ? 'danger' : 'primary';\n\n  useEffect(() => {\n    if (\n      location.hash !== `#${upgradeGroupingId}` ||\n      noUpdates ||\n      !groupingConfigs ||\n      !hasProjectWriteAccess\n    ) {\n      return;\n    }\n    handleOpenConfirmModal();\n  }, [location.hash]);\n\n  if (!groupingConfigs) {\n    return null;\n  }\n\n  async function handleConfirmUpgrade() {\n    const newData: Record<string, string | number> = {};\n\n    if (latestGroupingConfig) {\n      const now = Math.floor(new Date().getTime() / 1000);\n      const ninety_days = 3600 * 24 * 90;\n\n      newData.groupingConfig = latestGroupingConfig.id;\n      newData.secondaryGroupingConfig = project.groupingConfig;\n      newData.secondaryGroupingExpiry = now + ninety_days;\n    }\n\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectActions.updateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  }\n\n  function handleOpenConfirmModal() {\n    openConfirmModal({\n      confirmText: t('Upgrade'),\n      priority,\n      onConfirm: handleConfirmUpgrade,\n      message: (\n        <Fragment>\n          <TextBlock>\n            <strong>{t('Upgrade Grouping Strategy')}</strong>\n          </TextBlock>\n          <TextBlock>\n            {t(\n              'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n            )}\n          </TextBlock>\n          <TextBlock>\n            <strong>{t('New Behavior')}</strong>\n            <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n          </TextBlock>\n          <TextBlock>\n            <Alert type={alertType}>{riskNote}</Alert>\n          </TextBlock>\n        </Fragment>\n      ),\n    });\n  }\n\n  function getButtonTitle() {\n    if (!hasProjectWriteAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id={upgradeGroupingId}>\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <Field\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <div>\n            <Button\n              onClick={handleOpenConfirmModal}\n              disabled={!hasProjectWriteAccess || noUpdates}\n              title={getButtonTitle()}\n              type=\"button\"\n              priority={priority}\n            >\n              {t('Upgrade Grouping Strategy')}\n            </Button>\n          </div>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import * as React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig, Project} from 'app/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[]\n): {\n  updateNotes: string;\n  riskLevel: number;\n  latestGroupingConfig: EventGroupingConfig | null;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  return {updateNotes, riskLevel, latestGroupingConfig};\n}\n\nexport function getGroupingRisk(riskLevel: number): {\n  riskNote: React.ReactNode;\n  alertType: React.ComponentProps<typeof Alert>['type'];\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {fields} from 'app/data/forms/projectIssueGrouping';\nimport {t, tct} from 'app/locale';\nimport {EventGroupingConfig, Organization, Project} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n} & AsyncView['state'];\n\nclass ProjectIssueGrouping extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId} = this.props.params;\n    return [['groupingConfigs', `/projects/${orgId}/${projectId}/grouping-configs/`]];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectActions.updateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs} = this.state;\n    const {organization, project, params, location} = this.props;\n    const {orgId, projectId} = params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/data-management-settings/event-grouping/\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[\n                fields.groupingConfig,\n                fields.secondaryGroupingConfig,\n                fields.secondaryGroupingExpiry,\n              ]}\n            />\n          </Feature>\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n            location={location}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ProjectIssueGrouping;\n"],"names":["routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","FormPanel","React","collapsed","state","setState","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","collapsible","otherProps","props","id","sanitizeQuerySelector","undefined","Collapse","onClick","handleToggleEvents","direction","size","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","name","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","forms","features","_location","formGroup","i","withRouter","upgradeGroupingId","UpgradeGrouping","groupingConfigs","organization","projectId","project","onUpgrade","api","hasProjectWriteAccess","includes","updateNotes","riskLevel","latestGroupingConfig","byId","forEach","cfg","latest","groupingConfig","changelog","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","t","getGroupingRisk","noUpdates","priority","useEffect","handleOpenConfirmModal","async","handleConfirmUpgrade","newData","now","floor","Date","getTime","ninety_days","secondaryGroupingConfig","secondaryGroupingExpiry","addLoadingMessage","response","requestPromise","slug","method","data","clearIndicators","ProjectActions","handleXhrErrorResponse","openConfirmModal","confirmText","onConfirm","message","Fragment","dangerouslySetInnerHTML","__html","marked","type","label","help","tct","linebreak","ProjectIssueGrouping","params","routeTitleGen","getDefaultState","super","getEndpoints","orgId","renderBody","endpoint","Set","jsonFormProps","has","link","href","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","handleSubmit","fetchData"],"sourceRoot":""}