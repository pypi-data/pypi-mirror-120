{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/incidentRules/create.tsx","webpack:///./app/views/alerts/create.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project, Team} from 'app/types';\nimport {metric} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport withTeams from 'app/utils/withTeams';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'app/views/alerts/incidentRules/constants';\nimport {WizardRuleTemplate} from 'app/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  eventView: EventView | undefined;\n  teams: Team[];\n  wizardTemplate?: WizardRuleTemplate;\n  sessionId?: string;\n  isCustomMetric?: boolean;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends Component<Props> {\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  render() {\n    const {project, eventView, wizardTemplate, sessionId, teams, ...props} = this.props;\n    const defaultRule = eventView\n      ? createRuleFromEventView(eventView)\n      : wizardTemplate\n      ? createRuleFromWizardTemplate(wizardTemplate)\n      : createDefaultRule();\n\n    const userTeamIds = teams.filter(({isMember}) => isMember).map(({id}) => id);\n\n    const projectTeamIds = new Set(project.teams.map(({id}) => id));\n    const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n    defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...defaultRule, projects: [project.slug]}}\n        sessionId={sessionId}\n        project={project}\n        userTeamIds={userTeamIds}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withTeams(IncidentRulesCreate);\n","import {Component, Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'app/components/layouts/thirds';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport {uniqueId} from 'app/utils/guid';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesCreate from 'app/views/alerts/incidentRules/create';\nimport IssueRuleEditor from 'app/views/alerts/issueRuleEditor';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  WizardRuleTemplate,\n} from 'app/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'app/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype AlertType = 'metric' | 'issue';\n\ntype State = {\n  alertType: AlertType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project} = this.props;\n    const {createFromDiscover, createFromWizard, aggregate, dataset, eventTypes} =\n      location?.query ?? {};\n    let alertType: AlertType = 'issue';\n\n    // Alerts can only be created via create from discover or alert wizard\n    if (createFromDiscover) {\n      alertType = 'metric';\n    } else if (createFromWizard) {\n      if (aggregate && dataset && eventTypes) {\n        alertType = 'metric';\n      } else {\n        // Just to be explicit\n        alertType = 'issue';\n      }\n    } else {\n      browserHistory.replace(\n        `/organizations/${organization.slug}/alerts/${project.slug}/wizard`\n      );\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'new_alert_rule.viewed',\n      eventName: 'New Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n    });\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      project,\n      params: {projectId},\n      location,\n      routes,\n    } = this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {aggregate, dataset, eventTypes};\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === 'metric') {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              orgSlug={organization.slug}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={projectId}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <AlertConditionsBody>\n          <StyledLayoutMain fullWidth>\n            {(!hasMetricAlerts || alertType === 'issue') && (\n              <IssueRuleEditor {...this.props} project={project} />\n            )}\n\n            {hasMetricAlerts && alertType === 'metric' && (\n              <IncidentRulesCreate\n                {...this.props}\n                eventView={eventView}\n                wizardTemplate={wizardTemplate}\n                sessionId={this.sessionId}\n                project={project}\n                isCustomMetric={wizardAlertType === 'custom'}\n              />\n            )}\n          </StyledLayoutMain>\n        </AlertConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst AlertConditionsBody = styled(Layout.Body)`\n  margin-bottom: -${space(3)};\n`;\n\nconst StyledLayoutMain = styled(Layout.Main)`\n  max-width: 1000px;\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nexport default Create;\n"],"names":["IncidentRulesCreate","Component","router","this","props","orgId","params","metric","name","push","render","project","eventView","wizardTemplate","sessionId","teams","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","userTeamIds","filter","isMember","map","id","projectTeamIds","Set","defaultOwnerId","find","has","owner","onSubmitSuccess","handleSubmitSuccess","rule","projects","slug","withTeams","Create","getInitialState","uniqueId","organization","location","createFromDiscover","createFromWizard","aggregate","dataset","eventTypes","query","alertType","browserHistory","componentDidMount","trackAnalyticsEvent","eventKey","eventName","organization_id","project_id","session_id","alert_type","state","hasMetricAlerts","projectId","routes","EventView","undefined","wizardAlertType","getAlertTypeFromAggregateDataset","title","t","Fragment","projectSlug","StyledHeaderContent","orgSlug","alertName","canChangeProject","AlertWizardAlertNames","AlertConditionsBody","StyledLayoutMain","fullWidth","isCustomMetric","Layout","space"],"sourceRoot":""}