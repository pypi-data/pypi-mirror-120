{"version":3,"file":"chunks/app_data_forms_accountEmails_tsx-app_views_settings_components_settingsLayout_tsx-node_module-f8cead.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/settingsBreadcrumbActions.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx","webpack:///./app/stores/settingsBreadcrumbStore.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/organizationCrumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/projectCrumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/teamCrumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/index.tsx","webpack:///./app/views/settings/components/settingsSearch/index.tsx","webpack:///./app/views/settings/components/settingsLayout.tsx","webpack:///../node_modules/lodash/flattenDepth.js"],"sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions(['mapTitle', 'trimMappings']);\n","import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\n\nimport DropdownAutoCompleteMenu from 'app/components/dropdownAutoComplete/menu';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\n\nimport {RouteWithName} from './types';\n\nconst EXIT_DELAY = 0;\n\ntype Props = {\n  route: RouteWithName;\n  hasMenu?: boolean;\n  isLast?: boolean;\n  enterDelay?: number;\n  name: React.ReactNode;\n  items: Item[];\n  onSelect: (item: Item) => void;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass BreadcrumbDropdown extends React.Component<Props, State> {\n  state: State = {\n    isOpen: false,\n  };\n\n  entering: number | null = null;\n  leaving: number | null = null;\n\n  open = () => {\n    this.setState({isOpen: true});\n  };\n\n  close = () => {\n    this.setState({isOpen: false});\n  };\n\n  handleStateChange = () => {};\n\n  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)\n  handleMouseEnterActor = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.entering = window.setTimeout(() => this.open(), this.props.enterDelay ?? 0);\n  };\n\n  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open\n  handleMouseEnter = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.open();\n  };\n\n  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for\n  // mouseLeave into\n  handleMouseLeave = () => {\n    if (this.entering) {\n      clearTimeout(this.entering);\n    }\n\n    this.leaving = window.setTimeout(() => this.close(), EXIT_DELAY);\n  };\n\n  // Close immediately when actor is clicked clicked\n  handleClickActor = () => {\n    this.close();\n  };\n\n  // Close immediately when clicked outside\n  handleClose = () => {\n    this.close();\n  };\n\n  render() {\n    const {hasMenu, route, isLast, name, items, onSelect} = this.props;\n    return (\n      <DropdownAutoCompleteMenu\n        blendCorner={false}\n        onOpen={this.handleMouseEnter}\n        onClose={this.close}\n        isOpen={this.state.isOpen}\n        menuProps={{\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        }}\n        items={items}\n        onSelect={onSelect}\n        virtualizedHeight={41}\n      >\n        {({getActorProps, actions, isOpen}) => (\n          <Crumb\n            {...getActorProps({\n              onClick: this.handleClickActor.bind(this, actions),\n              onMouseEnter: this.handleMouseEnterActor.bind(this, actions),\n              onMouseLeave: this.handleMouseLeave.bind(this, actions),\n            })}\n          >\n            <span>{name || route.name} </span>\n            <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n          </Crumb>\n        )}\n      </DropdownAutoCompleteMenu>\n    );\n  }\n}\n\nexport default BreadcrumbDropdown;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-size: 18px;\n  color: ${p => p.theme.subText};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  white-space: nowrap;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default Crumb;\n","import styled from '@emotion/styled';\n\nimport {IconChevron} from 'app/icons';\n\ntype Props = {\n  isHover?: boolean;\n  isLast?: boolean;\n};\n\nconst Divider = ({isHover, isLast}: Props) =>\n  isLast ? null : (\n    <StyledDivider>\n      <StyledIconChevron direction={isHover ? 'down' : 'right'} size=\"14px\" />\n    </StyledDivider>\n  );\n\nconst StyledIconChevron = styled(IconChevron)`\n  display: block;\n`;\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.gray200};\n  position: relative;\n`;\n\nexport default Divider;\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n","import {PlainRoute} from 'react-router';\nimport Reflux from 'reflux';\n\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\ntype UpdateData = {\n  routes: PlainRoute<any>[];\n  title: string;\n};\n\ntype SettingsBreadcrumbStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  onUpdateRouteMap: (update: UpdateData) => void;\n  onTrimMappings: (routes: PlainRoute<any>[]) => void;\n  getPathMap: () => Internals['pathMap'];\n};\n\ntype Internals = {\n  pathMap: Record<string, string>;\n};\n\nconst storeConfig: Reflux.StoreDefinition & SettingsBreadcrumbStoreInterface & Internals =\n  {\n    pathMap: {},\n    init() {\n      this.reset();\n      this.listenTo(SettingsBreadcrumbActions.mapTitle, this.onUpdateRouteMap);\n      this.listenTo(SettingsBreadcrumbActions.trimMappings, this.onTrimMappings);\n    },\n\n    reset() {\n      this.pathMap = {};\n    },\n\n    getPathMap() {\n      return this.pathMap;\n    },\n\n    onUpdateRouteMap({routes, title}) {\n      this.pathMap[getRouteStringFromRoutes(routes)] = title;\n      this.trigger(this.pathMap);\n    },\n\n    onTrimMappings(routes) {\n      const routePath = getRouteStringFromRoutes(routes);\n      for (const fullPath in this.pathMap) {\n        if (!routePath.startsWith(fullPath)) {\n          delete this.pathMap[fullPath];\n        }\n      }\n      this.trigger(this.pathMap);\n    },\n  };\n\nconst SettingsBreadcrumbStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  SettingsBreadcrumbStoreInterface;\n\nexport default SettingsBreadcrumbStore;\n","import {RouteWithName} from './types';\n\n/**\n * For all routes with a `path`, find the first route without a route param (e.g. :apiKey)\n *\n * @param routes A list of react-router route objects\n * @param route If given, will only take into account routes between `route` and end of the routes list\n * @return Object Returns a react-router route object\n */\nexport default function findFirstRouteWithoutRouteParam(\n  routes: RouteWithName[],\n  route?: RouteWithName\n) {\n  const routeIndex = route !== undefined ? routes.indexOf(route) : -1;\n  const routesToSearch = route && routeIndex > -1 ? routes.slice(routeIndex) : routes;\n\n  return (\n    routesToSearch.filter(({path}) => !!path).find(({path}) => !path?.includes(':')) ||\n    route\n  );\n}\n","import {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport IdBadge from 'app/components/idBadge';\nimport {Organization} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\n\nimport {RouteWithName} from './types';\nimport {CrumbLink} from '.';\n\ntype Props = RouteComponentProps<{projectId?: string}, {}> & {\n  organizations: Organization[];\n  organization: Organization;\n  routes: RouteWithName[];\n  route: RouteWithName;\n};\n\nconst OrganizationCrumb = ({\n  organization,\n  organizations,\n  params,\n  routes,\n  route,\n  ...props\n}: Props) => {\n  const handleSelect = (item: {value: string}) => {\n    // If we are currently in a project context, and we're attempting to switch organizations,\n    // then we need to default to index route (e.g. `route`)\n    //\n    // Otherwise, find the last route without a router param\n    // e.g. if you are on API details, we want the API listing\n    // This fails if our route tree is not nested\n    const hasProjectParam = !!params.projectId;\n    let destination = hasProjectParam\n      ? route\n      : findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route)));\n\n    // It's possible there is no route without route params (e.g. organization settings index),\n    // in which case, we can use the org settings index route (e.g. `route`)\n    if (!hasProjectParam && typeof destination === 'undefined') {\n      destination = route;\n    }\n\n    if (destination === undefined) {\n      return;\n    }\n\n    browserHistory.push(\n      recreateRoute(destination, {\n        routes,\n        params: {...params, orgId: item.value},\n      })\n    );\n  };\n\n  if (!organization) {\n    return null;\n  }\n\n  const hasMenu = organizations.length > 1;\n\n  return (\n    <BreadcrumbDropdown\n      name={\n        <CrumbLink\n          to={recreateRoute(route, {\n            routes,\n            params: {...params, orgId: organization.slug},\n          })}\n        >\n          <BadgeWrapper>\n            <IdBadge avatarSize={18} organization={organization} />\n          </BadgeWrapper>\n        </CrumbLink>\n      }\n      onSelect={handleSelect}\n      hasMenu={hasMenu}\n      route={route}\n      items={organizations.map((org, index) => ({\n        index,\n        value: org.slug,\n        label: (\n          <MenuItem>\n            <IdBadge organization={org} />\n          </MenuItem>\n        ),\n      }))}\n      {...props}\n    />\n  );\n};\n\nconst BadgeWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport {OrganizationCrumb};\nexport default withLatestContext(OrganizationCrumb);\n","import {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport withProjects from 'app/utils/withProjects';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\n\nimport {RouteWithName} from './types';\nimport {CrumbLink} from '.';\n\ntype Props = RouteComponentProps<{projectId?: string}, {}> & {\n  organization: Organization;\n  project: Project;\n  projects: Project[];\n  routes: RouteWithName[];\n  route: RouteWithName;\n};\n\nconst ProjectCrumb = ({\n  organization: latestOrganization,\n  project: latestProject,\n  projects,\n  params,\n  routes,\n  route,\n  ...props\n}: Props) => {\n  const handleSelect = (item: {value: string}) => {\n    // We have to make exceptions for routes like \"Project Alerts Rule Edit\" or \"Client Key Details\"\n    // Since these models are project specific, we need to traverse up a route when switching projects\n    //\n    // we manipulate `routes` so that it doesn't include the current project's route\n    // which, unlike the org version, does not start with a route param\n    const returnTo = findFirstRouteWithoutRouteParam(\n      routes.slice(routes.indexOf(route) + 1),\n      route\n    );\n\n    if (returnTo === undefined) {\n      return;\n    }\n\n    browserHistory.push(\n      recreateRoute(returnTo, {routes, params: {...params, projectId: item.value}})\n    );\n  };\n\n  if (!latestOrganization) {\n    return null;\n  }\n  if (!projects) {\n    return null;\n  }\n\n  const hasMenu = projects && projects.length > 1;\n\n  return (\n    <BreadcrumbDropdown\n      hasMenu={hasMenu}\n      route={route}\n      name={\n        <ProjectName>\n          {!latestProject ? (\n            <LoadingIndicator mini />\n          ) : (\n            <CrumbLink\n              to={replaceRouterParams('/settings/:orgId/projects/:projectId/', {\n                orgId: latestOrganization.slug,\n                projectId: latestProject.slug,\n              })}\n            >\n              <IdBadge project={latestProject} avatarSize={18} disableLink />\n            </CrumbLink>\n          )}\n        </ProjectName>\n      }\n      onSelect={handleSelect}\n      items={projects.map((project, index) => ({\n        index,\n        value: project.slug,\n        label: (\n          <MenuItem>\n            <IdBadge\n              project={project}\n              avatarProps={{consistentWidth: true}}\n              avatarSize={18}\n              disableLink\n            />\n          </MenuItem>\n        ),\n      }))}\n      {...props}\n    />\n  );\n};\n\nexport {ProjectCrumb};\nexport default withProjects(withLatestContext(ProjectCrumb));\n\n// Set height of crumb because of spinner\nconst SPINNER_SIZE = '24px';\n\nconst ProjectName = styled('div')`\n  display: flex;\n\n  .loading {\n    width: ${SPINNER_SIZE};\n    height: ${SPINNER_SIZE};\n    margin: 0 ${space(0.25)} 0 0;\n  }\n`;\n","import {browserHistory, RouteComponentProps} from 'react-router';\n\nimport IdBadge from 'app/components/idBadge';\nimport {Team} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withTeams from 'app/utils/withTeams';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\n\nimport {RouteWithName} from './types';\nimport {CrumbLink} from '.';\n\ntype Props = RouteComponentProps<{teamId: string}, {}> & {\n  teams: Team[];\n  routes: RouteWithName[];\n  route?: RouteWithName;\n};\n\nconst TeamCrumb = ({teams, params, routes, route, ...props}: Props) => {\n  const team = teams.find(({slug}) => slug === params.teamId);\n  const hasMenu = teams.length > 1;\n\n  if (!team) {\n    return null;\n  }\n\n  return (\n    <BreadcrumbDropdown\n      name={\n        <CrumbLink\n          to={recreateRoute(route, {\n            routes,\n            params: {...params, teamId: team.slug},\n          })}\n        >\n          <IdBadge avatarSize={18} team={team} />\n        </CrumbLink>\n      }\n      onSelect={item => {\n        browserHistory.push(\n          recreateRoute('', {\n            routes,\n            params: {...params, teamId: item.value},\n          })\n        );\n      }}\n      hasMenu={hasMenu}\n      route={route}\n      items={teams.map((teamItem, index) => ({\n        index,\n        value: teamItem.slug,\n        label: (\n          <MenuItem>\n            <IdBadge team={teamItem} />\n          </MenuItem>\n        ),\n      }))}\n      {...props}\n    />\n  );\n};\n\nexport {TeamCrumb};\nexport default withTeams(TeamCrumb);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport Link from 'app/components/links/link';\nimport SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\nimport OrganizationCrumb from 'app/views/settings/components/settingsBreadcrumb/organizationCrumb';\nimport ProjectCrumb from 'app/views/settings/components/settingsBreadcrumb/projectCrumb';\nimport TeamCrumb from 'app/views/settings/components/settingsBreadcrumb/teamCrumb';\n\nimport {RouteWithName} from './types';\n\nconst MENUS = {\n  Organization: OrganizationCrumb,\n  Project: ProjectCrumb,\n  Team: TeamCrumb,\n} as const;\n\ntype Props = {\n  className?: string;\n  routes: RouteWithName[];\n  pathMap: Record<string, string>;\n  params: {[param: string]: string | undefined};\n  route: any;\n};\n\nclass SettingsBreadcrumb extends Component<Props> {\n  static defaultProps = {\n    pathMap: {},\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.routes === prevProps.routes) {\n      return;\n    }\n    SettingsBreadcrumbActions.trimMappings(this.props.routes);\n  }\n\n  render() {\n    const {className, routes, params, pathMap} = this.props;\n    const lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);\n\n    return (\n      <Breadcrumbs className={className}>\n        {routes.map((route, i) => {\n          if (!route.name) {\n            return null;\n          }\n          const pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];\n          const isLast = i === lastRouteIndex;\n          const createMenu = MENUS[route.name];\n          const Menu = typeof createMenu === 'function' && createMenu;\n          const hasMenu = !!Menu;\n          const CrumbPicker = hasMenu\n            ? Menu\n            : () => (\n                <Crumb>\n                  <CrumbLink to={recreateRoute(route, {routes, params})}>\n                    {pathTitle || route.name}{' '}\n                  </CrumbLink>\n                  <Divider isLast={isLast} />\n                </Crumb>\n              );\n\n          return (\n            <CrumbPicker\n              key={`${route.name}:${route.path}`}\n              routes={routes}\n              params={params}\n              route={route}\n              isLast={isLast}\n            />\n          );\n        })}\n      </Breadcrumbs>\n    );\n  }\n}\n\ntype ConnectedState = Pick<Props, 'pathMap'>;\n\nclass ConnectedSettingsBreadcrumb extends Component<\n  Omit<Props, 'pathMap'>,\n  ConnectedState\n> {\n  state: ConnectedState = {pathMap: SettingsBreadcrumbStore.getPathMap()};\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n  unsubscribe = SettingsBreadcrumbStore.listen(\n    (pathMap: ConnectedState['pathMap']) => this.setState({pathMap}),\n    undefined\n  );\n\n  render() {\n    return <SettingsBreadcrumb {...this.props} {...this.state} />;\n  }\n}\n\nexport default ConnectedSettingsBreadcrumb;\n\nconst CrumbLink = styled(Link)`\n  display: block;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.blue300} 0 2px 0;\n  }\n\n  color: ${p => p.theme.subText};\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport {CrumbLink};\n\nconst Breadcrumbs = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n","import * as React from 'react';\nimport keydown from 'react-keydown';\nimport styled from '@emotion/styled';\n\nimport Search from 'app/components/search';\nimport {IconSearch} from 'app/icons';\nimport {t} from 'app/locale';\n\nconst MIN_SEARCH_LENGTH = 1;\nconst MAX_RESULTS = 10;\n\ntype Props = {};\n\nclass SettingsSearch extends React.Component<Props> {\n  searchInput = React.createRef<HTMLInputElement>();\n\n  @keydown('/')\n  handleFocusSearch(e: React.FormEvent<HTMLInputElement>) {\n    if (!this.searchInput.current) {\n      return;\n    }\n    if (e.target === this.searchInput.current) {\n      return;\n    }\n\n    e.preventDefault();\n    this.searchInput.current.focus();\n  }\n\n  render() {\n    return (\n      <Search\n        entryPoint=\"settings_search\"\n        minSearch={MIN_SEARCH_LENGTH}\n        maxResults={MAX_RESULTS}\n        renderInput={({getInputProps}) => (\n          <SearchInputWrapper>\n            <SearchInputIcon size=\"14px\" />\n            <SearchInput\n              {...getInputProps({\n                type: 'text',\n                placeholder: t('Search'),\n              })}\n              ref={this.searchInput}\n            />\n          </SearchInputWrapper>\n        )}\n      />\n    );\n  }\n}\n\nexport default SettingsSearch;\n\nconst SearchInputWrapper = styled('div')`\n  position: relative;\n`;\n\nconst SearchInputIcon = styled(IconSearch)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 10px;\n  top: 8px;\n`;\n\nconst SearchInput = styled('input')`\n  color: ${p => p.theme.formText};\n  background-color: ${p => p.theme.background};\n  transition: border-color 0.15s ease;\n  font-size: 14px;\n  width: 260px;\n  line-height: 1;\n  padding: 5px 8px 4px 28px;\n  border: 1px solid ${p => p.theme.border};\n  border-radius: 30px;\n  height: 28px;\n\n  box-shadow: inset ${p => p.theme.dropShadowLight};\n\n  &:focus {\n    outline: none;\n    border: 1px solid ${p => p.theme.border};\n  }\n\n  &::placeholder {\n    color: ${p => p.theme.formPlaceholder};\n  }\n`;\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconClose, IconMenu} from 'app/icons';\nimport {t} from 'app/locale';\nimport {fadeIn, slideInLeft} from 'app/styles/animations';\nimport space from 'app/styles/space';\n\nimport SettingsBreadcrumb from './settingsBreadcrumb';\nimport SettingsHeader from './settingsHeader';\nimport SettingsSearch from './settingsSearch';\n\ntype Props = {\n  renderNavigation?: () => React.ReactNode;\n  children: React.ReactNode;\n} & RouteComponentProps<{}, {}>;\n\ntype State = {\n  /**\n   * This is used when the screen is small enough that the navigation should\n   * be hidden. On large screens this state will end up unused.\n   */\n  navVisible: boolean;\n  /**\n   * Offset mobile settings navigation by the height of main navigation,\n   * settings breadcrumbs and optional warnings.\n   */\n  navOffsetTop: number;\n};\n\nclass SettingsLayout extends React.Component<Props, State> {\n  state: State = {\n    navVisible: false,\n    navOffsetTop: 0,\n  };\n\n  componentDidMount() {\n    // Close the navigation when navigating.\n    this.unlisten = browserHistory.listen(() => this.toggleNav(false));\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  unlisten!: () => void;\n  headerRef = React.createRef<HTMLDivElement>();\n\n  toggleNav(navVisible: boolean) {\n    // when the navigation is opened, body should be scroll-locked\n    this.toggleBodyScrollLock(navVisible);\n\n    this.setState({\n      navOffsetTop: this.headerRef.current?.getBoundingClientRect().bottom ?? 0,\n      navVisible,\n    });\n  }\n\n  toggleBodyScrollLock(lock: boolean) {\n    const bodyElement = document.getElementsByTagName('body')[0];\n\n    if (window.scrollTo) {\n      window.scrollTo(0, 0);\n    }\n    bodyElement.classList[lock ? 'add' : 'remove']('scroll-lock');\n  }\n\n  render() {\n    const {params, routes, route, renderNavigation, children} = this.props;\n    const {navVisible, navOffsetTop} = this.state;\n\n    // We want child's view's props\n    const childProps =\n      children && React.isValidElement(children) ? children.props : this.props;\n    const childRoutes = childProps.routes || routes || [];\n    const childRoute = childProps.route || route || {};\n    const shouldRenderNavigation = typeof renderNavigation === 'function';\n\n    return (\n      <SettingsColumn>\n        <SettingsHeader ref={this.headerRef}>\n          <HeaderContent>\n            {shouldRenderNavigation && (\n              <NavMenuToggle\n                priority=\"link\"\n                label={t('Open the menu')}\n                icon={navVisible ? <IconClose aria-hidden /> : <IconMenu aria-hidden />}\n                onClick={() => this.toggleNav(!navVisible)}\n              />\n            )}\n            <StyledSettingsBreadcrumb\n              params={params}\n              routes={childRoutes}\n              route={childRoute}\n            />\n            <SettingsSearch />\n          </HeaderContent>\n        </SettingsHeader>\n\n        <MaxWidthContainer>\n          {shouldRenderNavigation && (\n            <SidebarWrapper isVisible={navVisible} offsetTop={navOffsetTop}>\n              {renderNavigation!()}\n            </SidebarWrapper>\n          )}\n          <NavMask isVisible={navVisible} onClick={() => this.toggleNav(false)} />\n          <Content>{children}</Content>\n        </MaxWidthContainer>\n      </SettingsColumn>\n    );\n  }\n}\n\nconst SettingsColumn = styled('div')`\n  display: flex;\n  flex-direction: column;\n  flex: 1; /* so this stretches vertically so that footer is fixed at bottom */\n  min-width: 0; /* fixes problem when child content stretches beyond layout width */\n  footer {\n    margin-top: 0;\n  }\n`;\n\nconst HeaderContent = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst NavMenuToggle = styled(Button)`\n  display: none;\n  margin: -${space(1)} ${space(1)} -${space(1)} -${space(1)};\n  padding: ${space(1)};\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n  }\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst StyledSettingsBreadcrumb = styled(SettingsBreadcrumb)`\n  flex: 1;\n`;\n\nconst MaxWidthContainer = styled('div')`\n  display: flex;\n  max-width: ${p => p.theme.settings.containerWidth};\n  flex: 1;\n`;\n\nconst SidebarWrapper = styled('div')<{isVisible: boolean; offsetTop: number}>`\n  flex-shrink: 0;\n  width: ${p => p.theme.settings.sidebarWidth};\n  background: ${p => p.theme.background};\n  border-right: 1px solid ${p => p.theme.border};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: ${p => (p.isVisible ? 'block' : 'none')};\n    position: fixed;\n    top: ${p => p.offsetTop}px;\n    bottom: 0;\n    overflow-y: auto;\n    animation: ${slideInLeft} 100ms ease-in-out;\n    z-index: ${p => p.theme.zIndex.settingsSidebarNav};\n    box-shadow: ${p => p.theme.dropShadowHeavy};\n  }\n`;\n\nconst NavMask = styled('div')<{isVisible: boolean}>`\n  display: none;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: ${p => (p.isVisible ? 'block' : 'none')};\n    background: rgba(0, 0, 0, 0.35);\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    z-index: ${p => p.theme.zIndex.settingsSidebarNavMask};\n    animation: ${fadeIn} 250ms ease-in-out;\n  }\n`;\n\n/**\n * Note: `overflow: hidden` will cause some buttons in `SettingsPageHeader` to be cut off because it has negative margin.\n * Will also cut off tooltips.\n */\nconst Content = styled('div')`\n  flex: 1;\n  padding: ${space(4)};\n  min-width: 0; /* keep children from stretching container */\n`;\n\nexport default SettingsLayout;\n","var baseFlatten = require('./_baseFlatten'),\n    toInteger = require('./toInteger');\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nmodule.exports = flattenDepth;\n"],"names":["Reflux","route","title","fields","name","type","label","placeholder","help","showReturnButton","recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","BreadcrumbDropdown","React","isOpen","this","setState","leaving","clearTimeout","entering","window","setTimeout","open","props","enterDelay","close","render","hasMenu","isLast","items","onSelect","blendCorner","onOpen","handleMouseEnter","onClose","state","menuProps","onMouseEnter","onMouseLeave","handleMouseLeave","virtualizedHeight","getActorProps","actions","onClick","handleClickActor","bind","handleMouseEnterActor","isHover","p","theme","subText","space","textColor","StyledIconChevron","IconChevron","StyledDivider","gray200","direction","size","overflowEllipsis","storeConfig","pathMap","init","reset","listenTo","SettingsBreadcrumbActions","onUpdateRouteMap","onTrimMappings","getPathMap","getRouteStringFromRoutes","trigger","routePath","fullPath","startsWith","findFirstRouteWithoutRouteParam","undefined","filter","find","includes","OrganizationCrumb","organization","organizations","length","CrumbLink","orgId","slug","BadgeWrapper","avatarSize","item","hasProjectParam","projectId","destination","browserHistory","value","org","index","withLatestContext","ProjectCrumb","latestOrganization","project","latestProject","projects","ProjectName","disableLink","mini","returnTo","avatarProps","consistentWidth","withProjects","SPINNER_SIZE","TeamCrumb","teams","team","teamId","teamItem","MENUS","Organization","Project","Team","withTeams","SettingsBreadcrumb","Component","componentDidUpdate","prevProps","className","lastRouteIndex","r","lastIndexOf","Breadcrumbs","i","pathTitle","createMenu","Menu","CrumbPicker","ConnectedSettingsBreadcrumb","SettingsBreadcrumbStore","componentWillUnmount","unsubscribe","Link","blue300","SettingsSearch","keydown","handleFocusSearch","e","searchInput","current","target","preventDefault","focus","entryPoint","minSearch","maxResults","renderInput","getInputProps","SearchInputWrapper","SearchInputIcon","SearchInput","t","ref","IconSearch","gray300","formText","background","border","dropShadowLight","formPlaceholder","SettingsLayout","navVisible","navOffsetTop","componentDidMount","unlisten","toggleNav","toggleBodyScrollLock","headerRef","getBoundingClientRect","bottom","lock","bodyElement","document","getElementsByTagName","scrollTo","classList","renderNavigation","children","childProps","childRoutes","childRoute","shouldRenderNavigation","SettingsColumn","HeaderContent","NavMenuToggle","priority","icon","StyledSettingsBreadcrumb","MaxWidthContainer","SidebarWrapper","isVisible","offsetTop","NavMask","Content","Button","breakpoints","settings","containerWidth","sidebarWidth","slideInLeft","zIndex","settingsSidebarNav","dropShadowHeavy","settingsSidebarNavMask","fadeIn","baseFlatten","toInteger","module","exports","array","depth"],"sourceRoot":""}