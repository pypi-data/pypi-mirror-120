{"version":3,"file":"chunks/app_components_modals_createTeamModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/views/settings/components/forms/textField.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import {Component, Fragment} from 'react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {createTeam} from 'app/actionCreators/teams';\nimport {Client} from 'app/api';\nimport CreateTeamForm from 'app/components/teams/createTeamForm';\nimport {t} from 'app/locale';\nimport {Organization, Team} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  onClose?: (team: Team) => void;\n} & ModalRenderProps;\n\nclass CreateTeamModal extends Component<Props> {\n  handleSubmit = (data: {slug: string}, onSuccess: Function, onError: Function) => {\n    const {organization, api} = this.props;\n    createTeam(api, data, {orgId: organization.slug})\n      .then((resp: Team) => {\n        this.handleSuccess(resp);\n        onSuccess(resp);\n      })\n      .catch((err: Error) => {\n        onError(err);\n      });\n  };\n\n  handleSuccess(team: Team) {\n    if (this.props.onClose) {\n      this.props.onClose(team);\n    }\n\n    this.props.closeModal();\n  }\n\n  render() {\n    const {Body, Header, ...props} = this.props;\n\n    return (\n      <Fragment>\n        <Header closeButton>{t('Create Team')}</Header>\n        <Body>\n          <CreateTeamForm {...props} onSubmit={this.handleSubmit} />\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default withApi(CreateTeamModal);\n","import {Component, Fragment} from 'react';\n\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport slugify from 'app/utils/slugify';\nimport Form from 'app/views/settings/components/forms/form';\nimport TextField from 'app/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nexport default class CreateTeamForm extends Component<Props> {\n  handleSubmit = (data: Record<string, any>, onSuccess: Function, onError: Function) => {\n    callIfFunction(this.props.onSubmit, data as Payload, onSuccess, onError);\n  };\n\n  handleCreateTeamSuccess = (data: Payload) => {\n    callIfFunction(this.props.onSuccess, data);\n  };\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <Fragment>\n        <p>\n          {t(\n            'Members of a team have access to specific areas, such as a new release or a new application feature.'\n          )}\n        </p>\n\n        <Form\n          submitLabel={t('Create Team')}\n          apiEndpoint={`/organizations/${organization.slug}/teams/`}\n          apiMethod=\"POST\"\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleCreateTeamSuccess}\n          requireChanges\n          data-test-id=\"create-team-form\"\n          {...this.props.formProps}\n        >\n          <TextField\n            name=\"slug\"\n            label={t('Team Name')}\n            placeholder={t('e.g. operations, web-frontend, desktop')}\n            help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n            required\n            stacked\n            flexibleControlStateSize\n            inline={false}\n            transformInput={slugify}\n          />\n        </Form>\n      </Fragment>\n    );\n  }\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'app/api';\n\ntype Options = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport useApi from 'app/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","Reflux","CreateTeamModal","Component","onSuccess","onError","this","props","resp","handleSuccess","catch","onClose","closeModal","render","Body","Header","Fragment","closeButton","t","onSubmit","handleSubmit","withApi","CreateTeamForm","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","handleCreateTeamSuccess","requireChanges","formProps","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","str","toLowerCase","replace","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","handleCleanup","clear","useEffect","WrappedComponent","WithApi","propsApi","useApi","displayName","getDisplayName","TextField","type"],"sourceRoot":""}