{"version":3,"file":"chunks/app_views_settings_components_forms_booleanField_tsx-app_views_settings_components_forms_choi-379122.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/components/forms/booleanField.tsx","webpack:///./app/views/settings/components/forms/choiceMapperField.tsx","webpack:///./app/views/settings/components/forms/emailField.tsx","webpack:///./app/views/settings/components/forms/fieldSeparator.tsx","webpack:///./app/views/settings/components/forms/hiddenField.tsx","webpack:///./app/views/settings/components/forms/numberField.tsx","webpack:///./app/views/settings/components/forms/rangeField.tsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/components/forms/textareaField.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport Switch from 'app/components/switchButton';\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\n\ntype Props = {\n  confirm?: {\n    true?: React.ReactNode;\n    false?: React.ReactNode;\n  };\n} & InputField['props'];\n\nexport default class BooleanField extends React.Component<Props> {\n  coerceValue(value: any) {\n    return !!value;\n  }\n\n  handleChange = (\n    value: any,\n    onChange: onEvent,\n    onBlur: onEvent,\n    e: React.FormEvent<HTMLInputElement>\n  ) => {\n    // We need to toggle current value because Switch is not an input\n    const newValue = this.coerceValue(!value);\n    onChange(newValue, e);\n    onBlur(newValue, e);\n  };\n\n  render() {\n    const {confirm, ...fieldProps} = this.props;\n\n    return (\n      <InputField\n        {...fieldProps}\n        resetOnError\n        field={({\n          onChange,\n          onBlur,\n          value,\n          disabled,\n          ...props\n        }: {\n          onChange: onEvent;\n          onBlur: onEvent;\n          value: any;\n          disabled: boolean;\n        }) => {\n          // Create a function with required args bound\n          const handleChange = this.handleChange.bind(this, value, onChange, onBlur);\n\n          const switchProps = {\n            ...props,\n            size: 'lg' as React.ComponentProps<typeof Switch>['size'],\n            isActive: !!value,\n            isDisabled: disabled,\n            toggle: handleChange,\n          };\n\n          if (confirm) {\n            return (\n              <Confirm\n                renderMessage={() => confirm[(!value).toString()]}\n                onConfirm={() => handleChange({})}\n              >\n                {({open}) => (\n                  <Switch\n                    {...switchProps}\n                    toggle={(e: React.MouseEvent) => {\n                      // If we have a `confirm` prop and enabling switch\n                      // Then show confirm dialog, otherwise propagate change as normal\n                      if (confirm[(!value).toString()]) {\n                        // Open confirm modal\n                        open();\n                        return;\n                      }\n\n                      handleChange(e);\n                    }}\n                  />\n                )}\n              </Confirm>\n            );\n          }\n\n          return <Switch {...switchProps} />;\n        }}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport SelectControl, {ControlProps} from 'app/components/forms/selectControl';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {defined, objectIsEmpty} from 'app/utils';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype InputFieldProps = React.ComponentProps<typeof InputField>;\n\ntype DefaultProps = {\n  /**\n   * Text used for the 'add row' button.\n   */\n  addButtonText: React.ReactNode;\n  /**\n   * If using mappedSelectors to specifically map different choice selectors\n   * per item specify this as true.\n   */\n  perItemMapping: boolean;\n  /**\n   * Automatically save even if fields are empty\n   */\n  allowEmpty: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  addButtonText: t('Add Item'),\n  perItemMapping: false,\n  allowEmpty: false,\n};\n\ntype MappedSelectors = Record<string, Partial<ControlProps>>;\n\nexport type ChoiceMapperProps = {\n  /**\n   * A list of column labels (headers) for the multichoice table. This should\n   * have the same mapping keys as the mappedSelectors prop.\n   */\n  columnLabels: Record<string, React.ReactNode>;\n  /**\n   * mappedSelectors controls how the Select control should render for each\n   * column. This can be generalised so that each column renders the same set\n   * of choices for each mapped item by providing an object with column\n   * label keys mapping to the select descriptor, OR you may specify the set\n   * of select descriptors *specific* to a mapped item, where the item value\n   * maps to the object of column label keys to select descriptor.\n   *\n   * Example - All selects are the same per column:\n   *\n   * {\n   *   'column_key1: {...select1},\n   *   'column_key2: {...select2},\n   * }\n   *\n   * Example - Selects differ for each of the items available:\n   *\n   * {\n   *   'my_object_value':  {'colum_key1': {...select1}, 'column_key2': {...select2}},\n   *   'other_object_val': {'colum_key1': {...select3}, 'column_key2': {...select4}},\n   * }\n   */\n  mappedSelectors: MappedSelectors;\n  /**\n   * Props forwarded to the add mapping dropdown.\n   */\n  addDropdown: React.ComponentProps<typeof DropdownAutoComplete>;\n  /**\n   * Since we're saving an object, there isn't a great way to render the\n   * change within the toast. Just turn off displaying the from/to portion of\n   * the message.\n   */\n  formatMessageValue: boolean;\n  /**\n   * The label to show above the row name selected from the dropdown.\n   */\n  mappedColumnLabel?: React.ReactNode;\n  /**\n   * Field controls get a boolean.\n   */\n  disabled?: boolean;\n\n  // TODO(ts) This isn't aligned with InputField but that's what the runtime code had.\n  onBlur?: () => void;\n\n  onChange: InputFieldProps['onChange'];\n\n  // TODO(ts) tighten this up.\n  value: Record<string, any>;\n} & DefaultProps;\n\ntype FieldProps = ChoiceMapperProps & InputFieldProps;\n\nexport default class ChoiceMapper extends React.Component<FieldProps> {\n  static defaultProps = defaultProps;\n\n  hasValue = (value: FieldProps['value']) => defined(value) && !objectIsEmpty(value);\n\n  renderField = (props: ChoiceMapperProps) => {\n    const {\n      onChange,\n      onBlur,\n      addButtonText,\n      addDropdown,\n      mappedColumnLabel,\n      columnLabels,\n      mappedSelectors,\n      perItemMapping,\n      disabled,\n      allowEmpty,\n    } = props;\n\n    const mappedKeys = Object.keys(columnLabels);\n    const emptyValue = mappedKeys.reduce((a, v) => ({...a, [v]: null}), {});\n\n    const valueIsEmpty = this.hasValue(props.value);\n    const value = valueIsEmpty ? props.value : {};\n\n    const saveChanges = (nextValue: ChoiceMapperProps['value']) => {\n      onChange?.(nextValue, {});\n\n      const validValues = !Object.values(nextValue)\n        .map(o => Object.values(o).find(v => v === null))\n        .includes(null);\n\n      if (allowEmpty || validValues) {\n        onBlur?.();\n      }\n    };\n\n    const addRow = (data: Item) => {\n      saveChanges({...value, [data.value]: emptyValue});\n    };\n\n    const removeRow = (itemKey: string) => {\n      // eslint-disable-next-line no-unused-vars\n      const {[itemKey]: _, ...updatedValue} = value;\n      saveChanges(updatedValue);\n    };\n\n    const setValue = (\n      itemKey: string,\n      fieldKey: string,\n      fieldValue: string | number | null\n    ) => {\n      saveChanges({...value, [itemKey]: {...value[itemKey], [fieldKey]: fieldValue}});\n    };\n\n    // Remove already added values from the items list\n    const selectableValues =\n      addDropdown.items?.filter(i => !value.hasOwnProperty(i.value)) ?? [];\n\n    const valueMap =\n      addDropdown.items?.reduce((map, item) => {\n        map[item.value] = item.label;\n        return map;\n      }, {}) ?? {};\n\n    const dropdown = (\n      <DropdownAutoComplete\n        {...addDropdown}\n        alignMenu={valueIsEmpty ? 'right' : 'left'}\n        items={selectableValues}\n        onSelect={addRow}\n        disabled={disabled}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            icon={<IconAdd size=\"xs\" isCircled />}\n            isOpen={isOpen}\n            size=\"xsmall\"\n            disabled={disabled}\n          >\n            {addButtonText}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n\n    // The field will be set to inline when there is no value set for the\n    // field, just show the dropdown.\n    if (!valueIsEmpty) {\n      return <div>{dropdown}</div>;\n    }\n\n    return (\n      <React.Fragment>\n        <Header>\n          <LabelColumn>\n            <HeadingItem>{mappedColumnLabel}</HeadingItem>\n          </LabelColumn>\n          {mappedKeys.map((fieldKey, i) => (\n            <Heading key={fieldKey}>\n              <HeadingItem>{columnLabels[fieldKey]}</HeadingItem>\n              {i === mappedKeys.length - 1 && dropdown}\n            </Heading>\n          ))}\n        </Header>\n        {Object.keys(value).map(itemKey => (\n          <Row key={itemKey}>\n            <LabelColumn>{valueMap[itemKey]}</LabelColumn>\n            {mappedKeys.map((fieldKey, i) => (\n              <Column key={fieldKey}>\n                <Control>\n                  <SelectControl\n                    {...(perItemMapping\n                      ? mappedSelectors[itemKey][fieldKey]\n                      : mappedSelectors[fieldKey])}\n                    height={30}\n                    disabled={disabled}\n                    onChange={v => setValue(itemKey, fieldKey, v ? v.value : null)}\n                    value={value[itemKey][fieldKey]}\n                  />\n                </Control>\n                {i === mappedKeys.length - 1 && (\n                  <Actions>\n                    <Button\n                      icon={<IconDelete />}\n                      size=\"small\"\n                      disabled={disabled}\n                      onClick={() => removeRow(itemKey)}\n                    />\n                  </Actions>\n                )}\n              </Column>\n            ))}\n          </Row>\n        ))}\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    return (\n      <InputField\n        {...this.props}\n        inline={({model}) => !this.hasValue(model.getValue(this.props.name))}\n        field={this.renderField}\n      />\n    );\n  }\n}\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Heading = styled('div')`\n  display: flex;\n  margin-left: ${space(1)};\n  flex: 1 0 0;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Row = styled('div')`\n  display: flex;\n  margin-top: ${space(1)};\n  align-items: center;\n`;\n\nconst Column = styled('div')`\n  display: flex;\n  margin-left: ${space(1)};\n  align-items: center;\n  flex: 1 0 0;\n`;\n\nconst Control = styled('div')`\n  flex: 1;\n`;\n\nconst LabelColumn = styled('div')`\n  flex: 0 0 200px;\n`;\n\nconst HeadingItem = styled('div')`\n  font-size: 0.8em;\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n`;\n\nconst Actions = styled('div')`\n  margin-left: ${space(1)};\n`;\n","import InputField from './inputField';\n\ntype Props = InputField['props'];\n\nexport default function EmailField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"email\" />;\n}\n","export default function FieldSeparator() {\n  return <hr />;\n}\n","import styled from '@emotion/styled';\n\nimport InputField from './inputField';\n\ntype Props = Omit<InputField['props'], 'type'>;\n\nexport default function HiddenField(props: Props) {\n  return <HiddenInputField {...props} type=\"hidden\" />;\n}\n\nconst HiddenInputField = styled(InputField)`\n  display: none;\n`;\n","import InputField from './inputField';\n\ntype Props = InputField['props'];\n\nexport default function NumberField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"number\" />;\n}\n","import * as React from 'react';\n\nimport RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\n\ntype DefaultProps = {\n  formatMessageValue?: false | Function;\n};\n\ntype DisabledFunction = (props: Omit<Props, 'formatMessageValue'>) => boolean;\ntype PlaceholderFunction = (props: any) => React.ReactNode;\n\ntype Props = DefaultProps &\n  Omit<React.ComponentProps<typeof RangeSlider>, 'value' | 'disabled' | 'placeholder'> &\n  Omit<InputField['props'], 'disabled' | 'field'> & {\n    disabled?: boolean | DisabledFunction;\n    placeholder?: string | PlaceholderFunction;\n  };\n\nfunction onChange(\n  fieldOnChange: onEvent,\n  value: number | '',\n  e: React.FormEvent<HTMLInputElement>\n) {\n  fieldOnChange(value, e);\n}\n\nfunction defaultFormatMessageValue(value, props: Props) {\n  return (typeof props.formatLabel === 'function' && props.formatLabel(value)) || value;\n}\n\nexport default function RangeField({\n  formatMessageValue = defaultFormatMessageValue,\n  disabled,\n  ...otherProps\n}: Props) {\n  const resolvedDisabled =\n    typeof disabled === 'function' ? disabled(otherProps) : disabled;\n\n  const props: InputField['props'] = {\n    ...otherProps,\n    disabled: resolvedDisabled,\n    formatMessageValue,\n  };\n\n  return (\n    <InputField\n      {...props}\n      field={({onChange: fieldOnChange, onBlur, value, ...fieldProps}) => (\n        <RangeSlider\n          {...fieldProps}\n          value={value}\n          onBlur={onBlur}\n          onChange={(val, event) => onChange(fieldOnChange, val, event)}\n        />\n      )}\n    />\n  );\n}\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport Textarea from 'app/views/settings/components/forms/controls/textarea';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = Omit<InputField['props'], 'field'> &\n  Pick<\n    React.ComponentProps<typeof Textarea>,\n    'monospace' | 'autosize' | 'rows' | 'maxRows'\n  >;\n\nexport default function TextareaField({monospace, rows, autosize, ...props}: Props) {\n  return (\n    <InputField\n      {...props}\n      field={fieldProps => (\n        <Textarea\n          {...{monospace, rows, autosize}}\n          {...omit(fieldProps, ['onKeyDown', 'children'])}\n        />\n      )}\n    />\n  );\n}\n"],"names":["BooleanField","React","value","onChange","onBlur","e","newValue","this","coerceValue","render","confirm","fieldProps","props","resetOnError","field","disabled","handleChange","bind","switchProps","size","isActive","isDisabled","toggle","renderMessage","toString","onConfirm","open","defaultProps","addButtonText","t","perItemMapping","allowEmpty","ChoiceMapper","defined","objectIsEmpty","addDropdown","mappedColumnLabel","columnLabels","mappedSelectors","mappedKeys","Object","keys","emptyValue","reduce","a","v","valueIsEmpty","hasValue","saveChanges","nextValue","validValues","values","map","o","find","includes","selectableValues","items","filter","i","hasOwnProperty","valueMap","item","label","dropdown","alignMenu","onSelect","data","isOpen","icon","isCircled","Header","LabelColumn","HeadingItem","fieldKey","Heading","length","itemKey","Row","Column","Control","height","fieldValue","setValue","Actions","onClick","_","updatedValue","removeRow","inline","model","getValue","name","renderField","space","p","theme","subText","EmailField","type","FieldSeparator","HiddenField","HiddenInputField","InputField","NumberField","defaultFormatMessageValue","formatLabel","RangeField","formatMessageValue","otherProps","resolvedDisabled","fieldOnChange","val","event","TextField","TextareaField","monospace","rows","autosize","omit"],"sourceRoot":""}