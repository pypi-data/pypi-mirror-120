{"version":3,"file":"chunks/app_views_alerts_builder_projectProvider_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ulBAwBA,SAASA,EAA4BC,GACnC,MAAM,SAACC,EAAD,OAAWC,EAAX,aAAmBC,EAAnB,IAAiCC,KAAQC,GAASL,GAClD,UAACM,GAAaJ,EACpB,OACE,QAAC,IAAD,CAAUK,MAAOJ,EAAaK,KAAMC,aAAW,EAA/C,SACG,EAAEC,SAAAA,EAAUC,gBAAAA,EAAiBC,aAAAA,MAC5B,IAAKD,EACH,OAAO,QAAC,IAAD,IAET,MAAME,EAAWH,EAAuBI,MAAK,EAAEN,KAAAA,KAAUA,IAASF,IAElE,OAAIM,IAAiBC,GAEjB,QAAC,IAAD,CAAOE,KAAK,UAAZ,UACGC,EAAAA,EAAAA,GAAE,uDAKTC,EAAAA,EAAAA,IAAgBb,EAAKD,EAAaK,KAAM,CAACK,EAAQK,MAG/C,QAAC,IAAD,CAAaC,SAAUnB,EAAMmB,SAAUC,QAAS,KAAM,EAAtD,SACGnB,GAAYoB,EAAAA,eAAqBpB,GAC9BoB,EAAAA,aAAmBpB,EAAU,IACxBI,KACAJ,EAASD,MACZa,QAAAA,EACAV,aAAAA,IAEFF,QA9BPF,EAAAA,YAAAA,8BAsCT,SAAeuB,EAAAA,EAAAA,GAAQvB","sources":["webpack:///./app/views/alerts/builder/projectProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {fetchOrgMembers} from 'app/actionCreators/members';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport Projects from 'app/utils/projects';\nimport withApi from 'app/utils/withApi';\nimport ScrollToTop from 'app/views/settings/components/scrollToTop';\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  api: Client;\n  children?: React.ReactNode;\n  hasMetricAlerts: boolean;\n};\n\ntype RouteParams = {\n  projectId: string;\n};\n\nfunction AlertBuilderProjectProvider(props: Props) {\n  const {children, params, organization, api, ...other} = props;\n  const {projectId} = params;\n  return (\n    <Projects orgId={organization.slug} allProjects>\n      {({projects, initiallyLoaded, isIncomplete}) => {\n        if (!initiallyLoaded) {\n          return <LoadingIndicator />;\n        }\n        const project = (projects as Project[]).find(({slug}) => slug === projectId);\n        // if loaded, but project fetching states incomplete or project can't be found, project doesn't exist\n        if (isIncomplete || !project) {\n          return (\n            <Alert type=\"warning\">\n              {t('The project you were looking for was not found.')}\n            </Alert>\n          );\n        }\n        // fetch members list for mail action fields\n        fetchOrgMembers(api, organization.slug, [project.id]);\n\n        return (\n          <ScrollToTop location={props.location} disable={() => false}>\n            {children && React.isValidElement(children)\n              ? React.cloneElement(children, {\n                  ...other,\n                  ...children.props,\n                  project,\n                  organization,\n                })\n              : children}\n          </ScrollToTop>\n        );\n      }}\n    </Projects>\n  );\n}\n\nexport default withApi(AlertBuilderProjectProvider);\n"],"names":["AlertBuilderProjectProvider","props","children","params","organization","api","other","projectId","orgId","slug","allProjects","projects","initiallyLoaded","isIncomplete","project","find","type","t","fetchOrgMembers","id","location","disable","React","withApi"],"sourceRoot":""}