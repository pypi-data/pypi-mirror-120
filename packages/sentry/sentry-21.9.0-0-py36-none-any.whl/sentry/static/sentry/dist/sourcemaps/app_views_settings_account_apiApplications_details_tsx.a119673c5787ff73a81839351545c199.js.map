{"version":3,"file":"chunks/app_views_settings_account_apiApplications_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/data/forms/apiApplication.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiApplications/details.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx"],"sourcesContent":["import {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst forms: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Application Details',\n    fields: [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Name',\n        help: 'e.g. My Application',\n        setValue: value => getDynamicText({value, fixed: 'CI_APPLICATION_NAME'}),\n      },\n      {\n        name: 'homepageUrl',\n        type: 'string',\n        required: false,\n        label: 'Homepage',\n        placeholder: 'e.g. https://example.com/',\n        help: \"An optional link to your application's homepage\",\n      },\n      {\n        name: 'privacyUrl',\n        type: 'string',\n        label: 'Privacy Policy',\n        placeholder: 'e.g. https://example.com/privacy',\n        help: 'An optional link to your Privacy Policy',\n      },\n      {\n        name: 'termsUrl',\n        type: 'string',\n        label: 'Terms of Service',\n        placeholder: 'e.g. https://example.com/terms',\n        help: 'An optional link to your Terms of Service agreement',\n      },\n    ],\n  },\n\n  {\n    title: 'Security',\n    fields: [\n      {\n        name: 'redirectUris',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. https://example.com/oauth/complete',\n        label: 'Authorized Redirect URIs',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'allowedOrigins',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. example.com',\n        label: 'Authorized JavaScript Origins',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n];\n\nexport default forms;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport apiApplication from 'app/data/forms/apiApplication';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ApiApplication} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{appId: string}, {}>;\ntype State = {\n  app: ApiApplication;\n} & AsyncView['state'];\n\nclass ApiApplicationsDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['app', `/api-applications/${this.props.params.appId}/`]];\n  }\n\n  getTitle() {\n    return t('Application Details');\n  }\n\n  renderBody() {\n    const urlPrefix = ConfigStore.get('urlPrefix');\n\n    return (\n      <div>\n        <SettingsPageHeader title={this.getTitle()} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/api-applications/${this.props.params.appId}/`}\n          saveOnBlur\n          allowUndo\n          initialData={this.state.app}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm forms={apiApplication} />\n\n          <Panel>\n            <PanelHeader>{t('Credentials')}</PanelHeader>\n\n            <PanelBody>\n              <FormField name=\"clientID\" label=\"Client ID\">\n                {({value}) => (\n                  <div>\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_ID'})}\n                    </TextCopyInput>\n                  </div>\n                )}\n              </FormField>\n\n              <FormField\n                name=\"clientSecret\"\n                label=\"Client Secret\"\n                help={t(`Your secret is only available briefly after application creation. Make\n                  sure to save this value!`)}\n              >\n                {({value}) =>\n                  value ? (\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_SECRET'})}\n                    </TextCopyInput>\n                  ) : (\n                    <em>hidden</em>\n                  )\n                }\n              </FormField>\n\n              <FormField name=\"\" label=\"Authorization URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>}\n              </FormField>\n\n              <FormField name=\"\" label=\"Token URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/token/`}</TextCopyInput>}\n              </FormField>\n            </PanelBody>\n          </Panel>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplicationsDetails;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {IconChevron} from 'app/icons';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n\n  /** Can the PanelBody be hidden with a click? */\n  collapsible?: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    collapsed: false,\n  };\n\n  handleToggleEvents = () => {\n    const {collapsed} = this.state;\n\n    this.setState({collapsed: !collapsed});\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      collapsible,\n      ...otherProps\n    } = this.props;\n    const {collapsed} = this.state;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && (\n          <PanelHeader>\n            {title}\n            {collapsible && (\n              <Collapse onClick={this.handleToggleEvents}>\n                <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n              </Collapse>\n            )}\n          </PanelHeader>\n        )}\n        {!collapsed && (\n          <PanelBody>\n            {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n            {fields.map(field => {\n              if (typeof field === 'function') {\n                return field();\n              }\n\n              const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n              // Allow the form panel disabled prop to override the fields\n              // disabled prop, with fallback to the fields disabled state.\n              if (disabled === true) {\n                fieldWithoutDefaultValue.disabled = true;\n                fieldWithoutDefaultValue.disabledReason = undefined;\n              }\n\n              return (\n                <FieldFromConfig\n                  access={access}\n                  disabled={disabled}\n                  key={field.name}\n                  {...otherProps}\n                  {...additionalFieldProps}\n                  field={fieldWithoutDefaultValue}\n                  highlighted={this.props.highlighted === `#${field.name}`}\n                />\n              );\n            })}\n            {typeof renderFooter === 'function' && renderFooter({title, fields})}\n          </PanelBody>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n"],"names":["title","fields","name","type","required","label","help","setValue","value","getDynamicText","fixed","placeholder","multiline","getValue","val","extractMultilineFields","convertMultilineFieldValue","AsyncView","AsyncComponent","getTitle","render","this","renderComponent","ApiApplicationsDetails","getEndpoints","props","params","appId","t","renderBody","urlPrefix","ConfigStore","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","state","app","onSubmitError","addErrorMessage","forms","apiApplication","FormPanel","React","collapsed","setState","access","disabled","additionalFieldProps","renderFooter","renderHeader","collapsible","otherProps","id","sanitizeQuerySelector","undefined","Collapse","onClick","handleToggleEvents","direction","size","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","highlighted","JsonForm","location","hash","componentDidMount","scrollToHash","UNSAFE_componentWillReceiveProps","nextProps","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","features","_location","formGroup","i","withRouter"],"sourceRoot":""}