{"version":3,"file":"chunks/app_components_createAlertButton_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/createAlertButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport {Client} from 'app/api';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport GuideAnchor from 'app/components/assistant/guideAnchor';\nimport Button from 'app/components/button';\nimport Link from 'app/components/links/link';\nimport {IconClose, IconInfo, IconSiren} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Organization, Project} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport {Aggregation, AGGREGATIONS, explodeFieldString} from 'app/utils/discover/fields';\nimport withApi from 'app/utils/withApi';\nimport {\n  errorFieldConfig,\n  transactionFieldConfig,\n} from 'app/views/alerts/incidentRules/constants';\nimport {getQueryDatasource} from 'app/views/alerts/utils';\n\n/**\n * Discover query supports more features than alert rules\n * To create an alert rule from a discover query, some parameters need to be adjusted\n */\ntype IncompatibleQueryProperties = {\n  /**\n   * Must have exactly one project selected and not -1 (all projects)\n   */\n  hasProjectError: boolean;\n  /**\n   * Must have zero or one environments\n   */\n  hasEnvironmentError: boolean;\n  /**\n   * event.type must be error or transaction\n   */\n  hasEventTypeError: boolean;\n  hasYAxisError: boolean;\n};\n\ntype AlertProps = {\n  incompatibleQuery: IncompatibleQueryProperties;\n  eventView: EventView;\n  orgId: string;\n  /**\n   * Dismiss alert\n   */\n  onClose: () => void;\n};\n\n/**\n * Displays messages to the user on what needs to change in their query\n */\nfunction IncompatibleQueryAlert({\n  incompatibleQuery,\n  eventView,\n  orgId,\n  onClose,\n}: AlertProps) {\n  const {hasProjectError, hasEnvironmentError, hasEventTypeError, hasYAxisError} =\n    incompatibleQuery;\n\n  const totalErrors = Object.values(incompatibleQuery).filter(val => val === true).length;\n\n  const eventTypeError = eventView.clone();\n  eventTypeError.query += ' event.type:error';\n  const eventTypeTransaction = eventView.clone();\n  eventTypeTransaction.query += ' event.type:transaction';\n  const eventTypeDefault = eventView.clone();\n  eventTypeDefault.query += ' event.type:default';\n  const eventTypeErrorDefault = eventView.clone();\n  eventTypeErrorDefault.query += ' event.type:error or event.type:default';\n  const pathname = `/organizations/${orgId}/discover/results/`;\n\n  const eventTypeLinks = {\n    error: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeError.generateQueryStringObject(),\n        }}\n      />\n    ),\n    default: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n    transaction: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeTransaction.generateQueryStringObject(),\n        }}\n      />\n    ),\n    errorDefault: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeErrorDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n  };\n\n  return (\n    <StyledAlert type=\"warning\" icon={<IconInfo color=\"yellow300\" size=\"sm\" />}>\n      {totalErrors === 1 && (\n        <React.Fragment>\n          {hasProjectError &&\n            t('An alert can use data from only one Project. Select one and try again.')}\n          {hasEnvironmentError &&\n            t(\n              'An alert supports data from a single Environment or All Environments. Pick one try again.'\n            )}\n          {hasEventTypeError &&\n            tct(\n              'An alert needs a filter of [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)]. Use one of these and try again.',\n              eventTypeLinks\n            )}\n          {hasYAxisError &&\n            tct(\n              'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n              {\n                yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n              }\n            )}\n        </React.Fragment>\n      )}\n      {totalErrors > 1 && (\n        <React.Fragment>\n          {t('Yikes! That button didn’t work. Please fix the following problems:')}\n          <StyledUnorderedList>\n            {hasProjectError && <li>{t('Select one Project.')}</li>}\n            {hasEnvironmentError && (\n              <li>{t('Select a single Environment or All Environments.')}</li>\n            )}\n            {hasEventTypeError && (\n              <li>\n                {tct(\n                  'Use the filter [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)].',\n                  eventTypeLinks\n                )}\n              </li>\n            )}\n            {hasYAxisError && (\n              <li>\n                {tct(\n                  'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n                  {\n                    yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n                  }\n                )}\n              </li>\n            )}\n          </StyledUnorderedList>\n        </React.Fragment>\n      )}\n      <StyledCloseButton\n        icon={<IconClose color=\"yellow300\" size=\"sm\" isCircled />}\n        aria-label={t('Close')}\n        size=\"zero\"\n        onClick={onClose}\n        borderless\n      />\n    </StyledAlert>\n  );\n}\n\ntype CreateAlertFromViewButtonProps = React.ComponentProps<typeof Button> & {\n  className?: string;\n  projects: Project[];\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  organization: Organization;\n  referrer?: string;\n  /**\n   * Called when the current eventView does not meet the requirements of alert rules\n   * @returns a function that takes an alert close function argument\n   */\n  onIncompatibleQuery: (\n    incompatibleAlertNoticeFn: (onAlertClose: () => void) => React.ReactNode,\n    errors: IncompatibleQueryProperties\n  ) => void;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onSuccess: () => void;\n};\n\nfunction incompatibleYAxis(eventView: EventView): boolean {\n  const column = explodeFieldString(eventView.getYAxis());\n  if (column.kind === 'field' || column.kind === 'equation') {\n    return true;\n  }\n\n  const eventTypeMatch = eventView.query.match(/event\\.type:(transaction|error)/);\n  if (!eventTypeMatch) {\n    return false;\n  }\n\n  const dataset = eventTypeMatch[1];\n  const yAxisConfig = dataset === 'error' ? errorFieldConfig : transactionFieldConfig;\n\n  const invalidFunction = !yAxisConfig.aggregations.includes(column.function[0]);\n  // Allow empty parameters, allow all numeric parameters - eg. apdex(300)\n  const aggregation: Aggregation | undefined = AGGREGATIONS[column.function[0]];\n  if (!aggregation) {\n    return false;\n  }\n\n  const isNumericParameter = aggregation.parameters.some(\n    param => param.kind === 'value' && param.dataType === 'number'\n  );\n  // There are other measurements possible, but for the time being, only allow alerting\n  // on the predefined set of measurements for alerts.\n  const allowedParameters = [\n    '',\n    ...yAxisConfig.fields,\n    ...(yAxisConfig.measurementKeys ?? []),\n  ];\n  const invalidParameter =\n    !isNumericParameter && !allowedParameters.includes(column.function[1]);\n\n  return invalidFunction || invalidParameter;\n}\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onIncompatibleQuery,\n  onSuccess,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  // Must have exactly one project selected and not -1 (all projects)\n  const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;\n  // Must have one or zero environments\n  const hasEnvironmentError = eventView.environment.length > 1;\n  // Must have event.type of error or transaction\n  const hasEventTypeError = getQueryDatasource(eventView.query) === null;\n  // yAxis must be a function and enabled on alerts\n  const hasYAxisError = incompatibleYAxis(eventView);\n  const errors: IncompatibleQueryProperties = {\n    hasProjectError,\n    hasEnvironmentError,\n    hasEventTypeError,\n    hasYAxisError,\n  };\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const hasErrors = Object.values(errors).some(x => x);\n  const to = hasErrors\n    ? undefined\n    : {\n        pathname: `/organizations/${organization.slug}/alerts/${project?.slug}/new/`,\n        query: {\n          ...eventView.generateQueryStringObject(),\n          createFromDiscover: true,\n          referrer,\n        },\n      };\n\n  const handleClick = (event: React.MouseEvent) => {\n    if (hasErrors) {\n      event.preventDefault();\n      onIncompatibleQuery(\n        (onAlertClose: () => void) => (\n          <IncompatibleQueryAlert\n            incompatibleQuery={errors}\n            eventView={eventView}\n            orgId={organization.slug}\n            onClose={onAlertClose}\n          />\n        ),\n        errors\n      );\n      return;\n    }\n\n    onSuccess();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      {...buttonProps}\n    />\n  );\n}\n\ntype Props = {\n  organization: Organization;\n  projectSlug?: string;\n  iconProps?: React.ComponentProps<typeof IconSiren>;\n  referrer?: string;\n  hideIcon?: boolean;\n  api: Client;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  React.ComponentProps<typeof Button>;\n\nconst CreateAlertButton = withApi(\n  withRouter(\n    ({\n      organization,\n      projectSlug,\n      iconProps,\n      referrer,\n      router,\n      hideIcon,\n      api,\n      showPermissionGuide,\n      ...buttonProps\n    }: Props) => {\n      const createAlertUrl = (providedProj: string) => {\n        const alertsBaseUrl = `/organizations/${organization.slug}/alerts/${providedProj}`;\n        return `${alertsBaseUrl}/wizard/${referrer ? `?referrer=${referrer}` : ''}`;\n      };\n\n      function handleClickWithoutProject(event: React.MouseEvent) {\n        event.preventDefault();\n\n        navigateTo(createAlertUrl(':projectId'), router);\n      }\n\n      async function enableAlertsMemberWrite() {\n        const settingsEndpoint = `/organizations/${organization.slug}/`;\n        addLoadingMessage();\n        try {\n          await api.requestPromise(settingsEndpoint, {\n            method: 'PUT',\n            data: {\n              alertsMemberWrite: true,\n            },\n          });\n          addSuccessMessage(t('Successfully updated organization settings'));\n        } catch (err) {\n          addErrorMessage(t('Unable to update organization settings'));\n        }\n      }\n\n      const permissionTooltipText = tct(\n        'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n        {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n      );\n\n      const renderButton = (hasAccess: boolean) => (\n        <Button\n          disabled={!hasAccess}\n          title={!hasAccess ? permissionTooltipText : undefined}\n          icon={!hideIcon && <IconSiren {...iconProps} />}\n          to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n          tooltipProps={{\n            isHoverable: true,\n            position: 'top',\n            popperStyle: {\n              maxWidth: '270px',\n            },\n          }}\n          onClick={projectSlug ? undefined : handleClickWithoutProject}\n          {...buttonProps}\n        >\n          {buttonProps.children ?? t('Create Alert')}\n        </Button>\n      );\n\n      const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n      return (\n        <Access organization={organization} access={['alerts:write']}>\n          {({hasAccess}) =>\n            showGuide ? (\n              <Access organization={organization} access={['org:write']}>\n                {({hasAccess: isOrgAdmin}) => (\n                  <GuideAnchor\n                    target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                    onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                  >\n                    {renderButton(hasAccess)}\n                  </GuideAnchor>\n                )}\n              </Access>\n            ) : (\n              renderButton(hasAccess)\n            )\n          }\n        </Access>\n      );\n    }\n  )\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n\nconst StyledAlert = styled(Alert)`\n  color: ${p => p.theme.textColor};\n  margin-bottom: 0;\n`;\n\nconst StyledUnorderedList = styled('ul')`\n  margin-bottom: 0;\n`;\n\nconst StyledCode = styled('code')`\n  background-color: transparent;\n  padding: 0;\n`;\n\nconst StyledCloseButton = styled(Button)`\n  transition: opacity 0.1s linear;\n  position: absolute;\n  top: 3px;\n  right: 0;\n\n  &:hover,\n  &:focus {\n    background-color: transparent;\n    opacity: 1;\n  }\n`;\n"],"names":["IncompatibleQueryAlert","incompatibleQuery","eventView","orgId","onClose","hasProjectError","hasEnvironmentError","hasEventTypeError","hasYAxisError","totalErrors","Object","values","filter","val","length","eventTypeError","clone","query","eventTypeTransaction","eventTypeDefault","eventTypeErrorDefault","pathname","eventTypeLinks","error","to","generateQueryStringObject","default","transaction","errorDefault","StyledAlert","type","icon","color","size","t","tct","yAxis","StyledCode","getYAxis","StyledUnorderedList","StyledCloseButton","isCircled","onClick","borderless","CreateAlertFromViewButton","projects","organization","referrer","onIncompatibleQuery","onSuccess","buttonProps","errors","project","environment","getQueryDatasource","column","explodeFieldString","kind","eventTypeMatch","match","yAxisConfig","errorFieldConfig","transactionFieldConfig","invalidFunction","aggregations","includes","function","aggregation","AGGREGATIONS","isNumericParameter","parameters","some","param","dataType","allowedParameters","fields","measurementKeys","invalidParameter","incompatibleYAxis","find","p","id","hasErrors","x","undefined","slug","createFromDiscover","CreateAlertButton","event","preventDefault","onAlertClose","withApi","withRouter","projectSlug","iconProps","router","hideIcon","api","showPermissionGuide","createAlertUrl","providedProj","alertsBaseUrl","handleClickWithoutProject","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","settingsLink","renderButton","hasAccess","disabled","title","tooltipProps","isHoverable","position","popperStyle","maxWidth","children","showGuide","access","isOrgAdmin","target","onFinish","Alert","theme","textColor","Button"],"sourceRoot":""}