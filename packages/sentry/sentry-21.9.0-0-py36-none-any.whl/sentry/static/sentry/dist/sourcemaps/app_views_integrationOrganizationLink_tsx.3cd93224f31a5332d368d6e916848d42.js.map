{"version":3,"file":"chunks/app_views_integrationOrganizationLink_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/marked.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx"],"sourcesContent":["import dompurify from 'dompurify';\nimport marked from 'marked'; // eslint-disable-line no-restricted-imports\n\nimport {IS_ACCEPTANCE_TEST, NODE_ENV} from 'app/constants';\n\n// Only https and mailto, (e.g. no javascript, vbscript, data protocols)\nconst safeLinkPattern = /^(https?:|mailto:)/i;\n\nconst safeImagePattern = /^https?:\\/\\/./i;\n\nfunction isSafeHref(href: string, pattern: RegExp) {\n  try {\n    return pattern.test(decodeURIComponent(unescape(href)));\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Implementation of marked.Renderer which additonally sanitizes URLs.\n */\nclass SafeRenderer extends marked.Renderer {\n  link(href: string, title: string, text: string) {\n    // For a bad link, just return the plain text href\n    if (!isSafeHref(href, safeLinkPattern)) {\n      return href;\n    }\n\n    const out = `<a href=\"${href}\"${title ? ` title=\"${title}\"` : ''}>${text}</a>`;\n    return dompurify.sanitize(out);\n  }\n\n  image(href: string, title: string, text: string) {\n    // For a bad image, return an empty string\n    if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {\n      return '';\n    }\n\n    return `<img src=\"${href}\" alt=\"${text}\"${title ? ` title=\"${title}\"` : ''} />`;\n  }\n}\n\nclass NoParagraphRenderer extends SafeRenderer {\n  paragraph(text: string) {\n    return text;\n  }\n}\n\nmarked.setOptions({\n  renderer: new SafeRenderer(),\n  sanitize: true,\n\n  // Silence sanitize deprecation warning in test / ci (CI sets NODE_NV\n  // to production, but specifies `CI`).\n  //\n  // [!!] This has the side effect of causing failed markdown content to render\n  //      as a html error, instead of throwing an exception, however none of\n  //      our tests are rendering failed markdown so this is likely a safe\n  //      tradeoff to turn off off the deprecation warning.\n  silent: !!IS_ACCEPTANCE_TEST || NODE_ENV === 'test',\n});\n\nconst sanitizedMarked = (...args: Parameters<typeof marked>) =>\n  dompurify.sanitize(marked(...args));\n\nconst singleLineRenderer = (text: string, options: marked.MarkedOptions = {}) =>\n  sanitizedMarked(text, {...options, renderer: new NoParagraphRenderer()});\n\nexport {singleLineRenderer};\nexport default sanitizedMarked;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Integration, IntegrationProvider, Organization} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/analytics/integrationAnalyticsEvents';\nimport {\n  getIntegrationFeatureGate,\n  trackIntegrationAnalytics,\n} from 'app/utils/integrationUtil';\nimport {singleLineRenderer} from 'app/utils/marked';\nimport AsyncView from 'app/views/asyncView';\nimport AddIntegration from 'app/views/organizationIntegrations/addIntegration';\nimport Field from 'app/views/settings/components/forms/field';\n\n// installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrgSlug?: string;\n  organization?: Organization;\n  provider?: IntegrationProvider;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationAnalytics = (\n    eventName: IntegrationAnalyticsKey,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    // should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationAnalytics(\n      eventName,\n      {\n        integration_type: 'first_party',\n        integration: provider.key,\n        // We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n        organization,\n      },\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationAnalytics('integrations.integration_viewed', true);\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationAnalytics('integrations.installation_start');\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    // auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  // used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`\n    );\n  };\n\n  // non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    window.location.assign(\n      `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    // Github uses a different installation flow with the installationId as a parameter\n    // We have to wrap our installation button with AddIntegration so we can get the\n    // addIntegrationWithInstallationId callback.\n    // if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationDirectoryFeatures\n        organization={organization}\n        features={featuresComponents}\n      >\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n            organization={organization}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    // if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from 'react';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationAnalytics} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  account?: string;\n  organization: Organization; // for analytics\n  analyticsParams?: {\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n    already_installed: boolean;\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n"],"names":["safeLinkPattern","safeImagePattern","isSafeHref","href","pattern","test","decodeURIComponent","unescape","SafeRenderer","marked","link","title","text","out","dompurify","image","this","options","sanitize","NoParagraphRenderer","paragraph","renderer","silent","IS_ACCEPTANCE_TEST","NODE_ENV","sanitizedMarked","args","singleLineRenderer","AsyncView","AsyncComponent","getTitle","render","renderComponent","IntegrationOrganizationLink","eventName","startSession","organization","provider","state","trackIntegrationAnalytics","integration_type","integration","key","already_installed","view","orgSlug","organizations","find","org","slug","async","value","setState","selectedOrgSlug","reloading","undefined","providers","Promise","all","api","requestPromise","integrationSlug","length","Error","trackOpened","_err","addErrorMessage","t","access","includes","data","orgId","props","router","push","id","query","queryParams","trackInstallationStart","window","location","assign","urlEncode","orgProps","getOrgBySlug","avatarSize","displayName","name","avatarProps","consistentWidth","containerProps","valueList","getValue","getEndpoints","params","onLoadAllEndpointsSuccess","onSelectOrg","renderAddButton","installationId","features","metadata","featuresComponents","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","IntegrationDirectoryFeatures","getIntegrationFeatureGate","disabled","onInstall","onInstallWithInstallationId","addIntegrationWithInstallationId","ButtonWrapper","priority","hasAccess","onClick","installation_id","finishInstallation","renderBottom","FeatureList","Fragment","type","icon","size","tct","InstallLink","className","renderBody","label","integation","inline","stacked","required","onChange","placeholder","components","Option","customOption","ValueContainer","customValueContainer","AddIntegration","React","urlParams","account","analyticsParams","modalParams","url","width","height","setupDialog","left","top","computeCenteredWindow","installUrl","queryString","opts","dialog","open","focus","message","origin","document","source","success","addSuccessMessage","error","componentDidMount","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","openDialog"],"sourceRoot":""}