{"version":3,"file":"chunks/app_views_dashboardsV2_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0bAWA,SAASA,GAAoB,MAACC,EAAD,QAAQC,EAAR,YAAiBC,EAAjB,SAA8BC,IAiBzD,MAAMC,EAfCH,GAAYC,EAIbD,GAAWC,EACb,UAAUF,EAAV,cAAqBC,EAArB,cAAkCC,GAGhCD,EACF,UAAUD,EAAV,cAAqBC,GAGvB,UAAUD,EAAV,cAAqBE,GAXZF,EAgBX,OACE,QAAC,IAAD,CAAeA,MAAK,UAAKI,EAAL,aAApB,SACGD,IArBEJ,EAAAA,YAAAA,sBA0BT,W,uiBChBA,MAAMM,UAA8BC,EAAAA,UAClCC,SACE,MAAM,aAACC,EAAD,OAAeC,EAAf,IAAuBC,EAAvB,SAA4BC,EAA5B,SAAsCR,GAAYS,KAAKC,MAE7D,OAAIL,EAAaM,SAASC,SAAS,mBAC1BZ,GAGP,QAAC,EAAAa,sBAAD,CAAuBR,aAAcA,EAArC,UACE,QAAC,IAAD,CACEE,IAAKA,EACLC,SAAUA,EACVF,OAAQA,EACRD,aAAcA,EAJhB,SAMG,EAAES,UAAAA,EAAWC,WAAAA,EAAYC,MAAAA,EAAOC,WAAAA,KACxBD,GACL,QAAC,IAAD,IACEF,GACF,QAAC,IAAD,IACML,KAAKC,MACTQ,aAAcC,EAAAA,EAAAA,KACdL,UAAWA,EACXC,WAAYA,EACZE,WAAYA,KAGd,QAAC,IAAD,SA3BRf,EAAAA,YAAAA,wBAoCN,SAAekB,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,GAAiBnB,K,urBClBxC,MAAMoB,UAAsBC,EAAAA,EAA6B,mDACxC,CAEbC,SAAS,EACTC,WAAW,EACXT,OAAO,EACPU,OAAQ,GAERX,WAAY,GACZY,kBAAmB,OAGrBC,mBAAmBC,GACZC,GAAAA,CAAQD,EAAUvB,OAAOyB,YAAatB,KAAKC,MAAMJ,OAAOyB,cAC3DtB,KAAKuB,mBAITC,eACE,MAAM,aAAC5B,EAAD,OAAeC,GAAUG,KAAKC,MAC9BwB,EAAM,kBAAH,OAAqB7B,EAAa8B,KAAlC,gBACHC,EAAwD,CAAC,CAAC,aAAcF,IAY9E,OAVI5B,EAAOyB,cACTK,EAAUC,KAAK,CAAC,oBAAD,UAAyBH,GAAzB,OAA+B5B,EAAOyB,YAAtC,QACfO,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,mBACVC,UAAW,8BACXC,gBAAiBC,SAASjC,KAAKC,MAAML,aAAasC,GAAI,IACtDC,aAAcF,SAASpC,EAAOyB,YAAa,OAIxCK,EAGTS,gBACE,MAAM,WAAC9B,GAAcN,KAAKqC,MAE1B,OAAOC,MAAMC,QAAQjC,GAAcA,EAAa,GAGlDkC,kBAAiB,SAACC,EAAD,KAAWC,IAC1B,MAAM,OAAC7C,EAAD,aAASD,EAAT,SAAuBG,GAAYC,KAAKC,MAC9C,GAAIJ,EAAOyB,aAA4B,sBAAbmB,EACxB,OAKF,MAAMnB,EAAcoB,EAAKC,OAASD,EAAK,GAAGR,GAAK,mBACzCT,EAAM,kBAAH,OAAqB7B,EAAa8B,KAAlC,sBAAoDJ,EAApD,KACTsB,EAAAA,eAAAA,QAAuB,CACrBC,SAAUpB,EACVqB,MAAO,IACF/C,EAAS+C,SAKlBC,aACE,MAAM,SAACxD,GAAYS,KAAKC,OAClB,kBAACiB,EAAD,MAAoBX,GAASP,KAAKqC,MAExC,OAAO9C,EAAS,CACdgB,MAAAA,EACAF,UAAWa,EACXZ,WAAYN,KAAKoC,gBACjB5B,WAAYR,KAAKQ,WAAWwC,KAAKhD,QAIrCiD,YAAY1C,GAKV,OAJiB2C,OAAOC,OAAOnD,KAAKqC,MAAMpB,QAAQmC,MAChDC,GAAQA,GAAwB,MAAhBA,EAAKC,UAId,QAAC,IAAD,IAGFC,MAAMN,YAAY1C,GAAO,GAAM,GAGxCiD,kBACE,MAAM,aAAC5D,EAAD,SAAeG,GAAYC,KAAKC,MAEtC,OAAKL,EAAaM,SAASC,SAAS,qBAYlC,QAAC,IAAD,CAAqBf,OAAOqE,EAAAA,EAAAA,GAAE,cAAepE,QAASO,EAAa8B,KAAnE,SACG6B,MAAMC,qBAXTZ,EAAAA,eAAAA,QAAuB,CACrBC,SAAU,kBAAF,OAAoBjD,EAAa8B,KAAjC,gBACRoB,MAAO,IACF/C,EAAS+C,SAGT,OAWb,W,o6BCvHA,SAASY,EAAkBzD,GACzB,MAAM,IAACH,EAAD,aAAMF,EAAN,OAAoBC,EAApB,SAA4BE,GAAYE,EACxCqB,EAAczB,EAAOyB,YACrBjC,EAAUO,EAAa8B,MACtBiC,EAAWC,IAAgBC,EAAAA,EAAAA,YAelC,OAbAC,EAAAA,EAAAA,YAAU,KACJxC,GAA+B,qBAAhBA,IACjByC,EAAAA,EAAAA,IAAqBjE,EAAKT,EAASiC,GAGrC,MAAM0C,GAAoBC,EAAAA,EAAAA,IAAyBlE,EAAS+C,OAC5Dc,EAAaI,GAETA,GACFpB,EAAAA,eAAAA,QAAuB7C,EAAS8C,YAEjC,CAAC/C,EAAKT,EAASiC,KAGhB,QAAClB,EAAD,CAAuBR,aAAcA,EAArC,UACE,QAAC,IAAD,CACEE,IAAKA,EACLC,SAAUA,EACVF,OAAQA,EACRD,aAAcA,EAJhB,SAMG,EAAES,UAAAA,EAAWC,WAAAA,EAAYC,MAAAA,EAAOC,WAAAA,KACxBD,GACL,QAAC,IAAD,IACEF,GACF,QAAC,IAAD,IACMJ,EACJQ,aAAckD,EAAYjD,EAAAA,EAAAA,KAAsBA,EAAAA,EAAAA,KAChDL,UAAWA,EACXC,WAAYA,EACZE,WAAY,IAAI0D,KACVP,GACFC,OAAaO,GAER3D,KAAc0D,IAEvBP,UAAWA,KAGb,QAAC,IAAD,QA7CHD,EAAAA,YAAAA,oBAqDT,SAAe/C,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,GAAiB8C,IAO3BtD,EAAwB,EAAER,aAAAA,EAAcL,SAAAA,MAQjD,QAAC,IAAD,CACE6E,SAAS,mCACTlE,SAAU,CAAC,kCACXN,aAAcA,EACdyE,eAXmB,KACrB,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBb,EAAAA,EAAAA,GAAE,6CAK3B,SAMGlE,IAdMa,EAAAA,YAAAA","sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/dashboardsV2/index.tsx","webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState} from './types';\nimport {DashboardBasicFeature} from './view';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  api: Client;\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nclass DashboardsV2Container extends React.Component<Props> {\n  render() {\n    const {organization, params, api, location, children} = this.props;\n\n    if (organization.features.includes('dashboards-edit')) {\n      return children;\n    }\n    return (\n      <DashboardBasicFeature organization={organization}>\n        <OrgDashboards\n          api={api}\n          location={location}\n          params={params}\n          organization={organization}\n        >\n          {({dashboard, dashboards, error, reloadData}) => {\n            return error ? (\n              <NotFound />\n            ) : dashboard ? (\n              <DashboardDetail\n                {...this.props}\n                initialState={DashboardState.VIEW}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                reloadData={reloadData}\n              />\n            ) : (\n              <LoadingIndicator />\n            );\n          }}\n        </OrgDashboards>\n      </DashboardBasicFeature>\n    );\n  }\n}\n\nexport default withApi(withOrganization(DashboardsV2Container));\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'app/api';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport NotFound from 'app/components/errors/notFound';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\nimport {DashboardDetails, DashboardListItem} from './types';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  reloadData: () => void;\n};\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n  location: Location;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: parseInt(params.dashboardId, 10),\n      });\n    }\n\n    return endpoints;\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n\n    return children({\n      error,\n      dashboard: selectedDashboard,\n      dashboards: this.getDashboards(),\n      reloadData: this.reloadData.bind(this),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent()}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import React, {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {updateDashboardVisit} from 'app/actionCreators/dashboards';\nimport {Client} from 'app/api';\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport NotFound from 'app/components/errors/notFound';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\ntype Props = RouteComponentProps<{orgId: string; dashboardId: string}, {}> & {\n  api: Client;\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const {api, organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string\n    if (constructedWidget) {\n      browserHistory.replace(location.pathname);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, reloadData}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <DashboardDetail\n              {...props}\n              initialState={newWidget ? DashboardState.EDIT : DashboardState.VIEW}\n              dashboard={dashboard}\n              dashboards={dashboards}\n              reloadData={(...args) => {\n                if (newWidget) {\n                  setNewWidget(undefined);\n                }\n                return reloadData(...args);\n              }}\n              newWidget={newWidget}\n            />\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withApi(withOrganization(ViewEditDashboard));\n\ntype FeatureProps = {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","DashboardsV2Container","React","render","organization","params","api","location","this","props","features","includes","DashboardBasicFeature","dashboard","dashboards","error","reloadData","initialState","DashboardState","withApi","withOrganization","OrgDashboards","AsyncComponent","loading","reloading","errors","selectedDashboard","componentDidUpdate","prevProps","isEqual","dashboardId","remountComponent","getEndpoints","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","length","browserHistory","pathname","query","renderBody","bind","renderError","Object","values","find","resp","status","super","renderComponent","t","ViewEditDashboard","newWidget","setNewWidget","useState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","args","undefined","hookName","renderDisabled","type"],"sourceRoot":""}