{"version":3,"file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/switchButton.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  forwardRef?: React.Ref<HTMLButtonElement>;\n  className?: string;\n  id?: string;\n  name?: string;\n  size?: 'sm' | 'lg';\n  isActive?: boolean;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  toggle: React.HTMLProps<HTMLButtonElement>['onClick'];\n};\n\nconst Switch = ({\n  forwardRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n}: Props) => (\n  <SwitchButton\n    ref={forwardRef}\n    id={id}\n    name={name}\n    type=\"button\"\n    className={className}\n    onClick={isDisabled ? undefined : toggle}\n    role=\"checkbox\"\n    aria-checked={isActive}\n    isLoading={isLoading}\n    isDisabled={isDisabled}\n    isActive={isActive}\n    size={size}\n    data-test-id=\"switch\"\n  >\n    <Toggle\n      isDisabled={isDisabled}\n      isActive={isActive}\n      forceActiveColor={forceActiveColor}\n      size={size}\n    />\n  </SwitchButton>\n);\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 6 : 10);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 2 : 4);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  transition: 0.15s border ease;\n  cursor: ${p => (p.isLoading || p.isDisabled ? 'not-allowed' : 'pointer')};\n  pointer-events: ${p => (p.isLoading || p.isDisabled ? 'none' : null)};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 2}px;\n  border-radius: ${getSize}px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: ${p => p.theme.border};\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default React.forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardRef={ref} />\n));\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport Link from 'app/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport Switch from 'app/components/switchButton';\nimport Truncate from 'app/components/truncate';\nimport {IconAdd, IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport {LightWeightOrganization, ServiceHook} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  orgId: string;\n  projectId: string;\n  hook: ServiceHook;\n  onToggleActive: () => void;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <Field\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </Field>\n  );\n}\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: LightWeightOrganization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nclass ProjectServiceHooks extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {orgId, projectId} = this.props.params;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {\n      method: 'PUT',\n      data: {\n        isActive: hook.status !== 'active',\n      },\n      success: data => {\n        clearIndicators();\n        this.setState({\n          hookList: hookList.map(h => {\n            if (h.id === data.id) {\n              return {\n                ...h,\n                ...data,\n              };\n            }\n            return h;\n          }),\n        });\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={orgId}\n              projectId={projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {orgId, projectId} = this.props.params;\n    const access = new Set(this.props.organization.access);\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${orgId}/projects/${projectId}/hooks/new/`}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"names":["Switch","forwardRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","SwitchButton","ref","type","onClick","undefined","role","Toggle","getSize","p","getToggleSize","getToggleTop","getTranslateX","theme","border","active","React","props","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","ServiceHookRow","orgId","projectId","hook","onToggleActive","label","to","value","url","help","events","length","join","t","status","ProjectServiceHooks","params","hookList","state","addLoadingMessage","api","request","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","getEndpoints","renderEmpty","renderResults","Fragment","icon","bind","renderBody","body","access","Set","organization","action","has","priority","isCircled","withOrganization"],"sourceRoot":""}