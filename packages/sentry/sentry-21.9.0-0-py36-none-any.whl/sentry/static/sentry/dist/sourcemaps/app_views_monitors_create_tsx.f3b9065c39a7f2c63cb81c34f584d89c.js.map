{"version":3,"file":"chunks/app_views_monitors_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/create.tsx","webpack:///./app/views/monitors/monitorModel.tsx","webpack:///./app/views/monitors/monitorForm.tsx","webpack:///./app/views/settings/components/forms/numberField.tsx","webpack:///./app/views/settings/components/forms/textField.tsx"],"sourcesContent":["import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] & RouteComponentProps<{orgId: string}, {}>;\n\nexport default class CreateMonitor extends AsyncView<Props, AsyncView['state']> {\n  getTitle() {\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onSubmitSuccess = (data: Monitor) => {\n    browserHistory.push(`/organizations/${this.props.params.orgId}/monitors/${data.id}/`);\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <h1>New Monitor</h1>\n        <MonitorForm\n          apiMethod=\"POST\"\n          apiEndpoint={`/organizations/${this.props.params.orgId}/monitors/`}\n          onSubmitSuccess={this.onSubmitSuccess}\n        />\n      </Fragment>\n    );\n  }\n}\n","import FormModel from 'app/views/settings/components/forms/model';\n\nimport {MonitorConfig} from './types';\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\nexport default class MonitorModel extends FormModel {\n  getTransformedData() {\n    return this.fields.toJSON().reduce<TransformedData>((data, [k, v]) => {\n      if (k.indexOf('config.') !== 0) {\n        data[k] = v;\n        return data;\n      }\n\n      if (!data.config) {\n        data.config = {};\n      }\n      if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n        if (!Array.isArray(data.config.schedule)) {\n          data.config.schedule = [null, null];\n        }\n      }\n\n      if (k === 'config.schedule.frequency') {\n        data.config!.schedule![0] = parseInt(v as string, 10);\n      } else if (k === 'config.schedule.interval') {\n        data.config!.schedule![1] = v;\n      } else {\n        data.config[k.substr(7)] = v;\n      }\n\n      return data;\n    }, {});\n  }\n\n  getTransformedValue(id: string) {\n    return id.indexOf('config') === 0 ? this.getValue(id) : super.getTransformedValue(id);\n  }\n}\n","import {Component, Fragment} from 'react';\nimport {Observer} from 'mobx-react';\n\nimport Access from 'app/components/acl/access';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {Choices, GlobalSelection, Organization} from 'app/types';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport NumberField from 'app/views/settings/components/forms/numberField';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport TextField from 'app/views/settings/components/forms/textField';\n\nimport MonitorModel from './monitorModel';\nimport {Monitor, MonitorConfig, MonitorTypes, ScheduleType} from './types';\n\nconst SCHEDULE_TYPES: [ScheduleType, string][] = [\n  ['crontab', 'Crontab'],\n  ['interval', 'Interval'],\n];\n\nconst MONITOR_TYPES: Choices = [['cron_job', 'Cron Job']];\n\nconst INTERVALS = [\n  ['minute', 'minute(s)'],\n  ['hour', 'hour(s)'],\n  ['day', 'day(s)'],\n  ['week', 'week(s)'],\n  ['month', 'month(s)'],\n  ['year', 'year(s)'],\n];\n\ntype Props = {\n  monitor?: Monitor;\n  organization: Organization;\n  selection: GlobalSelection;\n  apiEndpoint: string;\n  apiMethod: Form['props']['apiMethod'];\n  onSubmitSuccess: Form['props']['onSubmitSuccess'];\n};\n\nclass MonitorForm extends Component<Props> {\n  form = new MonitorModel();\n\n  formDataFromConfig(type: MonitorTypes, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.organization.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Form\n            allowUndo\n            requireChanges\n            apiEndpoint={this.props.apiEndpoint}\n            apiMethod={this.props.apiMethod}\n            model={this.form}\n            initialData={\n              monitor\n                ? {\n                    name: monitor.name,\n                    type: monitor.type,\n                    project: monitor.project.slug,\n                    ...this.formDataFromConfig(monitor.type, monitor.config),\n                  }\n                : {\n                    project: selectedProject ? selectedProject.slug : null,\n                  }\n            }\n            onSubmitSuccess={this.props.onSubmitSuccess}\n          >\n            <Panel>\n              <PanelHeader>{t('Details')}</PanelHeader>\n\n              <PanelBody>\n                {monitor && (\n                  <Field label={t('ID')}>\n                    <div className=\"controls\">\n                      <TextCopyInput>{monitor.id}</TextCopyInput>\n                    </div>\n                  </Field>\n                )}\n                <SelectField\n                  name=\"project\"\n                  label={t('Project')}\n                  disabled={!hasAccess}\n                  choices={this.props.organization.projects\n                    .filter(p => p.isMember)\n                    .map(p => [p.slug, p.slug])}\n                  required\n                />\n                <TextField\n                  name=\"name\"\n                  placeholder={t('My Cron Job')}\n                  label={t('Name')}\n                  disabled={!hasAccess}\n                  required\n                />\n              </PanelBody>\n            </Panel>\n            <Panel>\n              <PanelHeader>{t('Config')}</PanelHeader>\n\n              <PanelBody>\n                <SelectField\n                  name=\"type\"\n                  label={t('Type')}\n                  disabled={!hasAccess}\n                  choices={MONITOR_TYPES}\n                  required\n                />\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('type')) {\n                      case 'cron_job':\n                        return (\n                          <Fragment>\n                            <NumberField\n                              name=\"config.max_runtime\"\n                              label={t('Max Runtime')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The maximum runtime (in minutes) a check-in is allowed before it's marked as a failure.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                            <SelectField\n                              name=\"config.schedule_type\"\n                              label={t('Schedule Type')}\n                              disabled={!hasAccess}\n                              choices={SCHEDULE_TYPES}\n                              required\n                            />\n                          </Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('config.schedule_type')) {\n                      case 'crontab':\n                        return (\n                          <Fragment>\n                            <TextField\n                              name=\"config.schedule\"\n                              label={t('Schedule')}\n                              disabled={!hasAccess}\n                              placeholder=\"*/5 * * * *\"\n                              required\n                              help={tct(\n                                'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',\n                                {\n                                  link: <a href=\"https://en.wikipedia.org/wiki/Cron\" />,\n                                }\n                              )}\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </Fragment>\n                        );\n                      case 'interval':\n                        return (\n                          <Fragment>\n                            <NumberField\n                              name=\"config.schedule.frequency\"\n                              label={t('Frequency')}\n                              disabled={!hasAccess}\n                              placeholder=\"e.g. 1\"\n                              required\n                            />\n                            <SelectField\n                              name=\"config.schedule.interval\"\n                              label={t('Interval')}\n                              disabled={!hasAccess}\n                              choices={INTERVALS}\n                              required\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n              </PanelBody>\n            </Panel>\n          </Form>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default withGlobalSelection(withOrganization(MonitorForm));\n","import InputField from './inputField';\n\ntype Props = InputField['props'];\n\nexport default function NumberField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"number\" />;\n}\n","import InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","CreateMonitor","data","browserHistory","props","params","orgId","id","renderBody","Fragment","apiMethod","apiEndpoint","onSubmitSuccess","MonitorModel","FormModel","getTransformedData","fields","toJSON","reduce","k","v","indexOf","config","Array","isArray","schedule","parseInt","substr","getTransformedValue","getValue","super","SCHEDULE_TYPES","MONITOR_TYPES","INTERVALS","MonitorForm","Component","formDataFromConfig","type","rv","schedule_type","checkin_margin","max_runtime","monitor","selectedProjectId","selection","projects","selectedProject","organization","find","p","access","hasAccess","allowUndo","requireChanges","model","form","initialData","name","project","slug","t","label","className","disabled","choices","filter","isMember","map","required","placeholder","help","tct","link","href","withGlobalSelection","withOrganization","NumberField","TextField"],"sourceRoot":""}