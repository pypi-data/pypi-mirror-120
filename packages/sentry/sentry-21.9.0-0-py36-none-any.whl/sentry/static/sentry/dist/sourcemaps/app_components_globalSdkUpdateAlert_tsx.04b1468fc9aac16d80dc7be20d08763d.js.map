{"version":3,"file":"chunks/app_components_globalSdkUpdateAlert_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"okCAsEA,MAAMA,UAAkCC,EAAAA,UAA8B,mDACrD,CACbC,YAAa,QAFqD,4BAuBrD,KACb,MAAM,IAACC,EAAD,aAAMC,GAAgBC,KAAKC,OACjCC,EAAAA,EAAAA,IAAcJ,EAAK,CACjBK,eAAgBJ,EAAaK,GAC7BC,QAAS,cACTC,OAAQ,YAGVN,KAAKO,SAAS,CAACV,aAAa,IAnDD,GAAEE,aAAAA,OAC/BS,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,sBACVC,UAAW,uBACXC,gBAAiBZ,EAAaK,MAgD9BQ,CAAuB,CAACb,aAAcC,KAAKC,MAAMF,kBA3BnDc,oBACEb,KAAKc,eAjCmB,GAAEf,aAAAA,OAC5BS,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,mBACVC,UAAW,oBACXC,gBAAiBZ,EAAaK,MA8B9BW,CAAoB,CAAChB,aAAcC,KAAKC,MAAMF,eAG9B,qBAChB,MAAM,IAACD,EAAD,aAAMC,GAAgBC,KAAKC,MAE3Be,QAAeF,EAAAA,EAAAA,IAAahB,EAAK,CACrCK,eAAgBJ,EAAaK,GAC7BC,QAAS,gBAGXL,KAAKO,SAAS,CACZV,aAAaoB,EAAAA,EAAAA,GAAkBD,KAgBnCE,SACE,MACEpB,IAAKqB,EADD,UAEJC,EAFI,WAGJC,EAHI,aAIJtB,EAJI,QAKJuB,KACGrB,GACDD,KAAKC,OAEH,YAACJ,GAAeG,KAAKuB,MAE3B,IAAKF,GAA8B,OAAhBxB,GAAwBA,EACzC,OAAO,KAcT,GAA0D,KApElC2B,EA6DS,KAA/BJ,MAAAA,OAAA,EAAAA,EAAWK,SAASC,UAAgBN,MAAAA,OAAA,EAAAA,EAAWK,YAAa,CAACE,EAAAA,IACzDN,EACAA,EAAWO,QAAOC,IAAM,aACtBT,MAAAA,GADsB,UACtBA,EAAWK,gBADW,aACtB,EAAqBK,SAASC,SAASF,EAAOG,UAAW,QA/DnER,EAAKS,QACH,CAACC,EAAaC,IAAQ,IAAID,KAAgBC,EAAID,cAC9C,KAiE+CR,OAC7C,OAAO,KArEeF,IAAAA,EAwExB,MAAMY,GACJ,QAAC,KAAD,CACEC,SAAS,OACTC,QAAS,KACPC,EAAAA,EAAAA,cAAkCC,EAAAA,EAAAA,YAnFb,GAAEzC,aAAAA,OAC/BS,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,sBACVC,UAAW,uBACXC,gBAAiBZ,EAAaK,MAgFxBqC,CAAuB,CAAC1C,aAAAA,KAJ5B,UAOG2C,EAAAA,EAAAA,GAAE,oBAIDC,GACJ,QAAC,IAAD,CAAOC,KAAK,OAAOC,MAAM,QAAC,KAAD,OAAqB5C,EAA9C,UACE,QAAC6C,EAAD,YACGJ,EAAAA,EAAAA,GAAE,2FAGH,QAACK,EAAD,YACE,QAAC,KAAD,CACEV,SAAS,OACTW,OAAON,EAAAA,EAAAA,GAAE,kCACTJ,QAAStC,KAAKiD,aAHhB,UAKGP,EAAAA,EAAAA,GAAE,qBANP,IAQIN,UAMV,OAAOd,GAAU,QAACA,EAAD,UAAUqB,IAAoBA,GAlG7ChD,EAAAA,YAAAA,4BAsGN,MAAMmD,GAAU,OAAO,MAAP,sBAAH,mDAIUI,GAAKA,EAAEC,MAAMC,YAAY,IAJnC,qCASPL,GAAU,OAAO,MAAP,sBAAH,uEAGCM,EAAAA,EAAAA,GAAM,GAHP,KAUb,GAJ6BC,EAAAA,EAAAA,IAC3BC,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,IAAoBC,EAAAA,EAAAA,GAAQ9D","sources":["webpack:///./app/components/globalSdkUpdateAlert.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'app/actionCreators/prompts';\nimport SidebarPanelActions from 'app/actions/sidebarPanelActions';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport {ALL_ACCESS_PROJECTS} from 'app/constants/globalSelectionHeader';\nimport {IconUpgrade} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {\n  GlobalSelection,\n  Organization,\n  ProjectSdkUpdates,\n  SDKUpdatesSuggestion,\n} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport {promptIsDismissed} from 'app/utils/promptIsDismissed';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport withSdkUpdates from 'app/utils/withSdkUpdates';\n\nimport {SidebarPanelKey} from './sidebar/types';\nimport Button from './button';\n\ntype Props = React.ComponentProps<typeof Alert> & {\n  api: Client;\n  organization: Organization;\n  sdkUpdates?: ProjectSdkUpdates[] | null;\n  selection?: GlobalSelection;\n  Wrapper?: React.ComponentType;\n};\n\ntype State = {\n  isDismissed: boolean | null;\n};\n\ntype AnalyticsOpts = {\n  organization: Organization;\n};\n\nconst recordAnalyticsSeen = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.seen',\n    eventName: 'SDK Updates: Seen',\n    organization_id: organization.id,\n  });\n\nconst recordAnalyticsSnoozed = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.snoozed',\n    eventName: 'SDK Updates: Snoozed',\n    organization_id: organization.id,\n  });\n\nconst recordAnalyticsClicked = ({organization}: AnalyticsOpts) =>\n  trackAnalyticsEvent({\n    eventKey: 'sdk_updates.clicked',\n    eventName: 'SDK Updates: Clicked',\n    organization_id: organization.id,\n  });\n\nconst flattenSuggestions = (list: ProjectSdkUpdates[]) =>\n  list.reduce<SDKUpdatesSuggestion[]>(\n    (suggestions, sdk) => [...suggestions, ...sdk.suggestions],\n    []\n  );\n\nclass InnerGlobalSdkSuggestions extends React.Component<Props, State> {\n  state: State = {\n    isDismissed: null,\n  };\n\n  componentDidMount() {\n    this.promptsCheck();\n    recordAnalyticsSeen({organization: this.props.organization});\n  }\n\n  async promptsCheck() {\n    const {api, organization} = this.props;\n\n    const prompt = await promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n    });\n\n    this.setState({\n      isDismissed: promptIsDismissed(prompt),\n    });\n  }\n\n  snoozePrompt = () => {\n    const {api, organization} = this.props;\n    promptsUpdate(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n      status: 'snoozed',\n    });\n\n    this.setState({isDismissed: true});\n    recordAnalyticsSnoozed({organization: this.props.organization});\n  };\n\n  render() {\n    const {\n      api: _api,\n      selection,\n      sdkUpdates,\n      organization,\n      Wrapper,\n      ...props\n    } = this.props;\n\n    const {isDismissed} = this.state;\n\n    if (!sdkUpdates || isDismissed === null || isDismissed) {\n      return null;\n    }\n\n    // withSdkUpdates explicitly only queries My Projects. This means that when\n    // looking at any projects outside of My Projects (like All Projects), this\n    // will only show the updates relevant to the to user.\n    const projectSpecificUpdates =\n      selection?.projects.length === 0 || selection?.projects === [ALL_ACCESS_PROJECTS]\n        ? sdkUpdates\n        : sdkUpdates.filter(update =>\n            selection?.projects?.includes(parseInt(update.projectId, 10))\n          );\n\n    // Are there any updates?\n    if (flattenSuggestions(projectSpecificUpdates).length === 0) {\n      return null;\n    }\n\n    const showBroadcastsPanel = (\n      <Button\n        priority=\"link\"\n        onClick={() => {\n          SidebarPanelActions.activatePanel(SidebarPanelKey.Broadcasts);\n          recordAnalyticsClicked({organization});\n        }}\n      >\n        {t('Review updates')}\n      </Button>\n    );\n\n    const notice = (\n      <Alert type=\"info\" icon={<IconUpgrade />} {...props}>\n        <Content>\n          {t(\n            `You have outdated SDKs in your projects. Update them for important fixes and features.`\n          )}\n          <Actions>\n            <Button\n              priority=\"link\"\n              title={t('Dismiss for the next two weeks')}\n              onClick={this.snoozePrompt}\n            >\n              {t('Remind me later')}\n            </Button>\n            |{showBroadcastsPanel}\n          </Actions>\n        </Content>\n      </Alert>\n    );\n\n    return Wrapper ? <Wrapper>{notice}</Wrapper> : notice;\n  }\n}\n\nconst Content = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    justify-content: space-between;\n  }\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(3, max-content);\n  grid-gap: ${space(1)};\n`;\n\nconst GlobalSdkSuggestions = withOrganization(\n  withSdkUpdates(withGlobalSelection(withApi(InnerGlobalSdkSuggestions)))\n);\n\nexport default GlobalSdkSuggestions;\n"],"names":["InnerGlobalSdkSuggestions","React","isDismissed","api","organization","this","props","promptsUpdate","organizationId","id","feature","status","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","recordAnalyticsSnoozed","componentDidMount","promptsCheck","recordAnalyticsSeen","prompt","promptIsDismissed","render","_api","selection","sdkUpdates","Wrapper","state","list","projects","length","ALL_ACCESS_PROJECTS","filter","update","includes","parseInt","projectId","reduce","suggestions","sdk","showBroadcastsPanel","priority","onClick","SidebarPanelActions","SidebarPanelKey","recordAnalyticsClicked","t","notice","type","icon","Content","Actions","title","snoozePrompt","p","theme","breakpoints","space","withOrganization","withSdkUpdates","withGlobalSelection","withApi"],"sourceRoot":""}