{"version":3,"file":"chunks/app_views_settings_projectPlugins_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/actions/pluginActions.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/components/switchButton.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPlugins/projectPluginRow.tsx","webpack:///./app/views/settings/projectPlugins/projectPlugins.tsx","webpack:///./app/views/settings/projectPlugins/index.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport PluginActions from 'app/actions/pluginActions';\nimport {Client, RequestOptions} from 'app/api';\nimport {t} from 'app/locale';\nimport {Plugin} from 'app/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginActions.update(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginActions.updateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginActions.updateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginActions.fetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginActions.fetchAllSuccess(data, {pageLinks: resp?.getResponseHeader('Link')});\n\n      return data;\n    })\n    .catch(err => {\n      PluginActions.fetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import Reflux from 'reflux';\n\nconst PluginActions = Reflux.createActions([\n  'update',\n  'updateError',\n  'updateSuccess',\n  'fetchAll',\n  'fetchAllSuccess',\n  'fetchAllError',\n]);\n\nexport default PluginActions;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  forwardRef?: React.Ref<HTMLButtonElement>;\n  className?: string;\n  id?: string;\n  name?: string;\n  size?: 'sm' | 'lg';\n  isActive?: boolean;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  toggle: React.HTMLProps<HTMLButtonElement>['onClick'];\n};\n\nconst Switch = ({\n  forwardRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n}: Props) => (\n  <SwitchButton\n    ref={forwardRef}\n    id={id}\n    name={name}\n    type=\"button\"\n    className={className}\n    onClick={isDisabled ? undefined : toggle}\n    role=\"checkbox\"\n    aria-checked={isActive}\n    isLoading={isLoading}\n    isDisabled={isDisabled}\n    isActive={isActive}\n    size={size}\n    data-test-id=\"switch\"\n  >\n    <Toggle\n      isDisabled={isDisabled}\n      isActive={isActive}\n      forceActiveColor={forceActiveColor}\n      size={size}\n    />\n  </SwitchButton>\n);\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 6 : 10);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 2 : 4);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);\n  transition: 0.15s border ease;\n  cursor: ${p => (p.isLoading || p.isDisabled ? 'not-allowed' : 'pointer')};\n  pointer-events: ${p => (p.isLoading || p.isDisabled ? 'none' : null)};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 2}px;\n  border-radius: ${getSize}px;\n\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: ${p => p.theme.border};\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    box-shadow: rgba(209, 202, 216, 0.5) 0 0 0 3px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default React.forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardRef={ref} />\n));\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import Reflux from 'reflux';\n\nimport PluginActions from 'app/actions/pluginActions';\nimport {Plugin} from 'app/types';\n\ntype PluginStoreInterface = {\n  state: {\n    loading: boolean;\n    plugins: Plugin[];\n    error: Error | null;\n    pageLinks: string | null;\n  };\n  plugins: Map<string, Plugin> | null;\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst PluginStoreConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = Reflux.createStore(PluginStoreConfig) as Reflux.Store &\n  PluginStoreInterface;\n\nexport default PluginStore;\n","import * as React from 'react';\n\nimport {fetchPlugins} from 'app/actionCreators/plugins';\nimport PluginsStore from 'app/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  plugins: Plugin[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends React.Component<\n    Omit<P, keyof 'plugins'> & WithPluginProps,\n    State\n  > {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import * as React from 'react';\n\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {PureComponent} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'app/components/acl/access';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport Switch from 'app/components/switchButton';\nimport {t} from 'app/locale';\nimport PluginIcon from 'app/plugins/components/pluginIcon';\nimport {Organization, Plugin, Project} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {trackIntegrationAnalytics} from 'app/utils/integrationUtil';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withOrganization from 'app/utils/withOrganization';\n\nconst grayText = css`\n  color: #979ba0;\n`;\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  onChange: (id: string, enabled: boolean) => void;\n} & Plugin &\n  Pick<RouteComponentProps<{}, {}>, 'params' | 'routes'>;\n\nclass ProjectPluginRow extends PureComponent<Props> {\n  handleChange = () => {\n    const {onChange, id, enabled} = this.props;\n    onChange(id, !enabled);\n    const eventKey = !enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: id,\n      integration_type: 'plugin',\n      view: 'legacy_integrations',\n      organization: this.props.organization,\n    });\n  };\n\n  render() {\n    const {id, name, slug, version, author, hasConfiguration, enabled, canDisable} =\n      this.props;\n\n    const configureUrl = recreateRoute(id, this.props);\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => {\n          const LinkOrSpan = hasAccess ? Link : 'span';\n\n          return (\n            <PluginItem key={id} className={slug}>\n              <PluginInfo>\n                <StyledPluginIcon size={48} pluginId={id} />\n                <PluginDescription>\n                  <PluginName>\n                    {`${name} `}\n                    {getDynamicText({\n                      value: (\n                        <Version>{version ? `v${version}` : <em>{t('n/a')}</em>}</Version>\n                      ),\n                      fixed: <Version>v10</Version>,\n                    })}\n                  </PluginName>\n                  <div>\n                    {author && (\n                      <ExternalLink css={grayText} href={author.url}>\n                        {author.name}\n                      </ExternalLink>\n                    )}\n                    {hasConfiguration && (\n                      <span>\n                        {' '}\n                        &middot;{' '}\n                        <LinkOrSpan css={grayText} to={configureUrl}>\n                          {t('Configure plugin')}\n                        </LinkOrSpan>\n                      </span>\n                    )}\n                  </div>\n                </PluginDescription>\n              </PluginInfo>\n              <Switch\n                size=\"lg\"\n                isDisabled={!hasAccess || !canDisable}\n                isActive={enabled}\n                toggle={this.handleChange}\n              />\n            </PluginItem>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPluginRow);\n\nconst PluginItem = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst PluginDescription = styled('div')`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst PluginInfo = styled('div')`\n  display: flex;\n  flex: 1;\n  line-height: 24px;\n`;\n\nconst PluginName = styled('div')`\n  font-size: 16px;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: 16px;\n`;\n\n// Keeping these colors the same from old integrations page\nconst Version = styled('span')`\n  color: #babec2;\n`;\n","import {Component} from 'react';\nimport * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Access from 'app/components/acl/access';\nimport Link from 'app/components/links/link';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {Plugin, Project} from 'app/types';\nimport RouteError from 'app/views/routeError';\n\nimport ProjectPluginRow from './projectPluginRow';\n\ntype Props = {\n  plugins: Plugin[];\n  loading: boolean;\n  error: React.ComponentProps<typeof RouteError>['error'];\n  onChange: React.ComponentProps<typeof ProjectPluginRow>['onChange'];\n  project: Project;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nclass ProjectPlugins extends Component<Props> {\n  render() {\n    const {plugins, loading, error, onChange, routes, params, project} = this.props;\n    const {orgId} = this.props.params;\n    const hasError = error;\n    const isLoading = !hasError && loading;\n\n    if (hasError) {\n      return <RouteError error={error} />;\n    }\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>\n          <div>{t('Legacy Integration')}</div>\n          <div>{t('Enabled')}</div>\n        </PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"warning\">\n            <Access access={['org:integrations']}>\n              {({hasAccess}) =>\n                hasAccess\n                  ? tct(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.\",\n                      {\n                        link: <Link to={`/settings/${orgId}/integrations`} />,\n                      }\n                    )\n                  : t(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available.\"\n                    )\n              }\n            </Access>\n          </PanelAlert>\n\n          {plugins\n            .filter(p => {\n              return !p.isHidden;\n            })\n            .map(plugin => (\n              <PanelItem key={plugin.id}>\n                <ProjectPluginRow\n                  params={params}\n                  routes={routes}\n                  project={project}\n                  {...plugin}\n                  onChange={onChange}\n                />\n              </PanelItem>\n            ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default ProjectPlugins;\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {disablePlugin, enablePlugin, fetchPlugins} from 'app/actionCreators/plugins';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {trackIntegrationAnalytics} from 'app/utils/integrationUtil';\nimport withPlugins from 'app/utils/withPlugins';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\n\nimport ProjectPlugins from './projectPlugins';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  plugins: {\n    plugins: Plugin[];\n    error: React.ComponentProps<typeof ProjectPlugins>['error'];\n    loading: boolean;\n  };\n  organization: Organization;\n  project: Project;\n};\n\nclass ProjectPluginsContainer extends React.Component<Props> {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    const plugins = await fetchPlugins(this.props.params);\n    const installCount = plugins.filter(\n      plugin => plugin.hasConfiguration && plugin.enabled\n    ).length;\n    trackIntegrationAnalytics(\n      'integrations.index_viewed',\n      {\n        integrations_installed: installCount,\n        view: 'legacy_integrations',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  };\n\n  handleChange = (pluginId: string, shouldEnable: boolean) => {\n    const {projectId, orgId} = this.props.params;\n    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;\n    actionCreator({projectId, orgId, pluginId});\n  };\n\n  render() {\n    const {loading, error, plugins} = this.props.plugins || {};\n    const {orgId} = this.props.params;\n\n    const title = t('Legacy Integrations');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} orgSlug={orgId} />\n        <SettingsPageHeader title={title} />\n        <PermissionAlert />\n\n        <ProjectPlugins\n          {...this.props}\n          onChange={this.handleChange}\n          loading={loading}\n          error={error}\n          plugins={plugins}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withPlugins(ProjectPluginsContainer);\n"],"names":["activeFetch","api","Client","doUpdate","orgId","projectId","pluginId","update","params","PluginActions","request","requestPromise","then","catch","resp","err","responseJSON","detail","Error","fetchPlugins","options","path","method","includeAllArgs","data","_","pageLinks","getResponseHeader","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","Reflux","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","Switch","forwardRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","SwitchButton","ref","type","onClick","undefined","role","Toggle","getSize","p","getToggleSize","getToggleTop","getTranslateX","theme","border","active","React","props","recreateRoute","to","routes","location","stepBack","paths","map","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","defaultState","loading","plugins","error","PluginStoreConfig","state","updating","Map","reset","this","getInitialState","getState","_plugins","Array","from","values","init","listenTo","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","plugin","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","WrappedComponent","WithPlugins","PluginsStore","setState","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","render","getDisplayName","withOrganization","withProject","PermissionAlert","access","hasAccess","icon","grayText","ProjectPluginRow","PureComponent","onChange","eventKey","trackIntegrationAnalytics","integration","integration_type","view","version","author","hasConfiguration","canDisable","configureUrl","LinkOrSpan","Link","PluginItem","PluginInfo","StyledPluginIcon","PluginDescription","PluginName","getDynamicText","value","Version","fixed","css","href","url","handleChange","PluginIcon","ProjectPlugins","Component","tct","link","filter","isHidden","ProjectPluginsContainer","async","installCount","length","integrations_installed","startSession","shouldEnable","fetchData","withPlugins"],"sourceRoot":""}