{"version":3,"file":"chunks/app_components_banner_tsx-app_components_charts_areaChart_tsx-app_components_charts_eventsReq-f3717c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"kdAwBO,SAASA,EACdC,EACAC,EACAC,GAEA,MAAMC,EAA+BH,EAAII,eAAJ,yBACjBH,EADiB,2BACOC,EADP,KAEnC,CACEG,OAAQ,QAOZ,OAHAF,EAAQG,OAAM,MACZC,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,kCAEbL,EAGF,SAASM,EACdT,EACAC,EACAS,GAEA,MAAMP,EAA+BH,EAAII,eAAJ,yBACjBH,EADiB,oBAEnC,CACEI,OAAQ,OACRM,KAAMD,IAOV,OAHAP,EAAQG,OAAM,MACZC,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,yCAEbL,EAGF,SAASS,EACdZ,EACAC,EACAS,GAEA,MAAMP,EAA+BH,EAAII,eAAJ,yBACjBH,EADiB,2BACOS,EAAMG,GADb,KAEnC,CACER,OAAQ,MACRM,KAAMD,IAOV,OAHAP,EAAQG,OAAM,MACZC,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,yCAEbL,EAGF,SAASW,EACdb,EACAC,GAWA,OARY,IAAIa,EAAAA,IACIX,eAAJ,yBACIH,EADJ,2BAC4BC,EAD5B,WAEd,CACEG,OAAQ,SAOP,SAASW,EACdhB,EACAC,EACAC,GAEA,MAAMC,EAAyBH,EAAII,eAAJ,yBACXH,EADW,2BACaC,EADb,KAE7B,CAACG,OAAQ,WAMX,OAHAF,EAAQG,OAAM,MACZC,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,wCAEbL,I,+kBCnGT,MAAMc,EAAWC,GAAD,UAAuBA,EAAvB,qBAEhB,SAASC,EAAcC,GACrBC,aAAaC,QAAQL,EAAQG,GAAY,QAmC3C,MAAMG,EAAqB,EACzBC,MAAAA,EACAC,SAAAA,EACAC,cAAAA,GAAgB,EAChBC,WAAAA,EAAa,iBACbC,UAAAA,EACAC,cAAAA,EACAC,oBAAAA,EACAC,SAAAA,MAEA,MAAOC,EAAWC,GA1CpB,SAAwBb,GACtB,MAAMc,EAAMjB,EAAQG,IACbe,EAAOC,GAAYC,EAAAA,SAAehB,aAAaiB,QAAQJ,IAO9D,MAAO,CAAW,SAAVC,EALQ,KACdC,EAAS,QACTjB,EAAcC,KAoCamB,CAAeZ,GAE5C,OAAIK,EACK,MAIP,QAACQ,EAAD,CAAeX,cAAeA,EAAeD,UAAWA,EAAxD,UACGE,EACAJ,GAAgB,QAACe,EAAD,CAAaC,QAAST,EAAS,cAAYzB,EAAAA,EAAAA,GAAE,WAAe,MAC7E,QAACmC,EAAD,YACE,QAACC,EAAD,UAAcpB,KACd,QAACqB,EAAD,UAAiBpB,KACjB,QAACqB,EAAD,CAAiBC,IAAK,EAAtB,SAA0BhB,WAvB5BR,EAAAA,YAAAA,SA6BNA,EAAOU,QAAUd,EAEjB,MAAMqB,GAAgB,OAAO,MAAP,sBAClBQ,GACAA,EAAEnB,eACEoB,EAAAA,EAAAA,IADJ,kBAEwBD,EAAEnB,cAF1B,8FAOIoB,EAAAA,EAAAA,IAPJ,oBAQ0BD,EAAEE,MAAMC,QARlC,SAFe,4GAiBAC,EAAAA,EAAAA,GAAM,GAjBN,gBAkBHJ,GAAKA,EAAEE,MAAMG,iBAlBV,mBAmBAL,GAAKA,EAAEE,MAAMI,cAnBb,wBAqBRN,GAAKA,EAAEE,MAAMK,OArBL,wBAuBIP,GAAKA,EAAEE,MAAMM,YAAY,IAvB7B,oBA4Bbb,GAAgB,OAAO,MAAP,qBAAH,4HAMNS,EAAAA,EAAAA,GAAM,GANA,KASbR,GAAc,OAAO,KAAP,qBAAH,gCAGMI,GAAKA,EAAEE,MAAMM,YAAY,IAH/B,sBAQXX,GAAiB,OAAO,MAAP,qBAAH,gCAGGG,GAAKA,EAAEE,MAAMM,YAAY,IAH5B,gBAIHR,GAAKA,EAAEE,MAAMO,oBAJV,MAQdX,GAAkB,OAAOY,EAAAA,GAAP,qBAAH,eACLN,EAAAA,EAAAA,GAAM,GADD,uBAKfX,GAAc,OAAOkB,EAAAA,GAAP,qBAAH,wCAGRP,EAAAA,EAAAA,GAAM,GAHE,WAINA,EAAAA,EAAAA,GAAM,GAJA,WAKNJ,GAAKA,EAAEE,MAAMK,OALP,8BAUjBd,EAAYmB,aAAe,CACzBC,MAAM,QAAC,KAAD,IACNC,OAAOtD,EAAAA,EAAAA,GAAE,SACTuD,SAAU,OACVC,YAAY,EACZC,KAAM,UAGR,W,4TC1IA,MAAMC,UAAkB7B,EAAAA,UACtB8B,SACE,MAAM,OAACC,EAAD,QAASC,EAAT,OAAkBC,KAAWC,GAASC,KAAKD,MAEjD,OACE,QAAC,IAAD,IACMA,EACJD,OAAQA,EACRF,OAAQA,EAAOK,KAAI,EAAEC,WAAAA,EAAY/D,KAAAA,KAASgE,GAAmBC,ICrBtD,SACbL,EAAiC,IAEjC,OAAOM,EAAAA,EAAAA,GAAW,IACbN,IDkBGO,CAAW,CACTC,MAAOV,EAAU,YAASW,EAC1BC,KAAMP,EACN/D,KAAMA,EAAK8D,KAAI,EAAEQ,KAAAA,EAAM9C,MAAAA,KAAW,CAAC8C,EAAM9C,KACzC+C,UAAW,CACTC,MAAOb,MAAAA,OAAF,EAAEA,EAASM,GAChBQ,QAAS,EACTC,MAAO,IAETC,UAAW,CACTH,MAAOb,MAAAA,OAAF,EAAEA,EAASM,GAChBQ,QAAS,GAEXG,WAAW,EACXC,mBAAoB,EACpBC,kBAAmB,KAChBd,SAzBTT,EAAAA,YAAAA,YAiCN,W,8oBEkIA,MAAMwB,EAAoB,CAAC,MAAO,WAAY,eAAgB,WACxDC,EAAoBpB,GACxBqB,GAAAA,CAAOrB,GAAO,CAACsB,EAAQ3D,IAAQwD,EAAkBI,SAAS5D,KAE5D,MAAM6D,UAAsB1D,EAAAA,cAA4D,mDAY1D,CAC1B2D,YAAaxB,KAAKD,MAAM0B,QACxBC,SAAS,EACTC,eAAgB,KAChBC,qBAAqB,KAhB+D,0BAkCxD,IAlCwD,yBAoC1EC,UACV,MAAM,IAACrG,EAAD,eAAMsG,EAAN,QAAsBC,EAAtB,KAA+BtB,EAA/B,UAAqCuB,KAAcjC,GAASC,KAAKD,MACvE,IAAI4B,EAA8D,KAElE,IAAuB,IAAnBG,EAAJ,CASA,GALA9B,KAAKiC,UAASC,IAAS,CACrBV,UAAoC,OAAzBU,EAAMP,eACjBD,SAAS,MAGPK,GACFhG,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,GAAE,qEAAsEyE,GACxE,CAAC0B,QAAQ,IAGXnC,KAAKiC,SAAS,CACZP,SAAS,SAGX,IACElG,EAAI4G,QACJT,QAAuBU,EAAAA,EAAAA,IAAgB7G,EAAKuE,GAC5C,MAAOuC,GACFN,IACCM,GAAQA,EAAKC,cAAgBD,EAAKC,aAAaC,QACjDzG,EAAAA,EAAAA,IAAgBuG,EAAKC,aAAaC,SAElCzG,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,8BAGtBgE,KAAKiC,SAAS,CACZP,SAAS,IAKX1B,KAAKyC,YAITzC,KAAKiC,SAAS,CACZT,WAAW,EACXG,eAAAA,EACAC,oBAAqB7B,EAAM2C,uBAnFuD,uBA+FpFvG,IAEA,MAAM,oBAACyF,GAAuB5B,KAAKkC,OAC7B,OAACS,EAAD,gBAASD,GAAmB1C,KAAKD,MAEjC6C,EACJhB,IAAuBiB,EAAAA,EAAAA,IAAyBH,EAAiBC,GAE7DG,EAAkBC,KAAKC,MAAM7G,EAAK8G,OAAS,GACjD,MAAO,CACLC,QAASN,EAAoBzG,EAAKgH,MAAML,GAAmB3G,EAC3DiH,SAAUR,EAAoBzG,EAAKgH,MAAM,EAAGL,GAAmB,SAvFnEO,oBACErD,KAAKsD,YAGPC,mBAAmBC,GACbC,GAAAA,CAAQtC,EAAiBqC,GAAYrC,EAAiBnB,KAAKD,SAG/DC,KAAKsD,YAGPI,uBACE1D,KAAKyC,YAAa,EAgFpBkB,4BACExH,EACAyH,EAIcC,CAAAA,GAAyB,IAAZA,IAE3B,OAAO1H,EAAK8D,KAAI,EAAE4D,EAAWC,GAAa1D,KAA1B,CACdK,KAAMmD,EAAQC,EAAWC,EAAY1D,GACrCzC,MAAOmG,EAAWC,QAAO,CAACC,GAAMC,MAAAA,KAAWD,EAAMC,GAAO,OAQ5DC,4BACEhB,EACAE,GACe,MAGf,OAAKA,EAIE,CACLlD,WAAU,UAAEF,KAAKD,MAAMoE,0BAAb,QAAmC,WAC7ChI,KAAM6D,KAAK2D,4BACTP,GACA,CAACgB,EAAYC,EAAajE,IAAsB,IAAhB8C,EAAQ9C,GAAG,MAPtC,KAeXkE,8BAA8BnI,EAAuB+D,EAAqB,IACxE,MAAO,CACLA,WAAAA,EACA/D,KAAM6D,KAAK2D,4BAA4BxH,IAO3CoI,wBAAwBpI,EAAuB+D,GAC7C,MAAO,CACL,CACEA,WAAYA,GAAc,UAC1B/D,KAAMA,EAAK8D,KAAI,EAAE4D,EAAWW,MAAb,CACb/D,KAAkB,IAAZoD,EACNlG,MAAO6G,EAAmBT,QAAO,CAACC,GAAMC,MAAAA,KAAWD,EAAMC,GAAO,SAMxEQ,YAAYC,GACV,IAAKA,EACH,MAAO,GAGT,MAAM,KAACvI,EAAD,OAAOwI,GAAUD,GACjB,uBAACE,EAAD,uBAAyBC,EAAzB,0BAAiDC,GACrD9E,KAAKD,OACD,QAACmD,EAAD,SAAUE,GAAYpD,KAAK+E,QAAQ5I,GAuBzC,MAAO,CACLA,KAvBsByI,EACpB5E,KAAKuE,wBAAwBrB,EAASlD,KAAKD,MAAMiF,mBACjD,GAsBFC,QAAS9I,EACT+I,aAAchC,EACdyB,OAAAA,EACAQ,qBAAsB/B,EACtBgC,aAzBmBR,EACjB5E,KAAKkE,4BAA4BhB,EAASE,GAC1C,KAwBFiC,mBAvByBR,EACvB7E,KAAKsE,8BAA8BpB,EAAS4B,GAA6B,IACzE,GAsBFQ,UApBAZ,EAASa,OAASb,EAASc,IACtBpC,EAKC,CAEEmC,MAAyC,KAAjCb,EAASa,MAAQb,EAASc,KAClCA,IAAoB,IAAfd,EAASc,KAPhB,CACED,MAAwB,IAAjBb,EAASa,MAChBC,IAAoB,IAAfd,EAASc,UAOlBhF,GAaRb,SACE,MAAM,SAACpC,EAAD,YAAWkI,KAAgB1F,GAASC,KAAKD,OACzC,eAAC4B,EAAD,UAAiBH,EAAjB,QAA4BE,GAAW1B,KAAKkC,MAE5CT,EAAUzB,KAAKD,MAAM0B,SAA8B,OAAnBE,EAEtC,GAAI8D,GAAehE,EACjB,OAAO,QAAC,IAAD,CAAc,eAAa,2BAGpC,IAAIiE,EAAAA,EAAAA,IAAmB/D,GAAiB,CAMtC,IAAI2D,EAoBJ,OAAO/H,EAAS,CACdkE,QAAAA,EACAD,UAAAA,EACAE,QAAAA,EACAiE,QAvBkCC,OAAOC,KAAKlE,GAC7C1B,KAAKC,IACJ,MAAM4F,EAA0BnE,EAAezB,GAE3C4F,EAAWP,OAASO,EAAWN,MAAQF,IACzCA,EAAY,CACVC,MAA0B,IAAnBO,EAAWP,MAClBC,IAAsB,IAAjBM,EAAWN,MAGpB,MAAMO,EAAc/F,KAAKuE,wBACvBuB,EAAW3J,KACX+D,GACA,GACF,MAAO,CAAC4F,EAAWE,OAAS,EAAGD,MAEhCE,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAKC,EAAE,KACxBlG,KAAImG,GAAQA,EAAK,KAOlBd,UAAAA,KAEGvF,IAIP,MACE5D,KAAMkK,EACNpB,QAASqB,EACTpB,aAAcqB,EACd5B,OAAQ6B,EACRrB,qBAAsBsB,EACtBrB,aAAcsB,EANV,mBAOJrB,EAPI,UAQJC,GACEtF,KAAKyE,YAAY9C,GAErB,OAAOpE,EAAS,CACdkE,QAAAA,EACAD,UAAAA,EACAE,QAAAA,EAEAC,eAAgB0E,EAChBC,kBAAAA,EACAC,uBAAAA,EACAC,iBAAAA,EACAC,+BAAAA,EACAC,uBAAAA,EACArB,mBAAAA,EACAC,UAAAA,KAEGvF,KAhSHwB,EAAAA,YAAAA,iB,OAAAA,EAAAA,eACgC,CAClCoB,YAAQnC,EACR+E,MAAO,KACPC,IAAK,KACLmB,SAAU,KACVC,MAAO,GACP1K,MAAO,GACPwG,iBAAiB,EACjBkC,wBAAwB,IA2R5B,W,yRCjdA,SAASiC,GAAoB,MAAC7J,EAAD,QAAQ8J,EAAR,YAAiBC,EAAjB,SAA8BxJ,IAiBzD,MAAMyJ,EAfCF,GAAYC,EAIbD,GAAWC,EACb,UAAU/J,EAAV,cAAqB8J,EAArB,cAAkCC,GAGhCD,EACF,UAAU9J,EAAV,cAAqB8J,GAGvB,UAAU9J,EAAV,cAAqB+J,GAXZ/J,EAgBX,OACE,QAAC,IAAD,CAAeA,MAAK,UAAKgK,EAAL,aAApB,SACGzJ,IArBEsJ,EAAAA,YAAAA,sBA0BT,W,4QCzBO,SAASI,EACdzL,EACA0L,EACAC,EAGAC,GAAsB,GAEtB,MAAMC,EAAUF,EAAUG,cAE1BC,EAAAA,EAAAA,IAAoB,IACfC,EAA+BJ,EAAY,WAC9CK,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,KAGjC,MAAM1L,GAAUM,EAAAA,EAAAA,IAAiBT,EAAK0L,EAAaU,KAAMP,GA2BzD,OAzBA1L,EACGkM,MAAMC,KACLC,EAAAA,EAAAA,KAAkB/L,EAAAA,EAAAA,GAAE,iBAEpBuL,EAAAA,EAAAA,IAAoB,IACfC,EAA+BJ,EAAY,WAC9CK,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,KAG1BS,KAERhM,OAAOkM,KACNjM,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,qBAElBuL,EAAAA,EAAAA,IAAoB,IACfC,EAA+BJ,EAAY,UAC9CK,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,GAC/BY,MACGD,GAAOA,EAAIE,SAAZ,2BACoBd,EAAa,MAAQ,WADzC,eAKDzL,EAGT,MAAMwM,EAA0B,CAC9BC,QAAS,2DACTC,QAAS,8DACTC,OAAQ,2DAEJC,EAAqB,CACzBH,QAAS,0CACTC,QAAS,6CACTC,OAAQ,0CAGH,SAASE,EACdhN,EACA0L,EACAC,GAEA,MAAME,EAAUF,EAAUG,aAE1B,IAAKH,EAAU1G,KAEb,OADA1E,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,2BACXyM,QAAQC,UAGjBnB,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,mCACVC,UAAW,8CACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,KAGjC,MAAM1L,GAAUS,EAAAA,EAAAA,IAAiBZ,EAAK0L,EAAaU,KAAMP,GA8BzD,OA5BA1L,EACGkM,MAAMC,KACLC,EAAAA,EAAAA,KAAkB/L,EAAAA,EAAAA,GAAE,mBAEpBuL,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,mCACVC,UAAW,iDACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,KAM1BS,KAERhM,OAAOkM,KACNjM,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,uBAElBuL,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,kCACVC,UAAW,6CACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,GAC/BY,MAAQD,GAAOA,EAAIE,SAAY,gCAI9BvM,EAOF,SAASkN,EACdrN,EACA0L,EACAC,GAEA,MAAME,EAAUF,EAAUG,cAE1BC,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,wCACVC,UAAW,qDACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,KAGjC,MAAM1L,GAAUS,EAAAA,EAAAA,IAAiBZ,EAAK0L,EAAaU,KAAMP,GAyBzD,OAvBA1L,EACGkM,MAAKiB,KACJf,EAAAA,EAAAA,KAAkB/L,EAAAA,EAAAA,GAAE,sBAEpBuL,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,wCACVC,UAAW,wDACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,QAGlCvL,OAAOkM,KACNjM,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,0BAElBuL,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,kCACVC,UAAW,oDACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BN,GAC/BY,MAAQD,GAAOA,EAAIE,SAAY,qCAI9BvM,EAGF,SAASoN,EACdvN,EACA0L,EACAC,IAEAI,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,mCACVC,UAAW,8CACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BR,EAAUG,gBAG3C,MAAM3L,GAAUa,EAAAA,EAAAA,IAAiBhB,EAAK0L,EAAaU,KAAMT,EAAU9K,IAyBnE,OAvBAV,EACGkM,MAAK,MACJE,EAAAA,EAAAA,KAAkB/L,EAAAA,EAAAA,GAAE,mBAEpBuL,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,mCACVC,UAAW,iDACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BR,EAAUG,mBAG5CxL,OAAOkM,KACNjM,EAAAA,EAAAA,KAAgBC,EAAAA,EAAAA,GAAE,uBAElBuL,EAAAA,EAAAA,IAAoB,CAClBoB,SAAU,kCACVC,UAAW,6CACXnB,gBAAiBC,SAASR,EAAa7K,GAAI,OACxCsL,EAA4BR,EAAUG,cACzCW,MAAQD,GAAOA,EAAIE,SAAY,8BAI9BvM,EAGF,SAAS6L,EAGdJ,EACA4B,GAQA,MAAO,CACLL,SAPevB,EACb,8BAAgC4B,EAChC,mCAAqCA,EAMvCJ,UAJgBxB,EAAamB,EAAmBS,GAAQb,EAAwBa,IAY7E,SAASrB,EAA4BN,GAC1C,MAAM,SAAC4B,EAAD,OAAWC,EAAX,MAAmBhN,GAASmL,EAClC,MAAO,CACL4B,SAAAA,EACAC,OAAAA,EACAhN,MAAAA,K,uCCnMJiN,EAAOC,QAhBP,SAAgBC,GACd,GAAwB,mBAAbA,EACT,MAAM,IAAIC,UAxBQ,uBA0BpB,OAAO,WACL,IAAIC,EAAOC,UACX,OAAQD,EAAKtG,QACX,KAAK,EAAG,OAAQoG,EAAUI,KAAKzJ,MAC/B,KAAK,EAAG,OAAQqJ,EAAUI,KAAKzJ,KAAMuJ,EAAK,IAC1C,KAAK,EAAG,OAAQF,EAAUI,KAAKzJ,KAAMuJ,EAAK,GAAIA,EAAK,IACnD,KAAK,EAAG,OAAQF,EAAUI,KAAKzJ,KAAMuJ,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAE9D,OAAQF,EAAUK,MAAM1J,KAAMuJ,M,6CCnClC,IAAII,EAAe,EAAQ,2CACvBC,EAAS,EAAQ,oCACjBC,EAAS,EAAQ,oCA0BrBV,EAAOC,QAJP,SAAgBU,EAAQT,GACtB,OAAOQ,EAAOC,EAAQF,EAAOD,EAAaN","sources":["webpack:///./app/actionCreators/discoverSavedQueries.tsx","webpack:///./app/components/banner.tsx","webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/eventsRequest.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/views/eventsV2/savedQuery/utils.tsx","webpack:///../node_modules/lodash/negate.js","webpack:///../node_modules/lodash/omitBy.js"],"sourcesContent":["import {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport {NewQuery, SavedQuery} from 'app/types';\n\nexport function fetchSavedQueries(\n  api: Client,\n  orgId: string,\n  query: string = ''\n): Promise<SavedQuery[]> {\n  const promise: Promise<SavedQuery[]> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/`,\n    {\n      method: 'GET',\n      query: {query: `version:2 ${query}`.trim()},\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to load saved queries'));\n  });\n  return promise;\n}\n\nexport function fetchSavedQuery(\n  api: Client,\n  orgId: string,\n  queryId: string\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/`,\n    {\n      method: 'GET',\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to load saved query'));\n  });\n  return promise;\n}\n\nexport function createSavedQuery(\n  api: Client,\n  orgId: string,\n  query: NewQuery\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/`,\n    {\n      method: 'POST',\n      data: query,\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to create your saved query'));\n  });\n  return promise;\n}\n\nexport function updateSavedQuery(\n  api: Client,\n  orgId: string,\n  query: NewQuery\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${query.id}/`,\n    {\n      method: 'PUT',\n      data: query,\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to update your saved query'));\n  });\n  return promise;\n}\n\nexport function updateSavedQueryVisit(\n  orgId: string,\n  queryId: string | string[]\n): Promise<void> {\n  // Create a new client so the request is not cancelled\n  const api = new Client();\n  const promise = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/visit/`,\n    {\n      method: 'POST',\n    }\n  );\n\n  return promise;\n}\n\nexport function deleteSavedQuery(\n  api: Client,\n  orgId: string,\n  queryId: string\n): Promise<void> {\n  const promise: Promise<void> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/`,\n    {method: 'DELETE'}\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to delete the saved query'));\n  });\n  return promise;\n}\n","import * as React from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport {IconClose} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\nconst makeKey = (prefix: string) => `${prefix}-banner-dismissed`;\n\nfunction dismissBanner(bannerKey: string) {\n  localStorage.setItem(makeKey(bannerKey), 'true');\n}\n\nfunction useDismissable(bannerKey: string) {\n  const key = makeKey(bannerKey);\n  const [value, setValue] = React.useState(localStorage.getItem(key));\n\n  const dismiss = () => {\n    setValue('true');\n    dismissBanner(bannerKey);\n  };\n\n  return [value === 'true', dismiss] as const;\n}\n\ntype BannerWrapperProps = {\n  backgroundImg?: string;\n  backgroundComponent?: React.ReactNode;\n};\n\ntype Props = BannerWrapperProps & {\n  title?: string;\n  subtitle?: string;\n  isDismissable?: boolean;\n  dismissKey?: string;\n  className?: string;\n};\n\ntype BannerType = React.FC<Props> & {\n  /**\n   * Helper function to hide banners outside of their usage\n   */\n  dismiss: typeof dismissBanner;\n};\n\nconst Banner: BannerType = ({\n  title,\n  subtitle,\n  isDismissable = true,\n  dismissKey = 'generic-banner',\n  className,\n  backgroundImg,\n  backgroundComponent,\n  children,\n}) => {\n  const [dismissed, dismiss] = useDismissable(dismissKey);\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <BannerWrapper backgroundImg={backgroundImg} className={className}>\n      {backgroundComponent}\n      {isDismissable ? <CloseButton onClick={dismiss} aria-label={t('Close')} /> : null}\n      <BannerContent>\n        <BannerTitle>{title}</BannerTitle>\n        <BannerSubtitle>{subtitle}</BannerSubtitle>\n        <StyledButtonBar gap={1}>{children}</StyledButtonBar>\n      </BannerContent>\n    </BannerWrapper>\n  );\n};\n\nBanner.dismiss = dismissBanner;\n\nconst BannerWrapper = styled('div')<BannerWrapperProps>`\n  ${p =>\n    p.backgroundImg\n      ? css`\n          background: url(${p.backgroundImg});\n          background-repeat: no-repeat;\n          background-size: cover;\n          background-position: center center;\n        `\n      : css`\n          background-color: ${p.theme.gray500};\n        `}\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  margin-bottom: ${space(2)};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  border-radius: ${p => p.theme.borderRadius};\n  height: 180px;\n  color: ${p => p.theme.white};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    height: 220px;\n  }\n`;\n\nconst BannerContent = styled('div')`\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: repeat(3, max-content);\n  text-align: center;\n  padding: ${space(4)};\n`;\n\nconst BannerTitle = styled('h1')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    font-size: 40px;\n  }\n`;\n\nconst BannerSubtitle = styled('div')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    font-size: ${p => p.theme.fontSizeExtraLarge};\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(2)};\n  width: fit-content;\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  display: block;\n  top: ${space(2)};\n  right: ${space(2)};\n  color: ${p => p.theme.white};\n  cursor: pointer;\n  z-index: 1;\n`;\n\nCloseButton.defaultProps = {\n  icon: <IconClose />,\n  label: t('Close'),\n  priority: 'link',\n  borderless: true,\n  size: 'xsmall',\n};\n\nexport default Banner;\n","import * as React from 'react';\nimport {EChartOption} from 'echarts';\n\nimport {Series} from 'app/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nexport type AreaChartSeries = Series & Omit<EChartOption.SeriesLine, 'data' | 'name'>;\n\ntype Props = Omit<ChartProps, 'series'> & {\n  stacked?: boolean;\n  series: AreaChartSeries[];\n};\n\nclass AreaChart extends React.Component<Props> {\n  render() {\n    const {series, stacked, colors, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        colors={colors}\n        series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n          AreaSeries({\n            stack: stacked ? 'area' : undefined,\n            name: seriesName,\n            data: data.map(({name, value}) => [name, value]),\n            lineStyle: {\n              color: colors?.[i],\n              opacity: 1,\n              width: 0.4,\n            },\n            areaStyle: {\n              color: colors?.[i],\n              opacity: 1.0,\n            },\n            animation: false,\n            animationThreshold: 1,\n            animationDuration: 0,\n            ...otherSeriesProps,\n          })\n        )}\n      />\n    );\n  }\n}\n\nexport default AreaChart;\n","import {EChartOption} from 'echarts';\n\nimport LineSeries from 'app/components/charts/series/lineSeries';\n\nexport default function AreaSeries(\n  props: EChartOption.SeriesLine = {}\n): EChartOption.SeriesLine {\n  return LineSeries({\n    ...props,\n  });\n}\n","import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {doEventsRequest} from 'app/actionCreators/events';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport LoadingPanel from 'app/components/charts/loadingPanel';\nimport {canIncludePreviousPeriod, isMultiSeriesStats} from 'app/components/charts/utils';\nimport {t} from 'app/locale';\nimport {\n  DateString,\n  EventsStats,\n  EventsStatsData,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'app/types';\nimport {Series, SeriesDataUnit} from 'app/types/echarts';\n\nexport type TimeSeriesData = {\n  // timeseries data\n  timeseriesData?: Series[];\n  allTimeseriesData?: EventsStatsData;\n  originalTimeseriesData?: EventsStatsData;\n  timeseriesTotals?: {count: number};\n  originalPreviousTimeseriesData?: EventsStatsData | null;\n  previousTimeseriesData?: Series | null;\n  timeAggregatedData?: Series | {};\n  timeframe?: {start: number; end: number};\n};\n\ntype LoadingStatus = {\n  loading: boolean;\n  reloading: boolean;\n  /**\n   * Whether there was an error retrieving data\n   */\n  errored: boolean;\n};\n\n// Chart format for multiple series.\ntype MultiSeriesResults = Series[];\n\ntype RenderProps = LoadingStatus & TimeSeriesData & {results?: MultiSeriesResults};\n\ntype DefaultProps = {\n  /**\n   * Relative time period for query.\n   *\n   * Use `start` and `end` for absolute dates.\n   *\n   * e.g. 24h, 7d, 30d\n   */\n  period?: string;\n  /**\n   * Absolute start date for query\n   */\n  start?: DateString;\n  /**\n   * Absolute end date for query\n   */\n  end?: DateString;\n  /**\n   * Interval to group results in\n   *\n   * e.g. 1d, 1h, 1m, 1s\n   */\n  interval: string;\n  /**\n   * number of rows to return\n   */\n  limit: number;\n  /**\n   * The query string to search events by\n   */\n  query: string;\n  /**\n   * Include data for previous period\n   */\n  includePrevious: boolean;\n  /**\n   * Transform the response data to be something ingestible by charts\n   */\n  includeTransformedData: boolean;\n};\n\ntype EventsRequestPartialProps = {\n  /**\n   * API client instance\n   */\n  api: Client;\n  organization: OrganizationSummary;\n  /**\n   * List of project ids to query\n   */\n  project?: Readonly<number[]>;\n  /**\n   * List of environments to query\n   */\n  environment?: Readonly<string[]>;\n  /**\n   * List of team ids to query\n   */\n  team?: Readonly<string | string[]>;\n  /**\n   * List of fields to group with when doing a topEvents request.\n   */\n  field?: string[];\n  /**\n   * Initial loading state\n   */\n  loading?: boolean;\n  /**\n   * Should loading be shown.\n   */\n  showLoading?: boolean;\n  /**\n   * The yAxis being plotted. If multiple yAxis are requested,\n   * the child render function will be called with `results`\n   */\n  yAxis?: string | string[];\n  /**\n   * Name used for display current series data set tooltip\n   */\n  currentSeriesName?: string;\n  previousSeriesName?: string;\n  children: (renderProps: RenderProps) => React.ReactNode;\n  /**\n   * The number of top results to get. When set a multi-series result will be returned\n   * in the `results` child render function.\n   */\n  topEvents?: number;\n  /**\n   * How to order results when getting top events.\n   */\n  orderby?: string;\n  /**\n   * Discover needs confirmation to run >30 day >10 project queries,\n   * optional and when not passed confirmation is not required.\n   */\n  confirmedQuery?: boolean;\n  /**\n   * Is query out of retention\n   */\n  expired?: boolean;\n  /**\n   * Query name used for displaying error toast if it is out of retention\n   */\n  name?: string;\n  /**\n   * Whether or not to include the last partial bucket. This happens for example when the\n   * current time is 11:26 and the last bucket ranges from 11:25-11:30. This means that\n   * the last bucket contains 1 minute worth of data while the rest contains 5 minutes.\n   *\n   * This flag indicates whether or not this last bucket should be included in the result.\n   */\n  partial: boolean;\n  /**\n   * Hide error toast (used for pages which also query eventsV2)\n   */\n  hideError?: boolean;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n};\n\ntype TimeAggregationProps =\n  | {includeTimeAggregation: true; timeAggregationSeriesName: string}\n  | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};\n\ntype EventsRequestProps = DefaultProps & TimeAggregationProps & EventsRequestPartialProps;\n\ntype EventsRequestState = {\n  reloading: boolean;\n  errored: boolean;\n  timeseriesData: null | EventsStats | MultiSeriesEventsStats;\n  fetchedWithPrevious: boolean;\n};\n\nconst propNamesToIgnore = ['api', 'children', 'organization', 'loading'];\nconst omitIgnoredProps = (props: EventsRequestProps) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends React.PureComponent<EventsRequestProps, EventsRequestState> {\n  static defaultProps: DefaultProps = {\n    period: undefined,\n    start: null,\n    end: null,\n    interval: '1d',\n    limit: 15,\n    query: '',\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  state: EventsRequestState = {\n    reloading: !!this.props.loading,\n    errored: false,\n    timeseriesData: null,\n    fetchedWithPrevious: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: EventsRequestProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {api, confirmedQuery, expired, name, hideError, ...props} = this.props;\n    let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;\n\n    if (confirmedQuery === false) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n    }));\n\n    if (expired) {\n      addErrorMessage(\n        t('%s has an invalid date range. Please try a more recent date range.', name),\n        {append: true}\n      );\n\n      this.setState({\n        errored: true,\n      });\n    } else {\n      try {\n        api.clear();\n        timeseriesData = await doEventsRequest(api, props);\n      } catch (resp) {\n        if (!hideError) {\n          if (resp && resp.responseJSON && resp.responseJSON.detail) {\n            addErrorMessage(resp.responseJSON.detail);\n          } else {\n            addErrorMessage(t('Error loading chart data'));\n          }\n        }\n        this.setState({\n          errored: true,\n        });\n      }\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n      fetchedWithPrevious: props.includePrevious,\n    });\n  };\n\n  /**\n   * Retrieves data set for the current period (since data can potentially\n   * contain previous period's data), as well as the previous period if\n   * possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = (\n    data: EventsStatsData\n  ): {previous: EventsStatsData | null; current: EventsStatsData} => {\n    const {fetchedWithPrevious} = this.state;\n    const {period, includePrevious} = this.props;\n\n    const hasPreviousPeriod =\n      fetchedWithPrevious || canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n    return {\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp(\n    data: EventsStatsData,\n    getName: (\n      timestamp: number,\n      countArray: {count: number}[],\n      i: number\n    ) => number = timestamp => timestamp * 1000\n  ): SeriesDataUnit[] {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  }\n\n  /**\n   * Get previous period data, but transform timestamps so that data fits unto\n   * the current period's data axis\n   */\n  transformPreviousPeriodData(\n    current: EventsStatsData,\n    previous: EventsStatsData | null\n  ): Series | null {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: this.props.previousSeriesName ?? 'Previous',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (_timestamp, _countArray, i) => current[i][0] * 1000\n      ),\n    };\n  }\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries(data: EventsStatsData, seriesName: string = ''): Series {\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  }\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {\n    return [\n      {\n        seriesName: seriesName || 'Current',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  }\n\n  processData(response: EventsStats | null) {\n    if (!response) {\n      return {};\n    }\n\n    const {data, totals} = response;\n    const {includeTransformedData, includeTimeAggregation, timeAggregationSeriesName} =\n      this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData\n      ? this.transformTimeseriesData(current, this.props.currentSeriesName)\n      : [];\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(current, previous)\n      : null;\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName || '')\n      : {};\n    const timeframe =\n      response.start && response.end\n        ? !previous\n          ? {\n              start: response.start * 1000,\n              end: response.end * 1000,\n            }\n          : {\n              // Find the midpoint of start & end since previous includes 2x data\n              start: (response.start + response.end) * 500,\n              end: response.end * 1000,\n            }\n        : undefined;\n    return {\n      data: transformedData,\n      allData: data,\n      originalData: current,\n      totals,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n      timeframe,\n    };\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n    const {timeseriesData, reloading, errored} = this.state;\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n\n    if (isMultiSeriesStats(timeseriesData)) {\n      // Convert multi-series results into chartable series. Multi series results\n      // are created when multiple yAxis are used or a topEvents request is made.\n      // Convert the timeseries data into a multi-series result set.\n      // As the server will have replied with a map like:\n      // {[titleString: string]: EventsStats}\n      let timeframe: {start: number; end: number} | undefined = undefined;\n      const results: MultiSeriesResults = Object.keys(timeseriesData)\n        .map((seriesName: string): [number, Series] => {\n          const seriesData: EventsStats = timeseriesData[seriesName];\n          // Use the first timeframe we find from the series since all series have the same timeframe anyways\n          if (seriesData.start && seriesData.end && !timeframe) {\n            timeframe = {\n              start: seriesData.start * 1000,\n              end: seriesData.end * 1000,\n            };\n          }\n          const transformed = this.transformTimeseriesData(\n            seriesData.data,\n            seriesName\n          )[0];\n          return [seriesData.order || 0, transformed];\n        })\n        .sort((a, b) => a[0] - b[0])\n        .map(item => item[1]);\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        results,\n        timeframe,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n\n    const {\n      data: transformedTimeseriesData,\n      allData: allTimeseriesData,\n      originalData: originalTimeseriesData,\n      totals: timeseriesTotals,\n      originalPreviousData: originalPreviousTimeseriesData,\n      previousData: previousTimeseriesData,\n      timeAggregatedData,\n      timeframe,\n    } = this.processData(timeseriesData);\n\n    return children({\n      loading,\n      reloading,\n      errored,\n      // timeseries data\n      timeseriesData: transformedTimeseriesData,\n      allTimeseriesData,\n      originalTimeseriesData,\n      timeseriesTotals,\n      originalPreviousTimeseriesData,\n      previousTimeseriesData,\n      timeAggregatedData,\n      timeframe,\n      // sometimes we want to reference props that were given to EventsRequest\n      ...props,\n    });\n  }\n}\nexport default EventsRequest;\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import {\n  createSavedQuery,\n  deleteSavedQuery,\n  updateSavedQuery,\n} from 'app/actionCreators/discoverSavedQueries';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport {NewQuery, Organization, SavedQuery} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\n\nexport function handleCreateQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView,\n  // True if this is a brand new query being saved\n  // False if this is a modification from a saved query\n  isNewQuery: boolean = true\n): Promise<SavedQuery> {\n  const payload = eventView.toNewQuery();\n\n  trackAnalyticsEvent({\n    ...getAnalyticsCreateEventKeyName(isNewQuery, 'request'),\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = createSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then((savedQuery: SavedQuery) => {\n      addSuccessMessage(t('Query saved'));\n\n      trackAnalyticsEvent({\n        ...getAnalyticsCreateEventKeyName(isNewQuery, 'success'),\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n\n      return savedQuery;\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not saved'));\n\n      trackAnalyticsEvent({\n        ...getAnalyticsCreateEventKeyName(isNewQuery, 'failed'),\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error:\n          (err && err.message) ||\n          `Could not save a ${isNewQuery ? 'new' : 'existing'} query`,\n      });\n    });\n\n  return promise;\n}\n\nconst EVENT_NAME_EXISTING_MAP = {\n  request: 'Discoverv2: Request to save a saved query as a new query',\n  success: 'Discoverv2: Successfully saved a saved query as a new query',\n  failed: 'Discoverv2: Failed to save a saved query as a new query',\n};\nconst EVENT_NAME_NEW_MAP = {\n  request: 'Discoverv2: Request to save a new query',\n  success: 'Discoverv2: Successfully saved a new query',\n  failed: 'Discoverv2: Failed to save a new query',\n};\n\nexport function handleUpdateQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n): Promise<SavedQuery> {\n  const payload = eventView.toNewQuery();\n\n  if (!eventView.name) {\n    addErrorMessage(t('Please name your query'));\n    return Promise.reject();\n  }\n\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.update_query_request',\n    eventName: 'Discoverv2: Request to update a saved query',\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = updateSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then((savedQuery: SavedQuery) => {\n      addSuccessMessage(t('Query updated'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_success',\n        eventName: 'Discoverv2: Successfully updated a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n      // NOTE: there is no need to convert _saved into an EventView and push it\n      //       to the browser history, since this.props.eventView already\n      //       derives from location.\n\n      return savedQuery;\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not updated'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_failed',\n        eventName: 'Discoverv2: Failed to update a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error: (err && err.message) || 'Failed to update a query',\n      });\n    });\n\n  return promise;\n}\n\n/**\n * Essentially the same as handleUpdateQuery, but specifically for changing the\n * name of the query\n */\nexport function handleUpdateQueryName(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n) {\n  const payload = eventView.toNewQuery();\n\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.update_query_name_request',\n    eventName: \"Discoverv2: Request to update a saved query's name\",\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = updateSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then(_saved => {\n      addSuccessMessage(t('Query name saved'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_name_success',\n        eventName: \"Discoverv2: Successfully updated a saved query's name\",\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query name not saved'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_failed',\n        eventName: \"Discoverv2: Failed to update a saved query's name\",\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error: (err && err.message) || 'Failed to update a query name',\n      });\n    });\n\n  return promise;\n}\n\nexport function handleDeleteQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n): Promise<void> {\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.delete_query_request',\n    eventName: 'Discoverv2: Request to delete a saved query',\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n  });\n\n  const promise = deleteSavedQuery(api, organization.slug, eventView.id!);\n\n  promise\n    .then(() => {\n      addSuccessMessage(t('Query deleted'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.delete_query_success',\n        eventName: 'Discoverv2: Successfully deleted a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n      });\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not deleted'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.delete_query_failed',\n        eventName: 'Discoverv2: Failed to delete a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n        error: (err && err.message) || 'Failed to delete query',\n      });\n    });\n\n  return promise;\n}\n\nexport function getAnalyticsCreateEventKeyName(\n  // True if this is a brand new query being saved\n  // False if this is a modification from a saved query\n  isNewQuery: boolean,\n  type: 'request' | 'success' | 'failed'\n) {\n  const eventKey = isNewQuery\n    ? 'discover_v2.save_new_query_' + type\n    : 'discover_v2.save_existing_query_' + type;\n\n  const eventName = isNewQuery ? EVENT_NAME_NEW_MAP[type] : EVENT_NAME_EXISTING_MAP[type];\n\n  return {\n    eventKey,\n    eventName,\n  };\n}\n\n/**\n * Takes in a DiscoverV2 NewQuery object and returns a Partial containing\n * the desired fields to populate into reload analytics\n */\nexport function extractAnalyticsQueryFields(payload: NewQuery): Partial<NewQuery> {\n  const {projects, fields, query} = payload;\n  return {\n    projects,\n    fields,\n    query,\n  };\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n"],"names":["fetchSavedQuery","api","orgId","queryId","promise","requestPromise","method","catch","addErrorMessage","t","createSavedQuery","query","data","updateSavedQuery","id","updateSavedQueryVisit","Client","deleteSavedQuery","makeKey","prefix","dismissBanner","bannerKey","localStorage","setItem","Banner","title","subtitle","isDismissable","dismissKey","className","backgroundImg","backgroundComponent","children","dismissed","dismiss","key","value","setValue","React","getItem","useDismissable","BannerWrapper","CloseButton","onClick","BannerContent","BannerTitle","BannerSubtitle","StyledButtonBar","gap","p","css","theme","gray500","space","dropShadowLight","borderRadius","white","breakpoints","fontSizeExtraLarge","ButtonBar","Button","defaultProps","icon","label","priority","borderless","size","AreaChart","render","series","stacked","colors","props","this","map","seriesName","otherSeriesProps","i","LineSeries","AreaSeries","stack","undefined","name","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","propNamesToIgnore","omitIgnoredProps","omitBy","_value","includes","EventsRequest","reloading","loading","errored","timeseriesData","fetchedWithPrevious","async","confirmedQuery","expired","hideError","setState","state","append","clear","doEventsRequest","resp","responseJSON","detail","unmounting","includePrevious","period","hasPreviousPeriod","canIncludePreviousPeriod","dataMiddleIndex","Math","floor","length","current","slice","previous","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","componentWillUnmount","calculateTotalsPerTimestamp","getName","timestamp","countArray","reduce","acc","count","transformPreviousPeriodData","previousSeriesName","_timestamp","_countArray","transformAggregatedTimeseries","transformTimeseriesData","countsForTimestamp","processData","response","totals","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","getData","currentSeriesName","allData","originalData","originalPreviousData","previousData","timeAggregatedData","timeframe","start","end","showLoading","isMultiSeriesStats","results","Object","keys","seriesData","transformed","order","sort","a","b","item","transformedTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","previousTimeseriesData","interval","limit","SentryDocumentTitle","orgSlug","projectSlug","docTitle","handleCreateQuery","organization","eventView","isNewQuery","payload","toNewQuery","trackAnalyticsEvent","getAnalyticsCreateEventKeyName","organization_id","parseInt","extractAnalyticsQueryFields","slug","then","savedQuery","addSuccessMessage","err","error","message","EVENT_NAME_EXISTING_MAP","request","success","failed","EVENT_NAME_NEW_MAP","handleUpdateQuery","Promise","reject","eventKey","eventName","handleUpdateQueryName","_saved","handleDeleteQuery","type","projects","fields","module","exports","predicate","TypeError","args","arguments","call","apply","baseIteratee","negate","pickBy","object"],"sourceRoot":""}