# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['maha',
 'maha.cleaners',
 'maha.cleaners.functions',
 'maha.constants',
 'maha.constants.arabic',
 'maha.constants.english',
 'maha.constants.persian',
 'maha.expressions',
 'maha.parsers',
 'maha.parsers.functions',
 'maha.parsers.rules',
 'maha.parsers.rules.duration',
 'maha.parsers.rules.numeral',
 'maha.parsers.rules.ordinal',
 'maha.parsers.rules.time',
 'maha.parsers.templates',
 'maha.processors',
 'maha.rexy',
 'maha.rexy.templates']

package_data = \
{'': ['*'], 'maha.rexy': ['cache/*']}

install_requires = \
['python-dateutil>=2.8.2,<3.0.0', 'tqdm>=4.61.1,<5.0.0']

setup_kwargs = {
    'name': 'mahad',
    'version': '0.1.1',
    'description': 'An Arabic text processing library intended for use in NLP applications.',
    'long_description': '<hr />\n<p align="center">\n    <a href="#"><img src="https://github.com/TRoboto/Maha/raw/main/images/logo.png" width= 400px></a>\n    <br />\n    <br />\n    <img src="https://github.com/TRoboto/maha/actions/workflows/ci.yml/badge.svg", alt="CI">\n    <img src="https://img.shields.io/badge/readme-tested-brightgreen.svg", alt="Examples are tested">\n    <a href="https://codecov.io/gh/TRoboto/Maha"><img src="https://codecov.io/gh/TRoboto/Maha/branch/main/graph/badge.svg?token=9CBWXT8URA", alt="codecov"></a>\n    <a href="https://discord.gg/6W2tRFE7k4"><img src="https://img.shields.io/discord/863503708385312769.svg?label=discord&logo=discord" alt="Discord"></a>\n    <a href="https://opensource.org/licenses/BSD-3-Clause"><img src="https://img.shields.io/badge/License-BSD%203--Clause-blue.svg" alt="License"></a>\n    <a href="https://github.com/psf/black"><img src="https://img.shields.io/badge/code%20style-black-000000.svg" alt="Code style: black"></a>\n    <a href="http://mypy-lang.org/"><img src="http://www.mypy-lang.org/static/mypy_badge.svg" alt="Checked with mypy"></a>\n    <br />\n    <br />\n    An Arabic text processing library intended for use in NLP applications.\n\n</p>\n<hr />\n\nMaha is a text processing library specially developed to deal with Arabic text. The beta version can be used to clean and parse text, files, and folders with or without streaming capability.\n\nIf you need help or want to discuss topics related to Maha, feel free to reach out to our [Discord](https://discord.gg/6W2tRFE7k4) server. If you would like to submit a bug report or feature request, please open an issue.\n\n## Table of Content\n\n- [Installation](#installation)\n- [Quick start](#quick-start)\n  - [Cleaners](#cleaners)\n  - [Parsers](#parsers)\n  - [Processors](#processors)\n- [Documentation](#documentation)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nSimply run the following to install Maha:\n\n```bash\npip install mahad # pronounced maha d\n```\n\nFor source installation, check the [documentation](#).\n\n## Quick start\n\nAs of now, Maha supports three main modules: cleaners, parsers and processors.\n\n### Cleaners\n\nCleaners, from its name, contain a set of functions for cleaning texts. They can be used to [keep](), [remove](), or [replace]() specific characters as well as [normalize]() characters and check if the text [contains]() specific characters.\n\n**Examples**\n\n```py\n>>> from maha.cleaners.functions import keep, remove, contains, replace\n>>> sample_text = """\n... 1. بِسْمِ اللَّـهِ الرَّحْمَـٰـــنِ الرَّحِيمِ\n... 2. In the name of God, the most gracious, the most merciful\n... """\n>>> keep(sample_text, arabic=True)\n\'بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ\'\n>>> keep(sample_text, arabic_letters=True)\n\'بسم الله الرحمن الرحيم\'\n>>> keep(sample_text, arabic_letters=True, harakat=True)\n\'بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ\'\n>>> remove(sample_text, numbers=True, punctuations=True)\n\'بِسْمِ اللَّـهِ الرَّحْمَـٰـــنِ الرَّحِيمِ\\n In the name of God the most gracious the most merciful\'\n>>> contains(sample_text, numbers=True)\nTrue\n>>> contains(sample_text, hashtags=True, arabic=True, emails=True)\n{\'arabic\': True, \'emails\': False, \'hashtags\': False}\n>>> replace(keep(sample_text, english_letters=True), "God", "Allah")\n\'In the name of Allah the most gracious the most merciful\'\n\n```\n\n```py\n>>> from maha.cleaners.functions import keep, normalize\n>>> sample_text = "وَمَا أَرْسَلْنَاكَ إِلَّا رَحْمَةً لِّلْعَالَمِينَ"\n>>> keep(sample_text, arabic_letters=True)\n\'وما أرسلناك إلا رحمة للعالمين\'\n>>> normalize(keep(sample_text, arabic_letters=True), alef=True, teh_marbuta=True)\n\'وما ارسلناك الا رحمه للعالمين\'\n>>> sample_text = \'ﷺ\'\n>>> normalize(sample_text, ligatures=True)\n\'صلى الله عليه وسلم\'\n\n```\n\n```py\n>>> from maha.cleaners.functions import reduce_repeated_substring, remove_arabic_letter_dots, connect_single_letter_word\n>>> sample_text = "ههههههههههه أضحكني"\n>>> reduce_repeated_substring(sample_text)\n\'هه أضحكني\'\n>>> remove_arabic_letter_dots(sample_text)\n\'ههههههههههه أصحكٮى\'\n>>> connect_single_letter_word(\'محمد و احمد\', waw=True)\n\'محمد واحمد\'\n\n```\n\n### Parsers\n\nParsers include a set of rules for extracting values from text. All rules can be accessed and utilized by two main functions, [parse]() and [parse_dimension]().\n\n**Examples**\n\nParse character and simple expressions.\n\n```py\n>>> from maha.parsers.functions import parse\n>>> sample_text = \'@Maha مها هي مكتبة لمساعدتك في التعامل مع النص العربي @مها test@example.com\'\n>>> parse(sample_text, emails=True)\n[Dimension(body=test@example.com, value=test@example.com, start=59, end=75, dimension_type=DimensionType.EMAILS)]\n>>> parse(sample_text, english_mentions=True)\n[Dimension(body=@Maha, value=@Maha, start=0, end=5, dimension_type=DimensionType.ENGLISH_MENTIONS)]\n>>> parse(sample_text, mentions=True, emails=True)\n[Dimension(body=test@example.com, value=test@example.com, start=59, end=75, dimension_type=DimensionType.EMAILS), Dimension(body=@Maha, value=@Maha, start=0, end=5, dimension_type=DimensionType.MENTIONS), Dimension(body=@مها, value=@مها, start=54, end=58, dimension_type=DimensionType.MENTIONS)]\n\n```\n\nParse time.\n\n```py\n>>> from maha.parsers.functions import parse_dimension\n>>> from datetime import datetime\n>>> now = datetime(2021, 9, 1)\n>>> sample_text = \'الثالث من شباط بعد ثلاث سنين يوم السبت الساعة خمسة واثنين واربعين دقيقة العصر\'\n>>> output_time = parse_dimension(sample_text, time=True)[0]\n>>> output_time\nDimension(body=الثالث من شباط بعد ثلاث سنين يوم السبت الساعة خمسة واثنين واربعين دقيقة العصر, value=TimeValue(years=3, am_pm=\'PM\', month=2, day=3, weekday=SA, hour=17, minute=42, second=0, microsecond=0), start=0, end=77, dimension_type=DimensionType.TIME)\n>>> output_time.value.is_hours_set()\nTrue\n>>> output_time.value + now\ndatetime.datetime(2024, 2, 3, 17, 42)\n\n```\n\n```py\n>>> from maha.parsers.functions import parse_dimension\n>>> from datetime import datetime\n>>> now = datetime(2021, 9, 1)\n>>> now + parse_dimension(\'غدا الساعة الحادية عشر\', time=True)[0].value\ndatetime.datetime(2021, 9, 2, 11, 0)\n>>> now + parse_dimension(\'الخميس الأسبوع الجاي عالوحدة ونص المسا\', time=True)[0].value\ndatetime.datetime(2021, 9, 9, 13, 30)\n>>> now + parse_dimension(\'عام الفين وواحد\', time=True)[0].value\ndatetime.datetime(2001, 9, 1, 0, 0)\n\n```\n\nParse duration.\n\n```py\n>>> from maha.parsers.functions import parse_dimension\n>>> output = parse_dimension(\'شهرين واربعين يوم\', duration=True)[0].value\n>>> output\nDurationValue(values=[ValueUnit(value=2, unit=<DurationUnit.MONTHS: 6>), ValueUnit(value=40, unit=<DurationUnit.DAYS: 4>)], normalized_unit=<DurationUnit.SECONDS: 1>)\n>>> print(\'2 months and 40 days in seconds:\', output.normalized_value.value)\n2 months and 40 days in seconds: 8640000\n>>> parse_dimension(\'الف وخمسمية دقيقة وساعة\', duration=True)[0].value\nDurationValue(values=[ValueUnit(value=1, unit=<DurationUnit.HOURS: 3>), ValueUnit(value=1500, unit=<DurationUnit.MINUTES: 2>)], normalized_unit=<DurationUnit.SECONDS: 1>)\n>>> parse_dimension(\'30 مليون ثانية\', duration=True)[0].value\nDurationValue(values=[ValueUnit(value=30000000, unit=<DurationUnit.SECONDS: 1>)], normalized_unit=<DurationUnit.SECONDS: 1>)\n\n```\n\nParse numeral.\n\n```py\n>>> from maha.parsers.functions import parse_dimension\n>>> parse_dimension(\'عشرة\', numeral=True)\n[Dimension(body=عشرة, value=10, start=0, end=4, dimension_type=DimensionType.NUMERAL)]\n>>> parse_dimension(\'عشرين الف وخمسمية وثلاثة واربعين\', numeral=True)[0].value\n20543\n>>> parse_dimension(\'حدعشر\', numeral=True)[0].value\n11\n>>> parse_dimension(\'200 وعشرين\', numeral=True)[0].value\n220\n>>> parse_dimension(\'عشرين فاصلة اربعة\', numeral=True)[0].value\n20.4\n>>> parse_dimension(\'10.5 الف\', numeral=True)[0].value\n10500.0\n>>> parse_dimension(\'مليون وستمية وعشرة\', numeral=True)[0].value\n1000610\n>>> parse_dimension(\'اطنعش\', numeral=True)[0].value\n12\n>>> parse_dimension(\'عشرة وعشرين\', numeral=True)[0].value\n30\n\n```\n\nParse ordinal.\n\n```py\n>>> from maha.parsers.functions import parse_dimension\n>>> parse_dimension(\'الأول\', ordinal=True)\n[Dimension(body=الأول, value=1, start=0, end=5, dimension_type=DimensionType.ORDINAL)]\n>>> parse_dimension(\'العاشر\', ordinal=True)[0].value\n10\n>>> parse_dimension(\'التاسع والخمسين\', ordinal=True)[0].value\n59\n>>> parse_dimension(\'المئة والثالث والثلاثون\', ordinal=True)[0].value\n133\n>>> parse_dimension(\'المليون\', ordinal=True)[0].value\n1000000\n\n```\n\n### Processors\n\nProcessors are wrappers for cleaners to clean text files and folders. There are two types of processors, the simple [TextProcessor]() and [FileProcessor]() processors, and the [StreamTextProcessor]() and [StreamFileProcessor]() processors.\n\n**Examples**\n\nWe can use the sample data that comes with Maha.\n\n```py\n>>> from pathlib import Path\n>>> import maha\n\n>>> resource_path = Path(maha.__file__).parents[1] / "sample_data/surah_al-ala.txt"\n>>> data = resource_path.read_text()\n>>> print(data)\n﷽\n   سَبِّحِ اسْمَ رَبِّكَ الْأَعْلَى ﴿1﴾\nالَّذِي خَلَقَ فَسَوَّىٰ ﴿2﴾\nوَالَّذِي قَدَّرَ فَهَدَىٰ ﴿3﴾\nوَالَّذِي أَخْرَجَ الْمَرْعَىٰ ﴿4﴾\nفَجَعَلَهُ غُثَاءً أَحْوَىٰ ﴿5﴾\nسَنُقْرِئُكَ فَلَا تَنْسَىٰ ﴿6﴾\nإِلَّا مَا شَاءَ اللَّهُ ۚ إِنَّهُ يَعْلَمُ الْجَهْرَ وَمَا يَخْفَىٰ ﴿7﴾\nوَنُيَسِّرُكَ لِلْيُسْرَىٰ ﴿8﴾\nفَذَكِّرْ إِنْ نَفَعَتِ الذِّكْرَىٰ ﴿9﴾\nسَيَذَّكَّرُ مَنْ يَخْشَىٰ ﴿10﴾\nوَيَتَجَنَّبُهَا الْأَشْقَى ﴿11﴾\nالَّذِي يَصْلَى النَّارَ الْكُبْرَىٰ ﴿12﴾\nثُمَّ لَا يَمُوتُ فِيهَا وَلَا يَحْيَىٰ ﴿13﴾\nقَدْ أَفْلَحَ مَنْ تَزَكَّىٰ ﴿14﴾\nوَذَكَرَ اسْمَ رَبِّهِ فَصَلَّىٰ ﴿15﴾\nبَلْ تُؤْثِرُونَ الْحَيَاةَ الدُّنْيَا ﴿16﴾\nوَالْآخِرَةُ خَيْرٌ وَأَبْقَىٰ ﴿17﴾\nإِنَّ هَٰذَا لَفِي الصُّحُفِ الْأُولَىٰ ﴿18﴾\nصُحُفِ إِبْرَاهِيمَ وَمُوسَىٰ ﴿19﴾\n<BLANKLINE>\n<BLANKLINE>\n<BLANKLINE>\n\n>>> from maha.processors import FileProcessor\n>>> proc = FileProcessor(resource_path)\n>>> cleaned = proc.normalize(all=True).keep(arabic_letters=True).drop_empty_lines()\n>>> print(cleaned.text)\nبسم الله الرحمن الرحيم\nسبح اسم ربك الاعلي\nالذي خلق فسوي\nوالذي قدر فهدي\nوالذي اخرج المرعي\nفجعله غثاء احوي\nسنقريك فلا تنسي\nالا ما شاء الله انه يعلم الجهر وما يخفي\nونيسرك لليسري\nفذكر ان نفعت الذكري\nسيذكر من يخشي\nويتجنبها الاشقي\nالذي يصلي النار الكبري\nثم لا يموت فيها ولا يحيي\nقد افلح من تزكي\nوذكر اسم ربه فصلي\nبل توثرون الحياه الدنيا\nوالاخره خير وابقي\nان هذا لفي الصحف الاولي\nصحف ابراهيم وموسي\n\n>>> unique_char = cleaned.get(unique_characters=True)\n>>> unique_char.sort()\n>>> unique_char\n[\' \', \'ء\', \'ا\', \'ب\', \'ت\', \'ث\', \'ج\', \'ح\', \'خ\', \'د\', \'ذ\', \'ر\', \'ز\', \'س\', \'ش\', \'ص\', \'ع\', \'غ\', \'ف\', \'ق\', \'ك\', \'ل\', \'م\', \'ن\', \'ه\', \'و\', \'ي\']\n\n```\n\nAdditional step is required for stream processors. You need to call `~.process_and_save` function after calling at least one clean function\n\n```py\n...\nfrom maha.processors import StreamFileProcessor\n\nproc = StreamFileProcessor(resource_path)\ncleaned = proc.normalize(all=True).keep(arabic_letters=True).drop_empty_lines()\n# ----------------\ncleaned.process_and_save(\'output_file.txt\')\n# ----------------\n...\n```\n\n## Documentation\n\nDocumentation are hosted at [ReadTheDocs](https://maha.readthedocs.io).\n\n## Contributing\n\nMaha welcomes and encourages everyone to contribute. Contributions are always appreciated. Feel free to take a look at our contribution guidelines in the [documentation](#).\n\n## License\n\nMaha is BSD-licensed.\n',
    'author': 'Mohammad Al-Fetyani',
    'author_email': 'm4bh@hotmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/TRoboto/Maha',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7.1,<4.0.0',
}


setup(**setup_kwargs)
