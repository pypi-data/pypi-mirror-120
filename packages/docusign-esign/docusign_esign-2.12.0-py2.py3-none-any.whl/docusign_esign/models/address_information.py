# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class AddressInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'country': 'str',
        'fax': 'str',
        'phone': 'str',
        'state': 'str',
        'street1': 'str',
        'street2': 'str',
        'zip': 'str',
        'zip_plus4': 'str'
    }

    attribute_map = {
        'city': 'city',
        'country': 'country',
        'fax': 'fax',
        'phone': 'phone',
        'state': 'state',
        'street1': 'street1',
        'street2': 'street2',
        'zip': 'zip',
        'zip_plus4': 'zipPlus4'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """AddressInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._city = None
        self._country = None
        self._fax = None
        self._phone = None
        self._state = None
        self._street1 = None
        self._street2 = None
        self._zip = None
        self._zip_plus4 = None
        self.discriminator = None

        setattr(self, "_{}".format('city'), kwargs.get('city', None))
        setattr(self, "_{}".format('country'), kwargs.get('country', None))
        setattr(self, "_{}".format('fax'), kwargs.get('fax', None))
        setattr(self, "_{}".format('phone'), kwargs.get('phone', None))
        setattr(self, "_{}".format('state'), kwargs.get('state', None))
        setattr(self, "_{}".format('street1'), kwargs.get('street1', None))
        setattr(self, "_{}".format('street2'), kwargs.get('street2', None))
        setattr(self, "_{}".format('zip'), kwargs.get('zip', None))
        setattr(self, "_{}".format('zip_plus4'), kwargs.get('zip_plus4', None))

    @property
    def city(self):
        """Gets the city of this AddressInformation.  # noqa: E501

        The city associated with the address.  # noqa: E501

        :return: The city of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressInformation.

        The city associated with the address.  # noqa: E501

        :param city: The city of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AddressInformation.  # noqa: E501

        Specifies the country associated with the address.  # noqa: E501

        :return: The country of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressInformation.

        Specifies the country associated with the address.  # noqa: E501

        :param country: The country of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def fax(self):
        """Gets the fax of this AddressInformation.  # noqa: E501

        A Fax number associated with the address if one is available.  # noqa: E501

        :return: The fax of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this AddressInformation.

        A Fax number associated with the address if one is available.  # noqa: E501

        :param fax: The fax of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def phone(self):
        """Gets the phone of this AddressInformation.  # noqa: E501

        A phone number associated with the address.  # noqa: E501

        :return: The phone of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AddressInformation.

        A phone number associated with the address.  # noqa: E501

        :param phone: The phone of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this AddressInformation.  # noqa: E501

        The state or province associated with the address.  # noqa: E501

        :return: The state of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressInformation.

        The state or province associated with the address.  # noqa: E501

        :param state: The state of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street1(self):
        """Gets the street1 of this AddressInformation.  # noqa: E501

        The first line of the address.  # noqa: E501

        :return: The street1 of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this AddressInformation.

        The first line of the address.  # noqa: E501

        :param street1: The street1 of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this AddressInformation.  # noqa: E501

        The second line of the address (optional).  # noqa: E501

        :return: The street2 of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this AddressInformation.

        The second line of the address (optional).  # noqa: E501

        :param street2: The street2 of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._street2 = street2

    @property
    def zip(self):
        """Gets the zip of this AddressInformation.  # noqa: E501

        The zip or postal code associated with the address.  # noqa: E501

        :return: The zip of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AddressInformation.

        The zip or postal code associated with the address.  # noqa: E501

        :param zip: The zip of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def zip_plus4(self):
        """Gets the zip_plus4 of this AddressInformation.  # noqa: E501

          # noqa: E501

        :return: The zip_plus4 of this AddressInformation.  # noqa: E501
        :rtype: str
        """
        return self._zip_plus4

    @zip_plus4.setter
    def zip_plus4(self, zip_plus4):
        """Sets the zip_plus4 of this AddressInformation.

          # noqa: E501

        :param zip_plus4: The zip_plus4 of this AddressInformation.  # noqa: E501
        :type: str
        """

        self._zip_plus4 = zip_plus4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressInformation):
            return True

        return self.to_dict() != other.to_dict()
