# coding: utf-8

"""
    DocuSign REST API

    The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_esign.client.configuration import Configuration


class EnvelopeTemplateDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'description': 'str',
        'folder_id': 'str',
        'folder_name': 'str',
        'folder_uri': 'str',
        'last_modified': 'str',
        'last_modified_by': 'UserInfo',
        'name': 'str',
        'new_password': 'str',
        'owner': 'UserInfo',
        'page_count': 'int',
        'parent_folder_uri': 'str',
        'password': 'str',
        'shared': 'str',
        'template_id': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'created': 'created',
        'description': 'description',
        'folder_id': 'folderId',
        'folder_name': 'folderName',
        'folder_uri': 'folderUri',
        'last_modified': 'lastModified',
        'last_modified_by': 'lastModifiedBy',
        'name': 'name',
        'new_password': 'newPassword',
        'owner': 'owner',
        'page_count': 'pageCount',
        'parent_folder_uri': 'parentFolderUri',
        'password': 'password',
        'shared': 'shared',
        'template_id': 'templateId',
        'uri': 'uri'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """EnvelopeTemplateDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._description = None
        self._folder_id = None
        self._folder_name = None
        self._folder_uri = None
        self._last_modified = None
        self._last_modified_by = None
        self._name = None
        self._new_password = None
        self._owner = None
        self._page_count = None
        self._parent_folder_uri = None
        self._password = None
        self._shared = None
        self._template_id = None
        self._uri = None
        self.discriminator = None

        setattr(self, "_{}".format('created'), kwargs.get('created', None))
        setattr(self, "_{}".format('description'), kwargs.get('description', None))
        setattr(self, "_{}".format('folder_id'), kwargs.get('folder_id', None))
        setattr(self, "_{}".format('folder_name'), kwargs.get('folder_name', None))
        setattr(self, "_{}".format('folder_uri'), kwargs.get('folder_uri', None))
        setattr(self, "_{}".format('last_modified'), kwargs.get('last_modified', None))
        setattr(self, "_{}".format('last_modified_by'), kwargs.get('last_modified_by', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('new_password'), kwargs.get('new_password', None))
        setattr(self, "_{}".format('owner'), kwargs.get('owner', None))
        setattr(self, "_{}".format('page_count'), kwargs.get('page_count', None))
        setattr(self, "_{}".format('parent_folder_uri'), kwargs.get('parent_folder_uri', None))
        setattr(self, "_{}".format('password'), kwargs.get('password', None))
        setattr(self, "_{}".format('shared'), kwargs.get('shared', None))
        setattr(self, "_{}".format('template_id'), kwargs.get('template_id', None))
        setattr(self, "_{}".format('uri'), kwargs.get('uri', None))

    @property
    def created(self):
        """Gets the created of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The created of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param created: The created of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The description of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param description: The description of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folder_id(self):
        """Gets the folder_id of this EnvelopeTemplateDefinition.  # noqa: E501

        The ID for the folder.  # noqa: E501

        :return: The folder_id of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this EnvelopeTemplateDefinition.

        The ID for the folder.  # noqa: E501

        :param folder_id: The folder_id of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def folder_name(self):
        """Gets the folder_name of this EnvelopeTemplateDefinition.  # noqa: E501

         The name of the folder in which the template is located.  # noqa: E501

        :return: The folder_name of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._folder_name

    @folder_name.setter
    def folder_name(self, folder_name):
        """Sets the folder_name of this EnvelopeTemplateDefinition.

         The name of the folder in which the template is located.  # noqa: E501

        :param folder_name: The folder_name of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._folder_name = folder_name

    @property
    def folder_uri(self):
        """Gets the folder_uri of this EnvelopeTemplateDefinition.  # noqa: E501

        The URI of the folder.  # noqa: E501

        :return: The folder_uri of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._folder_uri

    @folder_uri.setter
    def folder_uri(self, folder_uri):
        """Sets the folder_uri of this EnvelopeTemplateDefinition.

        The URI of the folder.  # noqa: E501

        :param folder_uri: The folder_uri of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._folder_uri = folder_uri

    @property
    def last_modified(self):
        """Gets the last_modified of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The last_modified of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param last_modified: The last_modified of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this EnvelopeTemplateDefinition.  # noqa: E501


        :return: The last_modified_by of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: UserInfo
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this EnvelopeTemplateDefinition.


        :param last_modified_by: The last_modified_by of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: UserInfo
        """

        self._last_modified_by = last_modified_by

    @property
    def name(self):
        """Gets the name of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The name of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param name: The name of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new_password(self):
        """Gets the new_password of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The new_password of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param new_password: The new_password of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._new_password = new_password

    @property
    def owner(self):
        """Gets the owner of this EnvelopeTemplateDefinition.  # noqa: E501


        :return: The owner of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: UserInfo
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EnvelopeTemplateDefinition.


        :param owner: The owner of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: UserInfo
        """

        self._owner = owner

    @property
    def page_count(self):
        """Gets the page_count of this EnvelopeTemplateDefinition.  # noqa: E501

        An integer value specifying the number of document pages in the template. Omit this property if not submitting a page count.  # noqa: E501

        :return: The page_count of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this EnvelopeTemplateDefinition.

        An integer value specifying the number of document pages in the template. Omit this property if not submitting a page count.  # noqa: E501

        :param page_count: The page_count of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    @property
    def parent_folder_uri(self):
        """Gets the parent_folder_uri of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The parent_folder_uri of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_uri

    @parent_folder_uri.setter
    def parent_folder_uri(self, parent_folder_uri):
        """Sets the parent_folder_uri of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param parent_folder_uri: The parent_folder_uri of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._parent_folder_uri = parent_folder_uri

    @property
    def password(self):
        """Gets the password of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The password of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param password: The password of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def shared(self):
        """Gets the shared of this EnvelopeTemplateDefinition.  # noqa: E501

        When set to **true**, this custom tab is shared.  # noqa: E501

        :return: The shared of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this EnvelopeTemplateDefinition.

        When set to **true**, this custom tab is shared.  # noqa: E501

        :param shared: The shared of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._shared = shared

    @property
    def template_id(self):
        """Gets the template_id of this EnvelopeTemplateDefinition.  # noqa: E501

        The unique identifier of the template. If this is not provided, DocuSign will generate a value.   # noqa: E501

        :return: The template_id of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this EnvelopeTemplateDefinition.

        The unique identifier of the template. If this is not provided, DocuSign will generate a value.   # noqa: E501

        :param template_id: The template_id of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def uri(self):
        """Gets the uri of this EnvelopeTemplateDefinition.  # noqa: E501

          # noqa: E501

        :return: The uri of this EnvelopeTemplateDefinition.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EnvelopeTemplateDefinition.

          # noqa: E501

        :param uri: The uri of this EnvelopeTemplateDefinition.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvelopeTemplateDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvelopeTemplateDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvelopeTemplateDefinition):
            return True

        return self.to_dict() != other.to_dict()
